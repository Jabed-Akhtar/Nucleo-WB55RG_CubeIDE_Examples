
LED_Blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025c8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08002704  08002704  00012704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080027b0  080027b0  000127b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080027b4  080027b4  000127b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000004  080027b8  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000010  080027c4  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000030  080027c4  00020030  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00009838  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000186d  00000000  00000000  00029878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000e78  00000000  00000000  0002b0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000dc0  00000000  00000000  0002bf60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0001f7e1  00000000  00000000  0002cd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000095d7  00000000  00000000  0004c501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000cb93b  00000000  00000000  00055ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  00121413  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003a84  00000000  00000000  00121468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000010 	.word	0x20000010
 8000158:	00000000 	.word	0x00000000
 800015c:	080026ec 	.word	0x080026ec

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000014 	.word	0x20000014
 8000178:	080026ec 	.word	0x080026ec

0800017c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000188:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800018a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	4313      	orrs	r3, r2
 8000192:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000198:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	4013      	ands	r3, r2
 800019e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001a0:	68fb      	ldr	r3, [r7, #12]
}
 80001a2:	bf00      	nop
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ac:	4770      	bx	lr
	...

080001b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001b4:	f000 f9b2 	bl	800051c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80001b8:	f000 f854 	bl	8000264 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80001bc:	f000 f8aa 	bl	8000314 <PeriphCommonClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001c0:	f000 f8c6 	bl	8000350 <MX_GPIO_Init>

  /* Infinite loop */
  while (1)
  {
    // enabling LED1(Blue; PB5) and disabling others and waiting for 500ms
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80001c4:	2201      	movs	r2, #1
 80001c6:	2120      	movs	r1, #32
 80001c8:	4825      	ldr	r0, [pc, #148]	; (8000260 <main+0xb0>)
 80001ca:	f000 fca5 	bl	8000b18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80001ce:	2200      	movs	r2, #0
 80001d0:	2101      	movs	r1, #1
 80001d2:	4823      	ldr	r0, [pc, #140]	; (8000260 <main+0xb0>)
 80001d4:	f000 fca0 	bl	8000b18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80001d8:	2200      	movs	r2, #0
 80001da:	2102      	movs	r1, #2
 80001dc:	4820      	ldr	r0, [pc, #128]	; (8000260 <main+0xb0>)
 80001de:	f000 fc9b 	bl	8000b18 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80001e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001e6:	f000 fa1f 	bl	8000628 <HAL_Delay>
	// enabling LED2(Green; PB0) and disabling others and waiting for 500ms
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80001ea:	2201      	movs	r2, #1
 80001ec:	2101      	movs	r1, #1
 80001ee:	481c      	ldr	r0, [pc, #112]	; (8000260 <main+0xb0>)
 80001f0:	f000 fc92 	bl	8000b18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80001f4:	2200      	movs	r2, #0
 80001f6:	2120      	movs	r1, #32
 80001f8:	4819      	ldr	r0, [pc, #100]	; (8000260 <main+0xb0>)
 80001fa:	f000 fc8d 	bl	8000b18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80001fe:	2200      	movs	r2, #0
 8000200:	2102      	movs	r1, #2
 8000202:	4817      	ldr	r0, [pc, #92]	; (8000260 <main+0xb0>)
 8000204:	f000 fc88 	bl	8000b18 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000208:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800020c:	f000 fa0c 	bl	8000628 <HAL_Delay>
	// enabling LED3(Red; PB1) and disabling others and waiting for 500ms
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000210:	2201      	movs	r2, #1
 8000212:	2102      	movs	r1, #2
 8000214:	4812      	ldr	r0, [pc, #72]	; (8000260 <main+0xb0>)
 8000216:	f000 fc7f 	bl	8000b18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800021a:	2200      	movs	r2, #0
 800021c:	2120      	movs	r1, #32
 800021e:	4810      	ldr	r0, [pc, #64]	; (8000260 <main+0xb0>)
 8000220:	f000 fc7a 	bl	8000b18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000224:	2200      	movs	r2, #0
 8000226:	2101      	movs	r1, #1
 8000228:	480d      	ldr	r0, [pc, #52]	; (8000260 <main+0xb0>)
 800022a:	f000 fc75 	bl	8000b18 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800022e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000232:	f000 f9f9 	bl	8000628 <HAL_Delay>
	// enabling LED2(Green; PB0) and disabling others and waiting for 500ms
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000236:	2201      	movs	r2, #1
 8000238:	2101      	movs	r1, #1
 800023a:	4809      	ldr	r0, [pc, #36]	; (8000260 <main+0xb0>)
 800023c:	f000 fc6c 	bl	8000b18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000240:	2200      	movs	r2, #0
 8000242:	2120      	movs	r1, #32
 8000244:	4806      	ldr	r0, [pc, #24]	; (8000260 <main+0xb0>)
 8000246:	f000 fc67 	bl	8000b18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800024a:	2200      	movs	r2, #0
 800024c:	2102      	movs	r1, #2
 800024e:	4804      	ldr	r0, [pc, #16]	; (8000260 <main+0xb0>)
 8000250:	f000 fc62 	bl	8000b18 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000254:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000258:	f000 f9e6 	bl	8000628 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800025c:	e7b2      	b.n	80001c4 <main+0x14>
 800025e:	bf00      	nop
 8000260:	48000400 	.word	0x48000400

08000264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b09a      	sub	sp, #104	; 0x68
 8000268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026a:	f107 0320 	add.w	r3, r7, #32
 800026e:	2248      	movs	r2, #72	; 0x48
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f002 fa32 	bl	80026dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]
 8000284:	611a      	str	r2, [r3, #16]
 8000286:	615a      	str	r2, [r3, #20]
 8000288:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800028a:	4b21      	ldr	r3, [pc, #132]	; (8000310 <SystemClock_Config+0xac>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000292:	4a1f      	ldr	r2, [pc, #124]	; (8000310 <SystemClock_Config+0xac>)
 8000294:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000298:	6013      	str	r3, [r2, #0]
 800029a:	4b1d      	ldr	r3, [pc, #116]	; (8000310 <SystemClock_Config+0xac>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80002a2:	603b      	str	r3, [r7, #0]
 80002a4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80002a6:	2322      	movs	r3, #34	; 0x22
 80002a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002b0:	2301      	movs	r3, #1
 80002b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b4:	2340      	movs	r3, #64	; 0x40
 80002b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80002b8:	2300      	movs	r3, #0
 80002ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002bc:	2360      	movs	r3, #96	; 0x60
 80002be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002c0:	2300      	movs	r3, #0
 80002c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c4:	f107 0320 	add.w	r3, r7, #32
 80002c8:	4618      	mov	r0, r3
 80002ca:	f000 ffb9 	bl	8001240 <HAL_RCC_OscConfig>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80002d4:	f000 f862 	bl	800039c <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80002d8:	236f      	movs	r3, #111	; 0x6f
 80002da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002dc:	2300      	movs	r3, #0
 80002de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e0:	2300      	movs	r3, #0
 80002e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e8:	2300      	movs	r3, #0
 80002ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80002ec:	2300      	movs	r3, #0
 80002ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	2100      	movs	r1, #0
 80002f8:	4618      	mov	r0, r3
 80002fa:	f001 fb2d 	bl	8001958 <HAL_RCC_ClockConfig>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000304:	f000 f84a 	bl	800039c <Error_Handler>
  }
}
 8000308:	bf00      	nop
 800030a:	3768      	adds	r7, #104	; 0x68
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	58000400 	.word	0x58000400

08000314 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b094      	sub	sp, #80	; 0x50
 8000318:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800031a:	463b      	mov	r3, r7
 800031c:	2250      	movs	r2, #80	; 0x50
 800031e:	2100      	movs	r1, #0
 8000320:	4618      	mov	r0, r3
 8000322:	f002 f9db 	bl	80026dc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000326:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800032a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800032c:	2300      	movs	r3, #0
 800032e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000330:	2310      	movs	r3, #16
 8000332:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000334:	463b      	mov	r3, r7
 8000336:	4618      	mov	r0, r3
 8000338:	f001 ff25 	bl	8002186 <HAL_RCCEx_PeriphCLKConfig>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000342:	f000 f82b 	bl	800039c <Error_Handler>
  }
}
 8000346:	bf00      	nop
 8000348:	3750      	adds	r7, #80	; 0x50
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
	...

08000350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	2200      	movs	r2, #0
 800035a:	601a      	str	r2, [r3, #0]
 800035c:	605a      	str	r2, [r3, #4]
 800035e:	609a      	str	r2, [r3, #8]
 8000360:	60da      	str	r2, [r3, #12]
 8000362:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000364:	2002      	movs	r0, #2
 8000366:	f7ff ff09 	bl	800017c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 800036a:	2200      	movs	r2, #0
 800036c:	2123      	movs	r1, #35	; 0x23
 800036e:	480a      	ldr	r0, [pc, #40]	; (8000398 <MX_GPIO_Init+0x48>)
 8000370:	f000 fbd2 	bl	8000b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8000374:	2323      	movs	r3, #35	; 0x23
 8000376:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000378:	2301      	movs	r3, #1
 800037a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037c:	2300      	movs	r3, #0
 800037e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000380:	2300      	movs	r3, #0
 8000382:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	4619      	mov	r1, r3
 8000388:	4803      	ldr	r0, [pc, #12]	; (8000398 <MX_GPIO_Init+0x48>)
 800038a:	f000 fa55 	bl	8000838 <HAL_GPIO_Init>

}
 800038e:	bf00      	nop
 8000390:	3718      	adds	r7, #24
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	48000400 	.word	0x48000400

0800039c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a0:	b672      	cpsid	i
}
 80003a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003a4:	e7fe      	b.n	80003a4 <Error_Handler+0x8>

080003a6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003a6:	b480      	push	{r7}
 80003a8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003aa:	bf00      	nop
 80003ac:	46bd      	mov	sp, r7
 80003ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b2:	4770      	bx	lr

080003b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003b8:	e7fe      	b.n	80003b8 <NMI_Handler+0x4>

080003ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003ba:	b480      	push	{r7}
 80003bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003be:	e7fe      	b.n	80003be <HardFault_Handler+0x4>

080003c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003c4:	e7fe      	b.n	80003c4 <MemManage_Handler+0x4>

080003c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003c6:	b480      	push	{r7}
 80003c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003ca:	e7fe      	b.n	80003ca <BusFault_Handler+0x4>

080003cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003d0:	e7fe      	b.n	80003d0 <UsageFault_Handler+0x4>

080003d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003d2:	b480      	push	{r7}
 80003d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003d6:	bf00      	nop
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr

080003e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003e4:	bf00      	nop
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr

080003ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003ee:	b480      	push	{r7}
 80003f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003f2:	bf00      	nop
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr

080003fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000400:	f000 f8e6 	bl	80005d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000404:	bf00      	nop
 8000406:	bd80      	pop	{r7, pc}

08000408 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800040c:	4b24      	ldr	r3, [pc, #144]	; (80004a0 <SystemInit+0x98>)
 800040e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000412:	4a23      	ldr	r2, [pc, #140]	; (80004a0 <SystemInit+0x98>)
 8000414:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000418:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800041c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000426:	f043 0301 	orr.w	r3, r3, #1
 800042a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800042c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000430:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000434:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800043a:	681a      	ldr	r2, [r3, #0]
 800043c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000440:	4b18      	ldr	r3, [pc, #96]	; (80004a4 <SystemInit+0x9c>)
 8000442:	4013      	ands	r3, r2
 8000444:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800044a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800044e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000452:	f023 0305 	bic.w	r3, r3, #5
 8000456:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800045a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800045e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000462:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000466:	f023 0301 	bic.w	r3, r3, #1
 800046a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800046e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000472:	4a0d      	ldr	r2, [pc, #52]	; (80004a8 <SystemInit+0xa0>)
 8000474:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800047a:	4a0b      	ldr	r2, [pc, #44]	; (80004a8 <SystemInit+0xa0>)
 800047c:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800047e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000488:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800048c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800048e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000492:	2200      	movs	r2, #0
 8000494:	619a      	str	r2, [r3, #24]
}
 8000496:	bf00      	nop
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr
 80004a0:	e000ed00 	.word	0xe000ed00
 80004a4:	faf6fefb 	.word	0xfaf6fefb
 80004a8:	22041000 	.word	0x22041000

080004ac <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80004ac:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004ae:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004b0:	3304      	adds	r3, #4

080004b2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004b2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004b4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80004b6:	d3f9      	bcc.n	80004ac <CopyDataInit>
  bx lr
 80004b8:	4770      	bx	lr

080004ba <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80004ba:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80004bc:	3004      	adds	r0, #4

080004be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80004be:	4288      	cmp	r0, r1
  bcc FillZerobss
 80004c0:	d3fb      	bcc.n	80004ba <FillZerobss>
  bx lr
 80004c2:	4770      	bx	lr

080004c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004c4:	480c      	ldr	r0, [pc, #48]	; (80004f8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80004c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004c8:	f7ff ff9e 	bl	8000408 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80004cc:	480b      	ldr	r0, [pc, #44]	; (80004fc <LoopForever+0x8>)
 80004ce:	490c      	ldr	r1, [pc, #48]	; (8000500 <LoopForever+0xc>)
 80004d0:	4a0c      	ldr	r2, [pc, #48]	; (8000504 <LoopForever+0x10>)
 80004d2:	2300      	movs	r3, #0
 80004d4:	f7ff ffed 	bl	80004b2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80004d8:	480b      	ldr	r0, [pc, #44]	; (8000508 <LoopForever+0x14>)
 80004da:	490c      	ldr	r1, [pc, #48]	; (800050c <LoopForever+0x18>)
 80004dc:	2300      	movs	r3, #0
 80004de:	f7ff ffee 	bl	80004be <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80004e2:	480b      	ldr	r0, [pc, #44]	; (8000510 <LoopForever+0x1c>)
 80004e4:	490b      	ldr	r1, [pc, #44]	; (8000514 <LoopForever+0x20>)
 80004e6:	2300      	movs	r3, #0
 80004e8:	f7ff ffe9 	bl	80004be <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004ec:	f002 f8d2 	bl	8002694 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80004f0:	f7ff fe5e 	bl	80001b0 <main>

080004f4 <LoopForever>:

LoopForever:
  b LoopForever
 80004f4:	e7fe      	b.n	80004f4 <LoopForever>
 80004f6:	0000      	.short	0x0000
  ldr   r0, =_estack
 80004f8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80004fc:	20000004 	.word	0x20000004
 8000500:	20000010 	.word	0x20000010
 8000504:	080027b8 	.word	0x080027b8
  INIT_BSS _sbss, _ebss
 8000508:	20000010 	.word	0x20000010
 800050c:	20000030 	.word	0x20000030
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000510:	20030000 	.word	0x20030000
 8000514:	20030000 	.word	0x20030000

08000518 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000518:	e7fe      	b.n	8000518 <ADC1_IRQHandler>
	...

0800051c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000522:	2300      	movs	r3, #0
 8000524:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <HAL_Init+0x3c>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a0b      	ldr	r2, [pc, #44]	; (8000558 <HAL_Init+0x3c>)
 800052c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000530:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000532:	2003      	movs	r0, #3
 8000534:	f000 f94e 	bl	80007d4 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000538:	200f      	movs	r0, #15
 800053a:	f000 f80f 	bl	800055c <HAL_InitTick>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d002      	beq.n	800054a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000544:	2301      	movs	r3, #1
 8000546:	71fb      	strb	r3, [r7, #7]
 8000548:	e001      	b.n	800054e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800054a:	f7ff ff2c 	bl	80003a6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800054e:	79fb      	ldrb	r3, [r7, #7]
}
 8000550:	4618      	mov	r0, r3
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	58004000 	.word	0x58004000

0800055c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000564:	2300      	movs	r3, #0
 8000566:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000568:	4b17      	ldr	r3, [pc, #92]	; (80005c8 <HAL_InitTick+0x6c>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d024      	beq.n	80005ba <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000570:	f001 fba0 	bl	8001cb4 <HAL_RCC_GetHCLKFreq>
 8000574:	4602      	mov	r2, r0
 8000576:	4b14      	ldr	r3, [pc, #80]	; (80005c8 <HAL_InitTick+0x6c>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	4619      	mov	r1, r3
 800057c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000580:	fbb3 f3f1 	udiv	r3, r3, r1
 8000584:	fbb2 f3f3 	udiv	r3, r2, r3
 8000588:	4618      	mov	r0, r3
 800058a:	f000 f948 	bl	800081e <HAL_SYSTICK_Config>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d10f      	bne.n	80005b4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2b0f      	cmp	r3, #15
 8000598:	d809      	bhi.n	80005ae <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800059a:	2200      	movs	r2, #0
 800059c:	6879      	ldr	r1, [r7, #4]
 800059e:	f04f 30ff 	mov.w	r0, #4294967295
 80005a2:	f000 f922 	bl	80007ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005a6:	4a09      	ldr	r2, [pc, #36]	; (80005cc <HAL_InitTick+0x70>)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	e007      	b.n	80005be <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80005ae:	2301      	movs	r3, #1
 80005b0:	73fb      	strb	r3, [r7, #15]
 80005b2:	e004      	b.n	80005be <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80005b4:	2301      	movs	r3, #1
 80005b6:	73fb      	strb	r3, [r7, #15]
 80005b8:	e001      	b.n	80005be <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005ba:	2301      	movs	r3, #1
 80005bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005be:	7bfb      	ldrb	r3, [r7, #15]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3710      	adds	r7, #16
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	2000000c 	.word	0x2000000c
 80005cc:	20000008 	.word	0x20000008

080005d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <HAL_IncTick+0x20>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	461a      	mov	r2, r3
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <HAL_IncTick+0x24>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4413      	add	r3, r2
 80005e0:	4a04      	ldr	r2, [pc, #16]	; (80005f4 <HAL_IncTick+0x24>)
 80005e2:	6013      	str	r3, [r2, #0]
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	2000000c 	.word	0x2000000c
 80005f4:	2000002c 	.word	0x2000002c

080005f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  return uwTick;
 80005fc:	4b03      	ldr	r3, [pc, #12]	; (800060c <HAL_GetTick+0x14>)
 80005fe:	681b      	ldr	r3, [r3, #0]
}
 8000600:	4618      	mov	r0, r3
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	2000002c 	.word	0x2000002c

08000610 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000614:	4b03      	ldr	r3, [pc, #12]	; (8000624 <HAL_GetTickPrio+0x14>)
 8000616:	681b      	ldr	r3, [r3, #0]
}
 8000618:	4618      	mov	r0, r3
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	20000008 	.word	0x20000008

08000628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8000630:	f7ff ffe2 	bl	80005f8 <HAL_GetTick>
 8000634:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000640:	d005      	beq.n	800064e <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8000642:	4b0a      	ldr	r3, [pc, #40]	; (800066c <HAL_Delay+0x44>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	461a      	mov	r2, r3
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	4413      	add	r3, r2
 800064c:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 800064e:	bf00      	nop
 8000650:	f7ff ffd2 	bl	80005f8 <HAL_GetTick>
 8000654:	4602      	mov	r2, r0
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	1ad3      	subs	r3, r2, r3
 800065a:	68fa      	ldr	r2, [r7, #12]
 800065c:	429a      	cmp	r2, r3
 800065e:	d8f7      	bhi.n	8000650 <HAL_Delay+0x28>
    {
    }
  }
 8000660:	bf00      	nop
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	2000000c 	.word	0x2000000c

08000670 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f003 0307 	and.w	r3, r3, #7
 800067e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000686:	68ba      	ldr	r2, [r7, #8]
 8000688:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800068c:	4013      	ands	r3, r2
 800068e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000698:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800069c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006a2:	4a04      	ldr	r2, [pc, #16]	; (80006b4 <__NVIC_SetPriorityGrouping+0x44>)
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	60d3      	str	r3, [r2, #12]
}
 80006a8:	bf00      	nop
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006bc:	4b04      	ldr	r3, [pc, #16]	; (80006d0 <__NVIC_GetPriorityGrouping+0x18>)
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	0a1b      	lsrs	r3, r3, #8
 80006c2:	f003 0307 	and.w	r3, r3, #7
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	6039      	str	r1, [r7, #0]
 80006de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	db0a      	blt.n	80006fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	490c      	ldr	r1, [pc, #48]	; (8000720 <__NVIC_SetPriority+0x4c>)
 80006ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f2:	0112      	lsls	r2, r2, #4
 80006f4:	b2d2      	uxtb	r2, r2
 80006f6:	440b      	add	r3, r1
 80006f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006fc:	e00a      	b.n	8000714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	b2da      	uxtb	r2, r3
 8000702:	4908      	ldr	r1, [pc, #32]	; (8000724 <__NVIC_SetPriority+0x50>)
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	f003 030f 	and.w	r3, r3, #15
 800070a:	3b04      	subs	r3, #4
 800070c:	0112      	lsls	r2, r2, #4
 800070e:	b2d2      	uxtb	r2, r2
 8000710:	440b      	add	r3, r1
 8000712:	761a      	strb	r2, [r3, #24]
}
 8000714:	bf00      	nop
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	e000e100 	.word	0xe000e100
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000728:	b480      	push	{r7}
 800072a:	b089      	sub	sp, #36	; 0x24
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	f003 0307 	and.w	r3, r3, #7
 800073a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800073c:	69fb      	ldr	r3, [r7, #28]
 800073e:	f1c3 0307 	rsb	r3, r3, #7
 8000742:	2b04      	cmp	r3, #4
 8000744:	bf28      	it	cs
 8000746:	2304      	movcs	r3, #4
 8000748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	3304      	adds	r3, #4
 800074e:	2b06      	cmp	r3, #6
 8000750:	d902      	bls.n	8000758 <NVIC_EncodePriority+0x30>
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	3b03      	subs	r3, #3
 8000756:	e000      	b.n	800075a <NVIC_EncodePriority+0x32>
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800075c:	f04f 32ff 	mov.w	r2, #4294967295
 8000760:	69bb      	ldr	r3, [r7, #24]
 8000762:	fa02 f303 	lsl.w	r3, r2, r3
 8000766:	43da      	mvns	r2, r3
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	401a      	ands	r2, r3
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000770:	f04f 31ff 	mov.w	r1, #4294967295
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	fa01 f303 	lsl.w	r3, r1, r3
 800077a:	43d9      	mvns	r1, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000780:	4313      	orrs	r3, r2
         );
}
 8000782:	4618      	mov	r0, r3
 8000784:	3724      	adds	r7, #36	; 0x24
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
	...

08000790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	3b01      	subs	r3, #1
 800079c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007a0:	d301      	bcc.n	80007a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007a2:	2301      	movs	r3, #1
 80007a4:	e00f      	b.n	80007c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007a6:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <SysTick_Config+0x40>)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	3b01      	subs	r3, #1
 80007ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ae:	210f      	movs	r1, #15
 80007b0:	f04f 30ff 	mov.w	r0, #4294967295
 80007b4:	f7ff ff8e 	bl	80006d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <SysTick_Config+0x40>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007be:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <SysTick_Config+0x40>)
 80007c0:	2207      	movs	r2, #7
 80007c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007c4:	2300      	movs	r3, #0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	e000e010 	.word	0xe000e010

080007d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff ff47 	bl	8000670 <__NVIC_SetPriorityGrouping>
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b086      	sub	sp, #24
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	4603      	mov	r3, r0
 80007f2:	60b9      	str	r1, [r7, #8]
 80007f4:	607a      	str	r2, [r7, #4]
 80007f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007f8:	f7ff ff5e 	bl	80006b8 <__NVIC_GetPriorityGrouping>
 80007fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	68b9      	ldr	r1, [r7, #8]
 8000802:	6978      	ldr	r0, [r7, #20]
 8000804:	f7ff ff90 	bl	8000728 <NVIC_EncodePriority>
 8000808:	4602      	mov	r2, r0
 800080a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800080e:	4611      	mov	r1, r2
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff ff5f 	bl	80006d4 <__NVIC_SetPriority>
}
 8000816:	bf00      	nop
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b082      	sub	sp, #8
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f7ff ffb2 	bl	8000790 <SysTick_Config>
 800082c:	4603      	mov	r3, r0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000838:	b480      	push	{r7}
 800083a:	b087      	sub	sp, #28
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000846:	e14c      	b.n	8000ae2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	2101      	movs	r1, #1
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	fa01 f303 	lsl.w	r3, r1, r3
 8000854:	4013      	ands	r3, r2
 8000856:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	2b00      	cmp	r3, #0
 800085c:	f000 813e 	beq.w	8000adc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	f003 0303 	and.w	r3, r3, #3
 8000868:	2b01      	cmp	r3, #1
 800086a:	d005      	beq.n	8000878 <HAL_GPIO_Init+0x40>
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	f003 0303 	and.w	r3, r3, #3
 8000874:	2b02      	cmp	r3, #2
 8000876:	d130      	bne.n	80008da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	2203      	movs	r2, #3
 8000884:	fa02 f303 	lsl.w	r3, r2, r3
 8000888:	43db      	mvns	r3, r3
 800088a:	693a      	ldr	r2, [r7, #16]
 800088c:	4013      	ands	r3, r2
 800088e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	68da      	ldr	r2, [r3, #12]
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	fa02 f303 	lsl.w	r3, r2, r3
 800089c:	693a      	ldr	r2, [r7, #16]
 800089e:	4313      	orrs	r3, r2
 80008a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	693a      	ldr	r2, [r7, #16]
 80008a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008ae:	2201      	movs	r2, #1
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	fa02 f303 	lsl.w	r3, r2, r3
 80008b6:	43db      	mvns	r3, r3
 80008b8:	693a      	ldr	r2, [r7, #16]
 80008ba:	4013      	ands	r3, r2
 80008bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	091b      	lsrs	r3, r3, #4
 80008c4:	f003 0201 	and.w	r2, r3, #1
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	693a      	ldr	r2, [r7, #16]
 80008d8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	f003 0303 	and.w	r3, r3, #3
 80008e2:	2b03      	cmp	r3, #3
 80008e4:	d017      	beq.n	8000916 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	2203      	movs	r2, #3
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	43db      	mvns	r3, r3
 80008f8:	693a      	ldr	r2, [r7, #16]
 80008fa:	4013      	ands	r3, r2
 80008fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	689a      	ldr	r2, [r3, #8]
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	4313      	orrs	r3, r2
 800090e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	f003 0303 	and.w	r3, r3, #3
 800091e:	2b02      	cmp	r3, #2
 8000920:	d123      	bne.n	800096a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	08da      	lsrs	r2, r3, #3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3208      	adds	r2, #8
 800092a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800092e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	f003 0307 	and.w	r3, r3, #7
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	220f      	movs	r2, #15
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	43db      	mvns	r3, r3
 8000940:	693a      	ldr	r2, [r7, #16]
 8000942:	4013      	ands	r3, r2
 8000944:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	691a      	ldr	r2, [r3, #16]
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	f003 0307 	and.w	r3, r3, #7
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	4313      	orrs	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	08da      	lsrs	r2, r3, #3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3208      	adds	r2, #8
 8000964:	6939      	ldr	r1, [r7, #16]
 8000966:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	2203      	movs	r2, #3
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	43db      	mvns	r3, r3
 800097c:	693a      	ldr	r2, [r7, #16]
 800097e:	4013      	ands	r3, r2
 8000980:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	f003 0203 	and.w	r2, r3, #3
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	fa02 f303 	lsl.w	r3, r2, r3
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	4313      	orrs	r3, r2
 8000996:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	f000 8098 	beq.w	8000adc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80009ac:	4a54      	ldr	r2, [pc, #336]	; (8000b00 <HAL_GPIO_Init+0x2c8>)
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	089b      	lsrs	r3, r3, #2
 80009b2:	3302      	adds	r3, #2
 80009b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	f003 0303 	and.w	r3, r3, #3
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	220f      	movs	r2, #15
 80009c4:	fa02 f303 	lsl.w	r3, r2, r3
 80009c8:	43db      	mvns	r3, r3
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	4013      	ands	r3, r2
 80009ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009d6:	d019      	beq.n	8000a0c <HAL_GPIO_Init+0x1d4>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a4a      	ldr	r2, [pc, #296]	; (8000b04 <HAL_GPIO_Init+0x2cc>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d013      	beq.n	8000a08 <HAL_GPIO_Init+0x1d0>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4a49      	ldr	r2, [pc, #292]	; (8000b08 <HAL_GPIO_Init+0x2d0>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d00d      	beq.n	8000a04 <HAL_GPIO_Init+0x1cc>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a48      	ldr	r2, [pc, #288]	; (8000b0c <HAL_GPIO_Init+0x2d4>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d007      	beq.n	8000a00 <HAL_GPIO_Init+0x1c8>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4a47      	ldr	r2, [pc, #284]	; (8000b10 <HAL_GPIO_Init+0x2d8>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d101      	bne.n	80009fc <HAL_GPIO_Init+0x1c4>
 80009f8:	2304      	movs	r3, #4
 80009fa:	e008      	b.n	8000a0e <HAL_GPIO_Init+0x1d6>
 80009fc:	2307      	movs	r3, #7
 80009fe:	e006      	b.n	8000a0e <HAL_GPIO_Init+0x1d6>
 8000a00:	2303      	movs	r3, #3
 8000a02:	e004      	b.n	8000a0e <HAL_GPIO_Init+0x1d6>
 8000a04:	2302      	movs	r3, #2
 8000a06:	e002      	b.n	8000a0e <HAL_GPIO_Init+0x1d6>
 8000a08:	2301      	movs	r3, #1
 8000a0a:	e000      	b.n	8000a0e <HAL_GPIO_Init+0x1d6>
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	697a      	ldr	r2, [r7, #20]
 8000a10:	f002 0203 	and.w	r2, r2, #3
 8000a14:	0092      	lsls	r2, r2, #2
 8000a16:	4093      	lsls	r3, r2
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a1e:	4938      	ldr	r1, [pc, #224]	; (8000b00 <HAL_GPIO_Init+0x2c8>)
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	089b      	lsrs	r3, r3, #2
 8000a24:	3302      	adds	r3, #2
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a2c:	4b39      	ldr	r3, [pc, #228]	; (8000b14 <HAL_GPIO_Init+0x2dc>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	43db      	mvns	r3, r3
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d003      	beq.n	8000a50 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a50:	4a30      	ldr	r2, [pc, #192]	; (8000b14 <HAL_GPIO_Init+0x2dc>)
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000a56:	4b2f      	ldr	r3, [pc, #188]	; (8000b14 <HAL_GPIO_Init+0x2dc>)
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	43db      	mvns	r3, r3
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	4013      	ands	r3, r2
 8000a64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d003      	beq.n	8000a7a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a7a:	4a26      	ldr	r2, [pc, #152]	; (8000b14 <HAL_GPIO_Init+0x2dc>)
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a80:	4b24      	ldr	r3, [pc, #144]	; (8000b14 <HAL_GPIO_Init+0x2dc>)
 8000a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d003      	beq.n	8000aa6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000aa6:	4a1b      	ldr	r2, [pc, #108]	; (8000b14 <HAL_GPIO_Init+0x2dc>)
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000aae:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <HAL_GPIO_Init+0x2dc>)
 8000ab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	43db      	mvns	r3, r3
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	4013      	ands	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d003      	beq.n	8000ad4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ad4:	4a0f      	ldr	r2, [pc, #60]	; (8000b14 <HAL_GPIO_Init+0x2dc>)
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	f47f aeab 	bne.w	8000848 <HAL_GPIO_Init+0x10>
  }
}
 8000af2:	bf00      	nop
 8000af4:	bf00      	nop
 8000af6:	371c      	adds	r7, #28
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	40010000 	.word	0x40010000
 8000b04:	48000400 	.word	0x48000400
 8000b08:	48000800 	.word	0x48000800
 8000b0c:	48000c00 	.word	0x48000c00
 8000b10:	48001000 	.word	0x48001000
 8000b14:	58000800 	.word	0x58000800

08000b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	460b      	mov	r3, r1
 8000b22:	807b      	strh	r3, [r7, #2]
 8000b24:	4613      	mov	r3, r2
 8000b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b28:	787b      	ldrb	r3, [r7, #1]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d003      	beq.n	8000b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b2e:	887a      	ldrh	r2, [r7, #2]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b34:	e002      	b.n	8000b3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b36:	887a      	ldrh	r2, [r7, #2]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b56:	6013      	str	r3, [r2, #0]
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	58000400 	.word	0x58000400

08000b68 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <HAL_PWREx_GetVoltageRange+0x18>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	58000400 	.word	0x58000400

08000b84 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000b96:	d101      	bne.n	8000b9c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000b98:	2301      	movs	r3, #1
 8000b9a:	e000      	b.n	8000b9e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bba:	6013      	str	r3, [r2, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bd8:	6013      	str	r3, [r2, #0]
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000bf6:	d101      	bne.n	8000bfc <LL_RCC_HSE_IsReady+0x18>
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e000      	b.n	8000bfe <LL_RCC_HSE_IsReady+0x1a>
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c1a:	6013      	str	r3, [r2, #0]
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c38:	6013      	str	r3, [r2, #0]
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c56:	d101      	bne.n	8000c5c <LL_RCC_HSI_IsReady+0x18>
 8000c58:	2301      	movs	r3, #1
 8000c5a:	e000      	b.n	8000c5e <LL_RCC_HSI_IsReady+0x1a>
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	061b      	lsls	r3, r3, #24
 8000c7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c82:	4313      	orrs	r3, r2
 8000c84:	604b      	str	r3, [r1, #4]
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000c9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000cc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cc4:	f023 0301 	bic.w	r3, r3, #1
 8000cc8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8000cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	d101      	bne.n	8000cee <LL_RCC_HSI48_IsReady+0x18>
 8000cea:	2301      	movs	r3, #1
 8000cec:	e000      	b.n	8000cf0 <LL_RCC_HSI48_IsReady+0x1a>
 8000cee:	2300      	movs	r3, #0
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d2c:	f023 0301 	bic.w	r3, r3, #1
 8000d30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d4e:	f043 0304 	orr.w	r3, r3, #4
 8000d52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d70:	f023 0304 	bic.w	r3, r3, #4
 8000d74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d101      	bne.n	8000d9a <LL_RCC_LSE_IsReady+0x18>
 8000d96:	2301      	movs	r3, #1
 8000d98:	e000      	b.n	8000d9c <LL_RCC_LSE_IsReady+0x1a>
 8000d9a:	2300      	movs	r3, #0
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000db2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000dd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000dd8:	f023 0301 	bic.w	r3, r3, #1
 8000ddc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8000dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d101      	bne.n	8000e02 <LL_RCC_LSI1_IsReady+0x18>
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e000      	b.n	8000e04 <LL_RCC_LSI1_IsReady+0x1a>
 8000e02:	2300      	movs	r3, #0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e1e:	f043 0304 	orr.w	r3, r3, #4
 8000e22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e40:	f023 0304 	bic.w	r3, r3, #4
 8000e44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8000e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e5e:	f003 0308 	and.w	r3, r3, #8
 8000e62:	2b08      	cmp	r3, #8
 8000e64:	d101      	bne.n	8000e6a <LL_RCC_LSI2_IsReady+0x18>
 8000e66:	2301      	movs	r3, #1
 8000e68:	e000      	b.n	8000e6c <LL_RCC_LSI2_IsReady+0x1a>
 8000e6a:	2300      	movs	r3, #0
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8000e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e86:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	021b      	lsls	r3, r3, #8
 8000e8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e92:	4313      	orrs	r3, r2
 8000e94:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ed0:	f023 0301 	bic.w	r3, r3, #1
 8000ed4:	6013      	str	r3, [r2, #0]
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d101      	bne.n	8000ef6 <LL_RCC_MSI_IsReady+0x16>
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e000      	b.n	8000ef8 <LL_RCC_MSI_IsReady+0x18>
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8000f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	600b      	str	r3, [r1, #0]
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8000f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f3a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2bb0      	cmp	r3, #176	; 0xb0
 8000f40:	d901      	bls.n	8000f46 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8000f42:	23b0      	movs	r3, #176	; 0xb0
 8000f44:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8000f46:	687b      	ldr	r3, [r7, #4]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000f5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	021b      	lsls	r3, r3, #8
 8000f6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	604b      	str	r3, [r1, #4]
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	f023 0203 	bic.w	r2, r3, #3
 8000f90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	608b      	str	r3, [r1, #8]
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f003 030c 	and.w	r3, r3, #12
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	608b      	str	r3, [r1, #8]
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8000fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ff2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000ff6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ffa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4313      	orrs	r3, r2
 8001002:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800101a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800101e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001022:	f023 020f 	bic.w	r2, r3, #15
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	091b      	lsrs	r3, r3, #4
 800102a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800102e:	4313      	orrs	r3, r2
 8001030:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001052:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4313      	orrs	r3, r2
 800105a:	608b      	str	r3, [r1, #8]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800107a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4313      	orrs	r3, r2
 8001082:	608b      	str	r3, [r1, #8]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80010ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80010b4:	011b      	lsls	r3, r3, #4
 80010b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80010c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010d6:	6013      	str	r3, [r2, #0]
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80010e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80010f4:	6013      	str	r3, [r2, #0]
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800110e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001112:	d101      	bne.n	8001118 <LL_RCC_PLL_IsReady+0x18>
 8001114:	2301      	movs	r3, #1
 8001116:	e000      	b.n	800111a <LL_RCC_PLL_IsReady+0x1a>
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	0a1b      	lsrs	r3, r3, #8
 8001130:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001134:	4618      	mov	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800114c:	4618      	mov	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800115a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001164:	4618      	mov	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	f003 0303 	and.w	r3, r3, #3
}
 800117c:	4618      	mov	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800118a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001198:	d101      	bne.n	800119e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800119a:	2301      	movs	r3, #1
 800119c:	e000      	b.n	80011a0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80011ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80011b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80011be:	d101      	bne.n	80011c4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80011c0:	2301      	movs	r3, #1
 80011c2:	e000      	b.n	80011c6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80011d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80011dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e4:	d101      	bne.n	80011ea <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80011e6:	2301      	movs	r3, #1
 80011e8:	e000      	b.n	80011ec <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80011fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001204:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001208:	d101      	bne.n	800120e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800120a:	2301      	movs	r3, #1
 800120c:	e000      	b.n	8001210 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800121e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001228:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800122c:	d101      	bne.n	8001232 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800122e:	2301      	movs	r3, #1
 8001230:	e000      	b.n	8001234 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001232:	2300      	movs	r3, #0
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
	...

08001240 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b08d      	sub	sp, #52	; 0x34
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e37e      	b.n	8001950 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0320 	and.w	r3, r3, #32
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 8092 	beq.w	8001384 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001260:	f7ff fea1 	bl	8000fa6 <LL_RCC_GetSysClkSource>
 8001264:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001266:	f7ff ff82 	bl	800116e <LL_RCC_PLL_GetMainSource>
 800126a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800126c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800126e:	2b00      	cmp	r3, #0
 8001270:	d005      	beq.n	800127e <HAL_RCC_OscConfig+0x3e>
 8001272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001274:	2b0c      	cmp	r3, #12
 8001276:	d14c      	bne.n	8001312 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800127a:	2b01      	cmp	r3, #1
 800127c:	d149      	bne.n	8001312 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800127e:	f7ff fe2f 	bl	8000ee0 <LL_RCC_MSI_IsReady>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d005      	beq.n	8001294 <HAL_RCC_OscConfig+0x54>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	69db      	ldr	r3, [r3, #28]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d101      	bne.n	8001294 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e35d      	b.n	8001950 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001298:	f7ff fe47 	bl	8000f2a <LL_RCC_MSI_GetRange>
 800129c:	4603      	mov	r3, r0
 800129e:	429c      	cmp	r4, r3
 80012a0:	d914      	bls.n	80012cc <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fd18 	bl	8001cdc <RCC_SetFlashLatencyFromMSIRange>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e34c      	b.n	8001950 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fe21 	bl	8000f02 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fe45 	bl	8000f54 <LL_RCC_MSI_SetCalibTrimming>
 80012ca:	e013      	b.n	80012f4 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fe16 	bl	8000f02 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a1b      	ldr	r3, [r3, #32]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fe3a 	bl	8000f54 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e4:	4618      	mov	r0, r3
 80012e6:	f000 fcf9 	bl	8001cdc <RCC_SetFlashLatencyFromMSIRange>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e32d      	b.n	8001950 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80012f4:	f000 fcde 	bl	8001cb4 <HAL_RCC_GetHCLKFreq>
 80012f8:	4603      	mov	r3, r0
 80012fa:	4ab3      	ldr	r2, [pc, #716]	; (80015c8 <HAL_RCC_OscConfig+0x388>)
 80012fc:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80012fe:	4bb3      	ldr	r3, [pc, #716]	; (80015cc <HAL_RCC_OscConfig+0x38c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f92a 	bl	800055c <HAL_InitTick>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d039      	beq.n	8001382 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e31e      	b.n	8001950 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d01e      	beq.n	8001358 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800131a:	f7ff fdc3 	bl	8000ea4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800131e:	f7ff f96b 	bl	80005f8 <HAL_GetTick>
 8001322:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001326:	f7ff f967 	bl	80005f8 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e30b      	b.n	8001950 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001338:	f7ff fdd2 	bl	8000ee0 <LL_RCC_MSI_IsReady>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d0f1      	beq.n	8001326 <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fddb 	bl	8000f02 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fdff 	bl	8000f54 <LL_RCC_MSI_SetCalibTrimming>
 8001356:	e015      	b.n	8001384 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001358:	f7ff fdb3 	bl	8000ec2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800135c:	f7ff f94c 	bl	80005f8 <HAL_GetTick>
 8001360:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001364:	f7ff f948 	bl	80005f8 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e2ec      	b.n	8001950 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001376:	f7ff fdb3 	bl	8000ee0 <LL_RCC_MSI_IsReady>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1f1      	bne.n	8001364 <HAL_RCC_OscConfig+0x124>
 8001380:	e000      	b.n	8001384 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001382:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	2b00      	cmp	r3, #0
 800138e:	d04e      	beq.n	800142e <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001390:	f7ff fe09 	bl	8000fa6 <LL_RCC_GetSysClkSource>
 8001394:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001396:	f7ff feea 	bl	800116e <LL_RCC_PLL_GetMainSource>
 800139a:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800139c:	6a3b      	ldr	r3, [r7, #32]
 800139e:	2b08      	cmp	r3, #8
 80013a0:	d005      	beq.n	80013ae <HAL_RCC_OscConfig+0x16e>
 80013a2:	6a3b      	ldr	r3, [r7, #32]
 80013a4:	2b0c      	cmp	r3, #12
 80013a6:	d10d      	bne.n	80013c4 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	2b03      	cmp	r3, #3
 80013ac:	d10a      	bne.n	80013c4 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ae:	f7ff fc19 	bl	8000be4 <LL_RCC_HSE_IsReady>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d039      	beq.n	800142c <HAL_RCC_OscConfig+0x1ec>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d135      	bne.n	800142c <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e2c5      	b.n	8001950 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013cc:	d102      	bne.n	80013d4 <HAL_RCC_OscConfig+0x194>
 80013ce:	f7ff fbeb 	bl	8000ba8 <LL_RCC_HSE_Enable>
 80013d2:	e001      	b.n	80013d8 <HAL_RCC_OscConfig+0x198>
 80013d4:	f7ff fbf7 	bl	8000bc6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d012      	beq.n	8001406 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e0:	f7ff f90a 	bl	80005f8 <HAL_GetTick>
 80013e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013e8:	f7ff f906 	bl	80005f8 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b64      	cmp	r3, #100	; 0x64
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e2aa      	b.n	8001950 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 80013fa:	f7ff fbf3 	bl	8000be4 <LL_RCC_HSE_IsReady>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0f1      	beq.n	80013e8 <HAL_RCC_OscConfig+0x1a8>
 8001404:	e013      	b.n	800142e <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001406:	f7ff f8f7 	bl	80005f8 <HAL_GetTick>
 800140a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800140e:	f7ff f8f3 	bl	80005f8 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b64      	cmp	r3, #100	; 0x64
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e297      	b.n	8001950 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001420:	f7ff fbe0 	bl	8000be4 <LL_RCC_HSE_IsReady>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1f1      	bne.n	800140e <HAL_RCC_OscConfig+0x1ce>
 800142a:	e000      	b.n	800142e <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800142c:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d051      	beq.n	80014de <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800143a:	f7ff fdb4 	bl	8000fa6 <LL_RCC_GetSysClkSource>
 800143e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001440:	f7ff fe95 	bl	800116e <LL_RCC_PLL_GetMainSource>
 8001444:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	2b04      	cmp	r3, #4
 800144a:	d005      	beq.n	8001458 <HAL_RCC_OscConfig+0x218>
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	2b0c      	cmp	r3, #12
 8001450:	d113      	bne.n	800147a <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	2b02      	cmp	r3, #2
 8001456:	d110      	bne.n	800147a <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001458:	f7ff fbf4 	bl	8000c44 <LL_RCC_HSI_IsReady>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d005      	beq.n	800146e <HAL_RCC_OscConfig+0x22e>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e270      	b.n	8001950 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fbf8 	bl	8000c68 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001478:	e031      	b.n	80014de <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d019      	beq.n	80014b6 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001482:	f7ff fbc1 	bl	8000c08 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001486:	f7ff f8b7 	bl	80005f8 <HAL_GetTick>
 800148a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800148e:	f7ff f8b3 	bl	80005f8 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e257      	b.n	8001950 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 80014a0:	f7ff fbd0 	bl	8000c44 <LL_RCC_HSI_IsReady>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0f1      	beq.n	800148e <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fbda 	bl	8000c68 <LL_RCC_HSI_SetCalibTrimming>
 80014b4:	e013      	b.n	80014de <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014b6:	f7ff fbb6 	bl	8000c26 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ba:	f7ff f89d 	bl	80005f8 <HAL_GetTick>
 80014be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c2:	f7ff f899 	bl	80005f8 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e23d      	b.n	8001950 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80014d4:	f7ff fbb6 	bl	8000c44 <LL_RCC_HSI_IsReady>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1f1      	bne.n	80014c2 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0308 	and.w	r3, r3, #8
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d106      	bne.n	80014f8 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f000 80a3 	beq.w	800163e <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	695b      	ldr	r3, [r3, #20]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d076      	beq.n	80015ee <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0310 	and.w	r3, r3, #16
 8001508:	2b00      	cmp	r3, #0
 800150a:	d046      	beq.n	800159a <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800150c:	f7ff fc6d 	bl	8000dea <LL_RCC_LSI1_IsReady>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d113      	bne.n	800153e <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001516:	f7ff fc46 	bl	8000da6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800151a:	f7ff f86d 	bl	80005f8 <HAL_GetTick>
 800151e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001522:	f7ff f869 	bl	80005f8 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e20d      	b.n	8001950 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001534:	f7ff fc59 	bl	8000dea <LL_RCC_LSI1_IsReady>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f1      	beq.n	8001522 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800153e:	f7ff fc66 	bl	8000e0e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001542:	f7ff f859 	bl	80005f8 <HAL_GetTick>
 8001546:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800154a:	f7ff f855 	bl	80005f8 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b03      	cmp	r3, #3
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e1f9      	b.n	8001950 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800155c:	f7ff fc79 	bl	8000e52 <LL_RCC_LSI2_IsReady>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0f1      	beq.n	800154a <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fc83 	bl	8000e76 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001570:	f7ff fc2a 	bl	8000dc8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001574:	f7ff f840 	bl	80005f8 <HAL_GetTick>
 8001578:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800157c:	f7ff f83c 	bl	80005f8 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e1e0      	b.n	8001950 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800158e:	f7ff fc2c 	bl	8000dea <LL_RCC_LSI1_IsReady>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1f1      	bne.n	800157c <HAL_RCC_OscConfig+0x33c>
 8001598:	e051      	b.n	800163e <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800159a:	f7ff fc04 	bl	8000da6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159e:	f7ff f82b 	bl	80005f8 <HAL_GetTick>
 80015a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80015a6:	f7ff f827 	bl	80005f8 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e1cb      	b.n	8001950 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80015b8:	f7ff fc17 	bl	8000dea <LL_RCC_LSI1_IsReady>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0f1      	beq.n	80015a6 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80015c2:	f7ff fc35 	bl	8000e30 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80015c6:	e00c      	b.n	80015e2 <HAL_RCC_OscConfig+0x3a2>
 80015c8:	20000004 	.word	0x20000004
 80015cc:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80015d0:	f7ff f812 	bl	80005f8 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e1b6      	b.n	8001950 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80015e2:	f7ff fc36 	bl	8000e52 <LL_RCC_LSI2_IsReady>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1f1      	bne.n	80015d0 <HAL_RCC_OscConfig+0x390>
 80015ec:	e027      	b.n	800163e <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80015ee:	f7ff fc1f 	bl	8000e30 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f2:	f7ff f801 	bl	80005f8 <HAL_GetTick>
 80015f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80015fa:	f7fe fffd 	bl	80005f8 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b03      	cmp	r3, #3
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e1a1      	b.n	8001950 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800160c:	f7ff fc21 	bl	8000e52 <LL_RCC_LSI2_IsReady>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f1      	bne.n	80015fa <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001616:	f7ff fbd7 	bl	8000dc8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161a:	f7fe ffed 	bl	80005f8 <HAL_GetTick>
 800161e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001622:	f7fe ffe9 	bl	80005f8 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e18d      	b.n	8001950 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001634:	f7ff fbd9 	bl	8000dea <LL_RCC_LSI1_IsReady>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f1      	bne.n	8001622 <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	2b00      	cmp	r3, #0
 8001648:	d05b      	beq.n	8001702 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800164a:	4bb5      	ldr	r3, [pc, #724]	; (8001920 <HAL_RCC_OscConfig+0x6e0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001652:	2b00      	cmp	r3, #0
 8001654:	d114      	bne.n	8001680 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001656:	f7ff fa77 	bl	8000b48 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800165a:	f7fe ffcd 	bl	80005f8 <HAL_GetTick>
 800165e:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001662:	f7fe ffc9 	bl	80005f8 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e16d      	b.n	8001950 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001674:	4baa      	ldr	r3, [pc, #680]	; (8001920 <HAL_RCC_OscConfig+0x6e0>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0f0      	beq.n	8001662 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d102      	bne.n	800168e <HAL_RCC_OscConfig+0x44e>
 8001688:	f7ff fb37 	bl	8000cfa <LL_RCC_LSE_Enable>
 800168c:	e00c      	b.n	80016a8 <HAL_RCC_OscConfig+0x468>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2b05      	cmp	r3, #5
 8001694:	d104      	bne.n	80016a0 <HAL_RCC_OscConfig+0x460>
 8001696:	f7ff fb52 	bl	8000d3e <LL_RCC_LSE_EnableBypass>
 800169a:	f7ff fb2e 	bl	8000cfa <LL_RCC_LSE_Enable>
 800169e:	e003      	b.n	80016a8 <HAL_RCC_OscConfig+0x468>
 80016a0:	f7ff fb3c 	bl	8000d1c <LL_RCC_LSE_Disable>
 80016a4:	f7ff fb5c 	bl	8000d60 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d014      	beq.n	80016da <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b0:	f7fe ffa2 	bl	80005f8 <HAL_GetTick>
 80016b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80016b6:	e00a      	b.n	80016ce <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b8:	f7fe ff9e 	bl	80005f8 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e140      	b.n	8001950 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 80016ce:	f7ff fb58 	bl	8000d82 <LL_RCC_LSE_IsReady>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0ef      	beq.n	80016b8 <HAL_RCC_OscConfig+0x478>
 80016d8:	e013      	b.n	8001702 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016da:	f7fe ff8d 	bl	80005f8 <HAL_GetTick>
 80016de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80016e0:	e00a      	b.n	80016f8 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e2:	f7fe ff89 	bl	80005f8 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e12b      	b.n	8001950 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 80016f8:	f7ff fb43 	bl	8000d82 <LL_RCC_LSE_IsReady>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1ef      	bne.n	80016e2 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800170a:	2b00      	cmp	r3, #0
 800170c:	d02c      	beq.n	8001768 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001712:	2b00      	cmp	r3, #0
 8001714:	d014      	beq.n	8001740 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001716:	f7ff fabc 	bl	8000c92 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171a:	f7fe ff6d 	bl	80005f8 <HAL_GetTick>
 800171e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001722:	f7fe ff69 	bl	80005f8 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e10d      	b.n	8001950 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001734:	f7ff facf 	bl	8000cd6 <LL_RCC_HSI48_IsReady>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0f1      	beq.n	8001722 <HAL_RCC_OscConfig+0x4e2>
 800173e:	e013      	b.n	8001768 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001740:	f7ff fab8 	bl	8000cb4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001744:	f7fe ff58 	bl	80005f8 <HAL_GetTick>
 8001748:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800174c:	f7fe ff54 	bl	80005f8 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e0f8      	b.n	8001950 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800175e:	f7ff faba 	bl	8000cd6 <LL_RCC_HSI48_IsReady>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1f1      	bne.n	800174c <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176c:	2b00      	cmp	r3, #0
 800176e:	f000 80ee 	beq.w	800194e <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001772:	f7ff fc18 	bl	8000fa6 <LL_RCC_GetSysClkSource>
 8001776:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8001778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001784:	2b02      	cmp	r3, #2
 8001786:	f040 80af 	bne.w	80018e8 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f003 0203 	and.w	r2, r3, #3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001794:	429a      	cmp	r2, r3
 8001796:	d123      	bne.n	80017e0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d11c      	bne.n	80017e0 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	0a1b      	lsrs	r3, r3, #8
 80017aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d114      	bne.n	80017e0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d10d      	bne.n	80017e0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d106      	bne.n	80017e0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80017dc:	429a      	cmp	r2, r3
 80017de:	d05d      	beq.n	800189c <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	2b0c      	cmp	r3, #12
 80017e4:	d058      	beq.n	8001898 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e0ab      	b.n	8001950 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017f8:	f7ff fc73 	bl	80010e2 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017fc:	f7fe fefc 	bl	80005f8 <HAL_GetTick>
 8001800:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001804:	f7fe fef8 	bl	80005f8 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e09c      	b.n	8001950 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1ef      	bne.n	8001804 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001824:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001828:	68da      	ldr	r2, [r3, #12]
 800182a:	4b3e      	ldr	r3, [pc, #248]	; (8001924 <HAL_RCC_OscConfig+0x6e4>)
 800182c:	4013      	ands	r3, r2
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001836:	4311      	orrs	r1, r2
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800183c:	0212      	lsls	r2, r2, #8
 800183e:	4311      	orrs	r1, r2
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001844:	4311      	orrs	r1, r2
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800184a:	4311      	orrs	r1, r2
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001850:	430a      	orrs	r2, r1
 8001852:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001856:	4313      	orrs	r3, r2
 8001858:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800185a:	f7ff fc33 	bl	80010c4 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800185e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800186c:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800186e:	f7fe fec3 	bl	80005f8 <HAL_GetTick>
 8001872:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001876:	f7fe febf 	bl	80005f8 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e063      	b.n	8001950 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0ef      	beq.n	8001876 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001896:	e05a      	b.n	800194e <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e059      	b.n	8001950 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800189c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d151      	bne.n	800194e <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018aa:	f7ff fc0b 	bl	80010c4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018bc:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018be:	f7fe fe9b 	bl	80005f8 <HAL_GetTick>
 80018c2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c6:	f7fe fe97 	bl	80005f8 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e03b      	b.n	8001950 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d0ef      	beq.n	80018c6 <HAL_RCC_OscConfig+0x686>
 80018e6:	e032      	b.n	800194e <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	2b0c      	cmp	r3, #12
 80018ec:	d02d      	beq.n	800194a <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ee:	f7ff fbf8 	bl	80010e2 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80018f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018fc:	f023 0303 	bic.w	r3, r3, #3
 8001900:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8001902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800190c:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001914:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001916:	f7fe fe6f 	bl	80005f8 <HAL_GetTick>
 800191a:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800191c:	e00d      	b.n	800193a <HAL_RCC_OscConfig+0x6fa>
 800191e:	bf00      	nop
 8001920:	58000400 	.word	0x58000400
 8001924:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001928:	f7fe fe66 	bl	80005f8 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e00a      	b.n	8001950 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800193a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1ef      	bne.n	8001928 <HAL_RCC_OscConfig+0x6e8>
 8001948:	e001      	b.n	800194e <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e000      	b.n	8001950 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3734      	adds	r7, #52	; 0x34
 8001954:	46bd      	mov	sp, r7
 8001956:	bd90      	pop	{r4, r7, pc}

08001958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e12d      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800196c:	4b98      	ldr	r3, [pc, #608]	; (8001bd0 <HAL_RCC_ClockConfig+0x278>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d91b      	bls.n	80019b2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197a:	4b95      	ldr	r3, [pc, #596]	; (8001bd0 <HAL_RCC_ClockConfig+0x278>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f023 0207 	bic.w	r2, r3, #7
 8001982:	4993      	ldr	r1, [pc, #588]	; (8001bd0 <HAL_RCC_ClockConfig+0x278>)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	4313      	orrs	r3, r2
 8001988:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800198a:	f7fe fe35 	bl	80005f8 <HAL_GetTick>
 800198e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001992:	f7fe fe31 	bl	80005f8 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e111      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a4:	4b8a      	ldr	r3, [pc, #552]	; (8001bd0 <HAL_RCC_ClockConfig+0x278>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d1ef      	bne.n	8001992 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d016      	beq.n	80019ec <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fafb 	bl	8000fbe <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80019c8:	f7fe fe16 	bl	80005f8 <HAL_GetTick>
 80019cc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80019d0:	f7fe fe12 	bl	80005f8 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e0f2      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80019e2:	f7ff fbd0 	bl	8001186 <LL_RCC_IsActiveFlag_HPRE>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0f1      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0320 	and.w	r3, r3, #32
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d016      	beq.n	8001a26 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff faf2 	bl	8000fe6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a02:	f7fe fdf9 	bl	80005f8 <HAL_GetTick>
 8001a06:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a0a:	f7fe fdf5 	bl	80005f8 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e0d5      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001a1c:	f7ff fbc5 	bl	80011aa <LL_RCC_IsActiveFlag_C2HPRE>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0f1      	beq.n	8001a0a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d016      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff faeb 	bl	8001012 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a3c:	f7fe fddc 	bl	80005f8 <HAL_GetTick>
 8001a40:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a44:	f7fe fdd8 	bl	80005f8 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e0b8      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001a56:	f7ff fbbb 	bl	80011d0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0f1      	beq.n	8001a44 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d016      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fae5 	bl	8001040 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a76:	f7fe fdbf 	bl	80005f8 <HAL_GetTick>
 8001a7a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a7e:	f7fe fdbb 	bl	80005f8 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e09b      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001a90:	f7ff fbb1 	bl	80011f6 <LL_RCC_IsActiveFlag_PPRE1>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f1      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d017      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fadb 	bl	8001068 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001ab2:	f7fe fda1 	bl	80005f8 <HAL_GetTick>
 8001ab6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001aba:	f7fe fd9d 	bl	80005f8 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e07d      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001acc:	f7ff fba5 	bl	800121a <LL_RCC_IsActiveFlag_PPRE2>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0f1      	beq.n	8001aba <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d043      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d106      	bne.n	8001af8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001aea:	f7ff f87b 	bl	8000be4 <LL_RCC_HSE_IsReady>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d11e      	bne.n	8001b32 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e067      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b03      	cmp	r3, #3
 8001afe:	d106      	bne.n	8001b0e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001b00:	f7ff fafe 	bl	8001100 <LL_RCC_PLL_IsReady>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d113      	bne.n	8001b32 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e05c      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d106      	bne.n	8001b24 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001b16:	f7ff f9e3 	bl	8000ee0 <LL_RCC_MSI_IsReady>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d108      	bne.n	8001b32 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e051      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001b24:	f7ff f88e 	bl	8000c44 <LL_RCC_HSI_IsReady>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e04a      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff fa21 	bl	8000f7e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b3c:	f7fe fd5c 	bl	80005f8 <HAL_GetTick>
 8001b40:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b42:	e00a      	b.n	8001b5a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b44:	f7fe fd58 	bl	80005f8 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e036      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5a:	f7ff fa24 	bl	8000fa6 <LL_RCC_GetSysClkSource>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d1ec      	bne.n	8001b44 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b6a:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <HAL_RCC_ClockConfig+0x278>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d21b      	bcs.n	8001bb0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b78:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <HAL_RCC_ClockConfig+0x278>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f023 0207 	bic.w	r2, r3, #7
 8001b80:	4913      	ldr	r1, [pc, #76]	; (8001bd0 <HAL_RCC_ClockConfig+0x278>)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b88:	f7fe fd36 	bl	80005f8 <HAL_GetTick>
 8001b8c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001b90:	f7fe fd32 	bl	80005f8 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e012      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba2:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_RCC_ClockConfig+0x278>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d1ef      	bne.n	8001b90 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001bb0:	f000 f880 	bl	8001cb4 <HAL_RCC_GetHCLKFreq>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	4a07      	ldr	r2, [pc, #28]	; (8001bd4 <HAL_RCC_ClockConfig+0x27c>)
 8001bb8:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8001bba:	f7fe fd29 	bl	8000610 <HAL_GetTickPrio>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe fccb 	bl	800055c <HAL_InitTick>
 8001bc6:	4603      	mov	r3, r0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	58004000 	.word	0x58004000
 8001bd4:	20000004 	.word	0x20000004

08001bd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd8:	b590      	push	{r4, r7, lr}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bde:	f7ff f9e2 	bl	8000fa6 <LL_RCC_GetSysClkSource>
 8001be2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10a      	bne.n	8001c00 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001bea:	f7ff f99e 	bl	8000f2a <LL_RCC_MSI_GetRange>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	091b      	lsrs	r3, r3, #4
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	4a2b      	ldr	r2, [pc, #172]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	e04b      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d102      	bne.n	8001c0c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c06:	4b28      	ldr	r3, [pc, #160]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	e045      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d10a      	bne.n	8001c28 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001c12:	f7fe ffb7 	bl	8000b84 <LL_RCC_HSE_IsEnabledDiv2>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d102      	bne.n	8001c22 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001c1c:	4b23      	ldr	r3, [pc, #140]	; (8001cac <HAL_RCC_GetSysClockFreq+0xd4>)
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	e03a      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001c22:	4b23      	ldr	r3, [pc, #140]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	e037      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001c28:	f7ff faa1 	bl	800116e <LL_RCC_PLL_GetMainSource>
 8001c2c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d003      	beq.n	8001c3c <HAL_RCC_GetSysClockFreq+0x64>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	2b03      	cmp	r3, #3
 8001c38:	d003      	beq.n	8001c42 <HAL_RCC_GetSysClockFreq+0x6a>
 8001c3a:	e00d      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001c3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001c3e:	60bb      	str	r3, [r7, #8]
        break;
 8001c40:	e015      	b.n	8001c6e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001c42:	f7fe ff9f 	bl	8000b84 <LL_RCC_HSE_IsEnabledDiv2>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d102      	bne.n	8001c52 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001c4c:	4b17      	ldr	r3, [pc, #92]	; (8001cac <HAL_RCC_GetSysClockFreq+0xd4>)
 8001c4e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001c50:	e00d      	b.n	8001c6e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8001c52:	4b17      	ldr	r3, [pc, #92]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001c54:	60bb      	str	r3, [r7, #8]
        break;
 8001c56:	e00a      	b.n	8001c6e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001c58:	f7ff f967 	bl	8000f2a <LL_RCC_MSI_GetRange>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	091b      	lsrs	r3, r3, #4
 8001c60:	f003 030f 	and.w	r3, r3, #15
 8001c64:	4a0f      	ldr	r2, [pc, #60]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c6a:	60bb      	str	r3, [r7, #8]
        break;
 8001c6c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8001c6e:	f7ff fa59 	bl	8001124 <LL_RCC_PLL_GetN>
 8001c72:	4602      	mov	r2, r0
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	fb03 f402 	mul.w	r4, r3, r2
 8001c7a:	f7ff fa6c 	bl	8001156 <LL_RCC_PLL_GetDivider>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	091b      	lsrs	r3, r3, #4
 8001c82:	3301      	adds	r3, #1
 8001c84:	fbb4 f4f3 	udiv	r4, r4, r3
 8001c88:	f7ff fa59 	bl	800113e <LL_RCC_PLL_GetR>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	0f5b      	lsrs	r3, r3, #29
 8001c90:	3301      	adds	r3, #1
 8001c92:	fbb4 f3f3 	udiv	r3, r4, r3
 8001c96:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8001c98:	68fb      	ldr	r3, [r7, #12]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd90      	pop	{r4, r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	08002770 	.word	0x08002770
 8001ca8:	00f42400 	.word	0x00f42400
 8001cac:	003d0900 	.word	0x003d0900
 8001cb0:	007a1200 	.word	0x007a1200

08001cb4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cb4:	b598      	push	{r3, r4, r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001cb8:	f7ff ff8e 	bl	8001bd8 <HAL_RCC_GetSysClockFreq>
 8001cbc:	4604      	mov	r4, r0
 8001cbe:	f7ff f9e7 	bl	8001090 <LL_RCC_GetAHBPrescaler>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	4a03      	ldr	r2, [pc, #12]	; (8001cd8 <HAL_RCC_GetHCLKFreq+0x24>)
 8001ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	bd98      	pop	{r3, r4, r7, pc}
 8001cd8:	08002730 	.word	0x08002730

08001cdc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001cdc:	b590      	push	{r4, r7, lr}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2bb0      	cmp	r3, #176	; 0xb0
 8001ce8:	d903      	bls.n	8001cf2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8001cea:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8001cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	e007      	b.n	8001d02 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	091b      	lsrs	r3, r3, #4
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	4a11      	ldr	r2, [pc, #68]	; (8001d40 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8001cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d00:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8001d02:	f7ff f9d1 	bl	80010a8 <LL_RCC_GetAHB4Prescaler>
 8001d06:	4603      	mov	r3, r0
 8001d08:	091b      	lsrs	r3, r3, #4
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	4a0d      	ldr	r2, [pc, #52]	; (8001d44 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8001d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	4a0a      	ldr	r2, [pc, #40]	; (8001d48 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8001d20:	fba2 2303 	umull	r2, r3, r2, r3
 8001d24:	0c9c      	lsrs	r4, r3, #18
 8001d26:	f7fe ff1f 	bl	8000b68 <HAL_PWREx_GetVoltageRange>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4620      	mov	r0, r4
 8001d30:	f000 f80c 	bl	8001d4c <RCC_SetFlashLatency>
 8001d34:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd90      	pop	{r4, r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	08002770 	.word	0x08002770
 8001d44:	08002730 	.word	0x08002730
 8001d48:	431bde83 	.word	0x431bde83

08001d4c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001d4c:	b590      	push	{r4, r7, lr}
 8001d4e:	b093      	sub	sp, #76	; 0x4c
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8001d56:	4b39      	ldr	r3, [pc, #228]	; (8001e3c <RCC_SetFlashLatency+0xf0>)
 8001d58:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001d5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8001d62:	4a37      	ldr	r2, [pc, #220]	; (8001e40 <RCC_SetFlashLatency+0xf4>)
 8001d64:	f107 031c 	add.w	r3, r7, #28
 8001d68:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001d6e:	4b35      	ldr	r3, [pc, #212]	; (8001e44 <RCC_SetFlashLatency+0xf8>)
 8001d70:	f107 040c 	add.w	r4, r7, #12
 8001d74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d84:	d11c      	bne.n	8001dc0 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001d86:	2300      	movs	r3, #0
 8001d88:	643b      	str	r3, [r7, #64]	; 0x40
 8001d8a:	e015      	b.n	8001db8 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001d8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001d94:	4413      	add	r3, r2
 8001d96:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d808      	bhi.n	8001db2 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001da8:	4413      	add	r3, r2
 8001daa:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001dae:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8001db0:	e022      	b.n	8001df8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001db4:	3301      	adds	r3, #1
 8001db6:	643b      	str	r3, [r7, #64]	; 0x40
 8001db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dba:	2b03      	cmp	r3, #3
 8001dbc:	d9e6      	bls.n	8001d8c <RCC_SetFlashLatency+0x40>
 8001dbe:	e01b      	b.n	8001df8 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dc4:	e015      	b.n	8001df2 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001dce:	4413      	add	r3, r2
 8001dd0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d808      	bhi.n	8001dec <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001de2:	4413      	add	r3, r2
 8001de4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001de8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8001dea:	e005      	b.n	8001df8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dee:	3301      	adds	r3, #1
 8001df0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d9e6      	bls.n	8001dc6 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8001df8:	4b13      	ldr	r3, [pc, #76]	; (8001e48 <RCC_SetFlashLatency+0xfc>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f023 0207 	bic.w	r2, r3, #7
 8001e00:	4911      	ldr	r1, [pc, #68]	; (8001e48 <RCC_SetFlashLatency+0xfc>)
 8001e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e04:	4313      	orrs	r3, r2
 8001e06:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001e08:	f7fe fbf6 	bl	80005f8 <HAL_GetTick>
 8001e0c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001e0e:	e008      	b.n	8001e22 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001e10:	f7fe fbf2 	bl	80005f8 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e007      	b.n	8001e32 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001e22:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <RCC_SetFlashLatency+0xfc>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d1ef      	bne.n	8001e10 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	374c      	adds	r7, #76	; 0x4c
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd90      	pop	{r4, r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	08002704 	.word	0x08002704
 8001e40:	08002714 	.word	0x08002714
 8001e44:	08002720 	.word	0x08002720
 8001e48:	58004000 	.word	0x58004000

08001e4c <LL_RCC_LSE_IsEnabled>:
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8001e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d101      	bne.n	8001e64 <LL_RCC_LSE_IsEnabled+0x18>
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <LL_RCC_LSE_IsEnabled+0x1a>
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <LL_RCC_LSE_IsReady>:
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d101      	bne.n	8001e88 <LL_RCC_LSE_IsReady+0x18>
 8001e84:	2301      	movs	r3, #1
 8001e86:	e000      	b.n	8001e8a <LL_RCC_LSE_IsReady+0x1a>
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <LL_RCC_SetRFWKPClockSource>:
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8001e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ea4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ea8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <LL_RCC_SetSMPSClockSource>:
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8001ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	f023 0203 	bic.w	r2, r3, #3
 8001ed2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <LL_RCC_SetSMPSPrescaler>:
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8001ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001efa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <LL_RCC_SetUSARTClockSource>:
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8001f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f20:	f023 0203 	bic.w	r2, r3, #3
 8001f24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <LL_RCC_SetLPUARTClockSource>:
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8001f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f4c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <LL_RCC_SetI2CClockSource>:
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8001f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f74:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	091b      	lsrs	r3, r3, #4
 8001f7c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8001f80:	43db      	mvns	r3, r3
 8001f82:	401a      	ands	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	011b      	lsls	r3, r3, #4
 8001f88:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8001f8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f90:	4313      	orrs	r3, r2
 8001f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <LL_RCC_SetLPTIMClockSource>:
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8001faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	0c1b      	lsrs	r3, r3, #16
 8001fb6:	041b      	lsls	r3, r3, #16
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	401a      	ands	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	041b      	lsls	r3, r3, #16
 8001fc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <LL_RCC_SetSAIClockSource>:
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8001fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <LL_RCC_SetRNGClockSource>:
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800200a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800200e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002012:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002016:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4313      	orrs	r3, r2
 800201e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <LL_RCC_SetCLK48ClockSource>:
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800203a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800203e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002042:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4313      	orrs	r3, r2
 800204a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <LL_RCC_SetUSBClockSource>:
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff ffe3 	bl	800202e <LL_RCC_SetCLK48ClockSource>
}
 8002068:	bf00      	nop
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <LL_RCC_SetADCClockSource>:
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800207c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002080:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002084:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4313      	orrs	r3, r2
 800208c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <LL_RCC_SetRTCClockSource>:
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80020a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <LL_RCC_GetRTCClockSource>:
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80020cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80020d8:	4618      	mov	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <LL_RCC_ForceBackupDomainReset>:
{
 80020e2:	b480      	push	{r7}
 80020e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80020e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80020fa:	bf00      	nop
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800210c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002110:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002118:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <LL_RCC_PLLSAI1_Enable>:
{
 8002126:	b480      	push	{r7}
 8002128:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800212a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002134:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002138:	6013      	str	r3, [r2, #0]
}
 800213a:	bf00      	nop
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <LL_RCC_PLLSAI1_Disable>:
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002152:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002156:	6013      	str	r3, [r2, #0]
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <LL_RCC_PLLSAI1_IsReady>:
{
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002170:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002174:	d101      	bne.n	800217a <LL_RCC_PLLSAI1_IsReady+0x18>
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b088      	sub	sp, #32
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800218e:	2300      	movs	r3, #0
 8002190:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002192:	2300      	movs	r3, #0
 8002194:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d034      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021aa:	d021      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80021ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021b0:	d81b      	bhi.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x64>
 80021b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021b6:	d01d      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80021b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021bc:	d815      	bhi.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x64>
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00b      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x54>
 80021c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021c6:	d110      	bne.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80021c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80021d8:	e00d      	b.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3304      	adds	r3, #4
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 f947 	bl	8002472 <RCCEx_PLLSAI1_ConfigNP>
 80021e4:	4603      	mov	r3, r0
 80021e6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80021e8:	e005      	b.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	77fb      	strb	r3, [r7, #31]
        break;
 80021ee:	e002      	b.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80021f0:	bf00      	nop
 80021f2:	e000      	b.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80021f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80021f6:	7ffb      	ldrb	r3, [r7, #31]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d105      	bne.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff fee8 	bl	8001fd6 <LL_RCC_SetSAIClockSource>
 8002206:	e001      	b.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002208:	7ffb      	ldrb	r3, [r7, #31]
 800220a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002214:	2b00      	cmp	r3, #0
 8002216:	d046      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002218:	f7ff ff56 	bl	80020c8 <LL_RCC_GetRTCClockSource>
 800221c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	429a      	cmp	r2, r3
 8002226:	d03c      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002228:	f7fe fc8e 	bl	8000b48 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d105      	bne.n	800223e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff ff30 	bl	800209c <LL_RCC_SetRTCClockSource>
 800223c:	e02e      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800223e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002246:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002248:	f7ff ff4b 	bl	80020e2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800224c:	f7ff ff5a 	bl	8002104 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	4313      	orrs	r3, r2
 800225c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800225e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002268:	f7ff fdf0 	bl	8001e4c <LL_RCC_LSE_IsEnabled>
 800226c:	4603      	mov	r3, r0
 800226e:	2b01      	cmp	r3, #1
 8002270:	d114      	bne.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002272:	f7fe f9c1 	bl	80005f8 <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002278:	e00b      	b.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800227a:	f7fe f9bd 	bl	80005f8 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	f241 3288 	movw	r2, #5000	; 0x1388
 8002288:	4293      	cmp	r3, r2
 800228a:	d902      	bls.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	77fb      	strb	r3, [r7, #31]
              break;
 8002290:	e004      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002292:	f7ff fded 	bl	8001e70 <LL_RCC_LSE_IsReady>
 8002296:	4603      	mov	r3, r0
 8002298:	2b01      	cmp	r3, #1
 800229a:	d1ee      	bne.n	800227a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800229c:	7ffb      	ldrb	r3, [r7, #31]
 800229e:	77bb      	strb	r3, [r7, #30]
 80022a0:	e001      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022a2:	7ffb      	ldrb	r3, [r7, #31]
 80022a4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d004      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff fe2a 	bl	8001f10 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d004      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69db      	ldr	r3, [r3, #28]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff fe35 	bl	8001f3c <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0310 	and.w	r3, r3, #16
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d004      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fe5d 	bl	8001fa2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0320 	and.w	r3, r3, #32
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d004      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fe52 	bl	8001fa2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	2b00      	cmp	r3, #0
 8002308:	d004      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff fe2a 	bl	8001f68 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0308 	and.w	r3, r3, #8
 800231c:	2b00      	cmp	r3, #0
 800231e:	d004      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff fe1f 	bl	8001f68 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002332:	2b00      	cmp	r3, #0
 8002334:	d022      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff fe8d 	bl	800205a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002344:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002348:	d107      	bne.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800234a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002354:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002358:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800235e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002362:	d10b      	bne.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3304      	adds	r3, #4
 8002368:	4618      	mov	r0, r3
 800236a:	f000 f8dd 	bl	8002528 <RCCEx_PLLSAI1_ConfigNQ>
 800236e:	4603      	mov	r3, r0
 8002370:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8002372:	7ffb      	ldrb	r3, [r7, #31]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8002378:	7ffb      	ldrb	r3, [r7, #31]
 800237a:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002384:	2b00      	cmp	r3, #0
 8002386:	d02b      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002390:	d008      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002396:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800239a:	d003      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d105      	bne.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff fe2a 	bl	8002002 <LL_RCC_SetRNGClockSource>
 80023ae:	e00a      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	2000      	movs	r0, #0
 80023bc:	f7ff fe21 	bl	8002002 <LL_RCC_SetRNGClockSource>
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f7ff fe34 	bl	800202e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ca:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80023ce:	d107      	bne.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80023d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d022      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff fe3d 	bl	8002070 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023fe:	d107      	bne.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800240a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002414:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002418:	d10b      	bne.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3304      	adds	r3, #4
 800241e:	4618      	mov	r0, r3
 8002420:	f000 f8dd 	bl	80025de <RCCEx_PLLSAI1_ConfigNR>
 8002424:	4603      	mov	r3, r0
 8002426:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8002428:	7ffb      	ldrb	r3, [r7, #31]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 800242e:	7ffb      	ldrb	r3, [r7, #31]
 8002430:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d004      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff fd26 	bl	8001e94 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d009      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff fd45 	bl	8001ee8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff fd2c 	bl	8001ec0 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8002468:	7fbb      	ldrb	r3, [r7, #30]
}
 800246a:	4618      	mov	r0, r3
 800246c:	3720      	adds	r7, #32
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b084      	sub	sp, #16
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800247e:	f7ff fe61 	bl	8002144 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002482:	f7fe f8b9 	bl	80005f8 <HAL_GetTick>
 8002486:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002488:	e009      	b.n	800249e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800248a:	f7fe f8b5 	bl	80005f8 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d902      	bls.n	800249e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	73fb      	strb	r3, [r7, #15]
      break;
 800249c:	e004      	b.n	80024a8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800249e:	f7ff fe60 	bl	8002162 <LL_RCC_PLLSAI1_IsReady>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1f0      	bne.n	800248a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d137      	bne.n	800251e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80024ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	021b      	lsls	r3, r3, #8
 80024be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024c2:	4313      	orrs	r3, r2
 80024c4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80024c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024d8:	4313      	orrs	r3, r2
 80024da:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80024dc:	f7ff fe23 	bl	8002126 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024e0:	f7fe f88a 	bl	80005f8 <HAL_GetTick>
 80024e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80024e6:	e009      	b.n	80024fc <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024e8:	f7fe f886 	bl	80005f8 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d902      	bls.n	80024fc <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	73fb      	strb	r3, [r7, #15]
        break;
 80024fa:	e004      	b.n	8002506 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80024fc:	f7ff fe31 	bl	8002162 <LL_RCC_PLLSAI1_IsReady>
 8002500:	4603      	mov	r3, r0
 8002502:	2b01      	cmp	r3, #1
 8002504:	d1f0      	bne.n	80024e8 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8002506:	7bfb      	ldrb	r3, [r7, #15]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d108      	bne.n	800251e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800250c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002510:	691a      	ldr	r2, [r3, #16]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800251a:	4313      	orrs	r3, r2
 800251c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800251e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002530:	2300      	movs	r3, #0
 8002532:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002534:	f7ff fe06 	bl	8002144 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002538:	f7fe f85e 	bl	80005f8 <HAL_GetTick>
 800253c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800253e:	e009      	b.n	8002554 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002540:	f7fe f85a 	bl	80005f8 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d902      	bls.n	8002554 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	73fb      	strb	r3, [r7, #15]
      break;
 8002552:	e004      	b.n	800255e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002554:	f7ff fe05 	bl	8002162 <LL_RCC_PLLSAI1_IsReady>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800255e:	7bfb      	ldrb	r3, [r7, #15]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d137      	bne.n	80025d4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	021b      	lsls	r3, r3, #8
 8002574:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002578:	4313      	orrs	r3, r2
 800257a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800257c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800258e:	4313      	orrs	r3, r2
 8002590:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002592:	f7ff fdc8 	bl	8002126 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002596:	f7fe f82f 	bl	80005f8 <HAL_GetTick>
 800259a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800259c:	e009      	b.n	80025b2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800259e:	f7fe f82b 	bl	80005f8 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d902      	bls.n	80025b2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	73fb      	strb	r3, [r7, #15]
        break;
 80025b0:	e004      	b.n	80025bc <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80025b2:	f7ff fdd6 	bl	8002162 <LL_RCC_PLLSAI1_IsReady>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d1f0      	bne.n	800259e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d108      	bne.n	80025d4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80025c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025d0:	4313      	orrs	r3, r2
 80025d2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b084      	sub	sp, #16
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025e6:	2300      	movs	r3, #0
 80025e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80025ea:	f7ff fdab 	bl	8002144 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80025ee:	f7fe f803 	bl	80005f8 <HAL_GetTick>
 80025f2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80025f4:	e009      	b.n	800260a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025f6:	f7fd ffff 	bl	80005f8 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d902      	bls.n	800260a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	73fb      	strb	r3, [r7, #15]
      break;
 8002608:	e004      	b.n	8002614 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800260a:	f7ff fdaa 	bl	8002162 <LL_RCC_PLLSAI1_IsReady>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1f0      	bne.n	80025f6 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d137      	bne.n	800268a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800261a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	021b      	lsls	r3, r3, #8
 800262a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800262e:	4313      	orrs	r3, r2
 8002630:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8002632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002644:	4313      	orrs	r3, r2
 8002646:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002648:	f7ff fd6d 	bl	8002126 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800264c:	f7fd ffd4 	bl	80005f8 <HAL_GetTick>
 8002650:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002652:	e009      	b.n	8002668 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002654:	f7fd ffd0 	bl	80005f8 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d902      	bls.n	8002668 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	73fb      	strb	r3, [r7, #15]
        break;
 8002666:	e004      	b.n	8002672 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002668:	f7ff fd7b 	bl	8002162 <LL_RCC_PLLSAI1_IsReady>
 800266c:	4603      	mov	r3, r0
 800266e:	2b01      	cmp	r3, #1
 8002670:	d1f0      	bne.n	8002654 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8002672:	7bfb      	ldrb	r3, [r7, #15]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d108      	bne.n	800268a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800267c:	691a      	ldr	r2, [r3, #16]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002686:	4313      	orrs	r3, r2
 8002688:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800268a:	7bfb      	ldrb	r3, [r7, #15]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <__libc_init_array>:
 8002694:	b570      	push	{r4, r5, r6, lr}
 8002696:	4d0d      	ldr	r5, [pc, #52]	; (80026cc <__libc_init_array+0x38>)
 8002698:	4c0d      	ldr	r4, [pc, #52]	; (80026d0 <__libc_init_array+0x3c>)
 800269a:	1b64      	subs	r4, r4, r5
 800269c:	10a4      	asrs	r4, r4, #2
 800269e:	2600      	movs	r6, #0
 80026a0:	42a6      	cmp	r6, r4
 80026a2:	d109      	bne.n	80026b8 <__libc_init_array+0x24>
 80026a4:	4d0b      	ldr	r5, [pc, #44]	; (80026d4 <__libc_init_array+0x40>)
 80026a6:	4c0c      	ldr	r4, [pc, #48]	; (80026d8 <__libc_init_array+0x44>)
 80026a8:	f000 f820 	bl	80026ec <_init>
 80026ac:	1b64      	subs	r4, r4, r5
 80026ae:	10a4      	asrs	r4, r4, #2
 80026b0:	2600      	movs	r6, #0
 80026b2:	42a6      	cmp	r6, r4
 80026b4:	d105      	bne.n	80026c2 <__libc_init_array+0x2e>
 80026b6:	bd70      	pop	{r4, r5, r6, pc}
 80026b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80026bc:	4798      	blx	r3
 80026be:	3601      	adds	r6, #1
 80026c0:	e7ee      	b.n	80026a0 <__libc_init_array+0xc>
 80026c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80026c6:	4798      	blx	r3
 80026c8:	3601      	adds	r6, #1
 80026ca:	e7f2      	b.n	80026b2 <__libc_init_array+0x1e>
 80026cc:	080027b0 	.word	0x080027b0
 80026d0:	080027b0 	.word	0x080027b0
 80026d4:	080027b0 	.word	0x080027b0
 80026d8:	080027b4 	.word	0x080027b4

080026dc <memset>:
 80026dc:	4402      	add	r2, r0
 80026de:	4603      	mov	r3, r0
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d100      	bne.n	80026e6 <memset+0xa>
 80026e4:	4770      	bx	lr
 80026e6:	f803 1b01 	strb.w	r1, [r3], #1
 80026ea:	e7f9      	b.n	80026e0 <memset+0x4>

080026ec <_init>:
 80026ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ee:	bf00      	nop
 80026f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026f2:	bc08      	pop	{r3}
 80026f4:	469e      	mov	lr, r3
 80026f6:	4770      	bx	lr

080026f8 <_fini>:
 80026f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026fa:	bf00      	nop
 80026fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026fe:	bc08      	pop	{r3}
 8002700:	469e      	mov	lr, r3
 8002702:	4770      	bx	lr
