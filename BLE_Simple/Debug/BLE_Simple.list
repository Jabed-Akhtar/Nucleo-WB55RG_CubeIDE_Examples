
BLE_Simple.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2c8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000804  0800b408  0800b408  0001b408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bc0c  0800bc0c  0001bc0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bc14  0800bc14  0001bc14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bc18  0800bc18  0001bc18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000004  0800bc1c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000088  0800bca0  00020088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000003c  20000124  0800bd39  00020124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000160  0800bd75  00020160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 00000084  20000174  0800bd86  00020174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001344  200001f8  0800be0a  000201f8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000153c  0800be0a  0002153c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       000001b7  20030028  20030028  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 17 .debug_info   0004235e  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00007564  00000000  00000000  00062586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002890  00000000  00000000  00069af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 000025e0  00000000  00000000  0006c380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002db09  00000000  00000000  0006e960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0002d761  00000000  00000000  0009c469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000f8660  00000000  00000000  000c9bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000053  00000000  00000000  001c222a  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000afb4  00000000  00000000  001c2280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001f8 	.word	0x200001f8
 800015c:	00000000 	.word	0x00000000
 8000160:	0800b3f0 	.word	0x0800b3f0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001fc 	.word	0x200001fc
 800017c:	0800b3f0 	.word	0x0800b3f0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b96e 	b.w	8000524 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468c      	mov	ip, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	f040 8083 	bne.w	8000376 <__udivmoddi4+0x116>
 8000270:	428a      	cmp	r2, r1
 8000272:	4617      	mov	r7, r2
 8000274:	d947      	bls.n	8000306 <__udivmoddi4+0xa6>
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	b142      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027c:	f1c2 0020 	rsb	r0, r2, #32
 8000280:	fa24 f000 	lsr.w	r0, r4, r0
 8000284:	4091      	lsls	r1, r2
 8000286:	4097      	lsls	r7, r2
 8000288:	ea40 0c01 	orr.w	ip, r0, r1
 800028c:	4094      	lsls	r4, r2
 800028e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000292:	0c23      	lsrs	r3, r4, #16
 8000294:	fbbc f6f8 	udiv	r6, ip, r8
 8000298:	fa1f fe87 	uxth.w	lr, r7
 800029c:	fb08 c116 	mls	r1, r8, r6, ip
 80002a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a4:	fb06 f10e 	mul.w	r1, r6, lr
 80002a8:	4299      	cmp	r1, r3
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x60>
 80002ac:	18fb      	adds	r3, r7, r3
 80002ae:	f106 30ff 	add.w	r0, r6, #4294967295
 80002b2:	f080 8119 	bcs.w	80004e8 <__udivmoddi4+0x288>
 80002b6:	4299      	cmp	r1, r3
 80002b8:	f240 8116 	bls.w	80004e8 <__udivmoddi4+0x288>
 80002bc:	3e02      	subs	r6, #2
 80002be:	443b      	add	r3, r7
 80002c0:	1a5b      	subs	r3, r3, r1
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002c8:	fb08 3310 	mls	r3, r8, r0, r3
 80002cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d4:	45a6      	cmp	lr, r4
 80002d6:	d909      	bls.n	80002ec <__udivmoddi4+0x8c>
 80002d8:	193c      	adds	r4, r7, r4
 80002da:	f100 33ff 	add.w	r3, r0, #4294967295
 80002de:	f080 8105 	bcs.w	80004ec <__udivmoddi4+0x28c>
 80002e2:	45a6      	cmp	lr, r4
 80002e4:	f240 8102 	bls.w	80004ec <__udivmoddi4+0x28c>
 80002e8:	3802      	subs	r0, #2
 80002ea:	443c      	add	r4, r7
 80002ec:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f0:	eba4 040e 	sub.w	r4, r4, lr
 80002f4:	2600      	movs	r6, #0
 80002f6:	b11d      	cbz	r5, 8000300 <__udivmoddi4+0xa0>
 80002f8:	40d4      	lsrs	r4, r2
 80002fa:	2300      	movs	r3, #0
 80002fc:	e9c5 4300 	strd	r4, r3, [r5]
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	b902      	cbnz	r2, 800030a <__udivmoddi4+0xaa>
 8000308:	deff      	udf	#255	; 0xff
 800030a:	fab2 f282 	clz	r2, r2
 800030e:	2a00      	cmp	r2, #0
 8000310:	d150      	bne.n	80003b4 <__udivmoddi4+0x154>
 8000312:	1bcb      	subs	r3, r1, r7
 8000314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000318:	fa1f f887 	uxth.w	r8, r7
 800031c:	2601      	movs	r6, #1
 800031e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000322:	0c21      	lsrs	r1, r4, #16
 8000324:	fb0e 331c 	mls	r3, lr, ip, r3
 8000328:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800032c:	fb08 f30c 	mul.w	r3, r8, ip
 8000330:	428b      	cmp	r3, r1
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0xe4>
 8000334:	1879      	adds	r1, r7, r1
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0xe2>
 800033c:	428b      	cmp	r3, r1
 800033e:	f200 80e9 	bhi.w	8000514 <__udivmoddi4+0x2b4>
 8000342:	4684      	mov	ip, r0
 8000344:	1ac9      	subs	r1, r1, r3
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000350:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x10c>
 800035c:	193c      	adds	r4, r7, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x10a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80d9 	bhi.w	800051c <__udivmoddi4+0x2bc>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e7bf      	b.n	80002f6 <__udivmoddi4+0x96>
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x12e>
 800037a:	2d00      	cmp	r5, #0
 800037c:	f000 80b1 	beq.w	80004e2 <__udivmoddi4+0x282>
 8000380:	2600      	movs	r6, #0
 8000382:	e9c5 0100 	strd	r0, r1, [r5]
 8000386:	4630      	mov	r0, r6
 8000388:	4631      	mov	r1, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f683 	clz	r6, r3
 8000392:	2e00      	cmp	r6, #0
 8000394:	d14a      	bne.n	800042c <__udivmoddi4+0x1cc>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0x140>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80b8 	bhi.w	8000510 <__udivmoddi4+0x2b0>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0103 	sbc.w	r1, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	468c      	mov	ip, r1
 80003aa:	2d00      	cmp	r5, #0
 80003ac:	d0a8      	beq.n	8000300 <__udivmoddi4+0xa0>
 80003ae:	e9c5 4c00 	strd	r4, ip, [r5]
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0xa0>
 80003b4:	f1c2 0320 	rsb	r3, r2, #32
 80003b8:	fa20 f603 	lsr.w	r6, r0, r3
 80003bc:	4097      	lsls	r7, r2
 80003be:	fa01 f002 	lsl.w	r0, r1, r2
 80003c2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c6:	40d9      	lsrs	r1, r3
 80003c8:	4330      	orrs	r0, r6
 80003ca:	0c03      	lsrs	r3, r0, #16
 80003cc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d0:	fa1f f887 	uxth.w	r8, r7
 80003d4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb06 f108 	mul.w	r1, r6, r8
 80003e0:	4299      	cmp	r1, r3
 80003e2:	fa04 f402 	lsl.w	r4, r4, r2
 80003e6:	d909      	bls.n	80003fc <__udivmoddi4+0x19c>
 80003e8:	18fb      	adds	r3, r7, r3
 80003ea:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ee:	f080 808d 	bcs.w	800050c <__udivmoddi4+0x2ac>
 80003f2:	4299      	cmp	r1, r3
 80003f4:	f240 808a 	bls.w	800050c <__udivmoddi4+0x2ac>
 80003f8:	3e02      	subs	r6, #2
 80003fa:	443b      	add	r3, r7
 80003fc:	1a5b      	subs	r3, r3, r1
 80003fe:	b281      	uxth	r1, r0
 8000400:	fbb3 f0fe 	udiv	r0, r3, lr
 8000404:	fb0e 3310 	mls	r3, lr, r0, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb00 f308 	mul.w	r3, r0, r8
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x1c4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f100 3cff 	add.w	ip, r0, #4294967295
 800041a:	d273      	bcs.n	8000504 <__udivmoddi4+0x2a4>
 800041c:	428b      	cmp	r3, r1
 800041e:	d971      	bls.n	8000504 <__udivmoddi4+0x2a4>
 8000420:	3802      	subs	r0, #2
 8000422:	4439      	add	r1, r7
 8000424:	1acb      	subs	r3, r1, r3
 8000426:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800042a:	e778      	b.n	800031e <__udivmoddi4+0xbe>
 800042c:	f1c6 0c20 	rsb	ip, r6, #32
 8000430:	fa03 f406 	lsl.w	r4, r3, r6
 8000434:	fa22 f30c 	lsr.w	r3, r2, ip
 8000438:	431c      	orrs	r4, r3
 800043a:	fa20 f70c 	lsr.w	r7, r0, ip
 800043e:	fa01 f306 	lsl.w	r3, r1, r6
 8000442:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000446:	fa21 f10c 	lsr.w	r1, r1, ip
 800044a:	431f      	orrs	r7, r3
 800044c:	0c3b      	lsrs	r3, r7, #16
 800044e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000452:	fa1f f884 	uxth.w	r8, r4
 8000456:	fb0e 1119 	mls	r1, lr, r9, r1
 800045a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800045e:	fb09 fa08 	mul.w	sl, r9, r8
 8000462:	458a      	cmp	sl, r1
 8000464:	fa02 f206 	lsl.w	r2, r2, r6
 8000468:	fa00 f306 	lsl.w	r3, r0, r6
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x220>
 800046e:	1861      	adds	r1, r4, r1
 8000470:	f109 30ff 	add.w	r0, r9, #4294967295
 8000474:	d248      	bcs.n	8000508 <__udivmoddi4+0x2a8>
 8000476:	458a      	cmp	sl, r1
 8000478:	d946      	bls.n	8000508 <__udivmoddi4+0x2a8>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4421      	add	r1, r4
 8000480:	eba1 010a 	sub.w	r1, r1, sl
 8000484:	b2bf      	uxth	r7, r7
 8000486:	fbb1 f0fe 	udiv	r0, r1, lr
 800048a:	fb0e 1110 	mls	r1, lr, r0, r1
 800048e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000492:	fb00 f808 	mul.w	r8, r0, r8
 8000496:	45b8      	cmp	r8, r7
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x24a>
 800049a:	19e7      	adds	r7, r4, r7
 800049c:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a0:	d22e      	bcs.n	8000500 <__udivmoddi4+0x2a0>
 80004a2:	45b8      	cmp	r8, r7
 80004a4:	d92c      	bls.n	8000500 <__udivmoddi4+0x2a0>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4427      	add	r7, r4
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	eba7 0708 	sub.w	r7, r7, r8
 80004b2:	fba0 8902 	umull	r8, r9, r0, r2
 80004b6:	454f      	cmp	r7, r9
 80004b8:	46c6      	mov	lr, r8
 80004ba:	4649      	mov	r1, r9
 80004bc:	d31a      	bcc.n	80004f4 <__udivmoddi4+0x294>
 80004be:	d017      	beq.n	80004f0 <__udivmoddi4+0x290>
 80004c0:	b15d      	cbz	r5, 80004da <__udivmoddi4+0x27a>
 80004c2:	ebb3 020e 	subs.w	r2, r3, lr
 80004c6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ca:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ce:	40f2      	lsrs	r2, r6
 80004d0:	ea4c 0202 	orr.w	r2, ip, r2
 80004d4:	40f7      	lsrs	r7, r6
 80004d6:	e9c5 2700 	strd	r2, r7, [r5]
 80004da:	2600      	movs	r6, #0
 80004dc:	4631      	mov	r1, r6
 80004de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e70b      	b.n	8000300 <__udivmoddi4+0xa0>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0x60>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fd      	b.n	80002ec <__udivmoddi4+0x8c>
 80004f0:	4543      	cmp	r3, r8
 80004f2:	d2e5      	bcs.n	80004c0 <__udivmoddi4+0x260>
 80004f4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004f8:	eb69 0104 	sbc.w	r1, r9, r4
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7df      	b.n	80004c0 <__udivmoddi4+0x260>
 8000500:	4608      	mov	r0, r1
 8000502:	e7d2      	b.n	80004aa <__udivmoddi4+0x24a>
 8000504:	4660      	mov	r0, ip
 8000506:	e78d      	b.n	8000424 <__udivmoddi4+0x1c4>
 8000508:	4681      	mov	r9, r0
 800050a:	e7b9      	b.n	8000480 <__udivmoddi4+0x220>
 800050c:	4666      	mov	r6, ip
 800050e:	e775      	b.n	80003fc <__udivmoddi4+0x19c>
 8000510:	4630      	mov	r0, r6
 8000512:	e74a      	b.n	80003aa <__udivmoddi4+0x14a>
 8000514:	f1ac 0c02 	sub.w	ip, ip, #2
 8000518:	4439      	add	r1, r7
 800051a:	e713      	b.n	8000344 <__udivmoddi4+0xe4>
 800051c:	3802      	subs	r0, #2
 800051e:	443c      	add	r4, r7
 8000520:	e724      	b.n	800036c <__udivmoddi4+0x10c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <LL_EXTI_EnableIT_32_63+0x24>)
 8000532:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000536:	4905      	ldr	r1, [pc, #20]	; (800054c <LL_EXTI_EnableIT_32_63+0x24>)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4313      	orrs	r3, r2
 800053c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	58000800 	.word	0x58000800

08000550 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800055c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800055e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4313      	orrs	r3, r2
 8000566:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800056c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4013      	ands	r3, r2
 8000572:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000574:	68fb      	ldr	r3, [r7, #12]
}
 8000576:	bf00      	nop
 8000578:	3714      	adds	r7, #20
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr

08000582 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000582:	b480      	push	{r7}
 8000584:	b085      	sub	sp, #20
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 800058a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800058e:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000592:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4313      	orrs	r3, r2
 800059a:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 800059e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005a2:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4013      	ands	r3, r2
 80005aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ac:	68fb      	ldr	r3, [r7, #12]
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr

080005ba <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 80005be:	f002 f88b 	bl	80026d8 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80005c2:	f002 f88f 	bl	80026e4 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 80005c6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80005ca:	f7ff ffad 	bl	8000528 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 80005ce:	f008 f90b 	bl	80087e8 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 80005d2:	f000 f821 	bl	8000618 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 80005d6:	f000 f8c3 	bl	8000760 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 80005da:	bf00      	nop
}
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80005e6:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <APPD_EnableCPU2+0x34>)
 80005e8:	1d3c      	adds	r4, r7, #4
 80005ea:	461d      	mov	r5, r3
 80005ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f4:	c403      	stmia	r4!, {r0, r1}
 80005f6:	8022      	strh	r2, [r4, #0]
 80005f8:	3402      	adds	r4, #2
 80005fa:	0c13      	lsrs	r3, r2, #16
 80005fc:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80005fe:	f008 f82f 	bl	8008660 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	4618      	mov	r0, r3
 8000606:	f007 faca 	bl	8007b9e <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800060a:	bf00      	nop
}
 800060c:	3720      	adds	r7, #32
 800060e:	46bd      	mov	sp, r7
 8000610:	bdb0      	pop	{r4, r5, r7, pc}
 8000612:	bf00      	nop
 8000614:	0800b408 	.word	0x0800b408

08000618 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000638:	2300      	movs	r3, #0
 800063a:	77fb      	strb	r3, [r7, #31]
 800063c:	e038      	b.n	80006b0 <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 800063e:	7ffb      	ldrb	r3, [r7, #31]
 8000640:	4a44      	ldr	r2, [pc, #272]	; (8000754 <APPD_SetCPU2GpioConfig+0x13c>)
 8000642:	00db      	lsls	r3, r3, #3
 8000644:	4413      	add	r3, r2
 8000646:	799b      	ldrb	r3, [r3, #6]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d02b      	beq.n	80006a4 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 800064c:	7ffb      	ldrb	r3, [r7, #31]
 800064e:	4a41      	ldr	r2, [pc, #260]	; (8000754 <APPD_SetCPU2GpioConfig+0x13c>)
 8000650:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000654:	4a40      	ldr	r2, [pc, #256]	; (8000758 <APPD_SetCPU2GpioConfig+0x140>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d01b      	beq.n	8000692 <APPD_SetCPU2GpioConfig+0x7a>
 800065a:	4a3f      	ldr	r2, [pc, #252]	; (8000758 <APPD_SetCPU2GpioConfig+0x140>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d823      	bhi.n	80006a8 <APPD_SetCPU2GpioConfig+0x90>
 8000660:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000664:	d003      	beq.n	800066e <APPD_SetCPU2GpioConfig+0x56>
 8000666:	4a3d      	ldr	r2, [pc, #244]	; (800075c <APPD_SetCPU2GpioConfig+0x144>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d009      	beq.n	8000680 <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 800066c:	e01c      	b.n	80006a8 <APPD_SetCPU2GpioConfig+0x90>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 800066e:	7ffb      	ldrb	r3, [r7, #31]
 8000670:	4a38      	ldr	r2, [pc, #224]	; (8000754 <APPD_SetCPU2GpioConfig+0x13c>)
 8000672:	00db      	lsls	r3, r3, #3
 8000674:	4413      	add	r3, r2
 8000676:	889a      	ldrh	r2, [r3, #4]
 8000678:	8bbb      	ldrh	r3, [r7, #28]
 800067a:	4313      	orrs	r3, r2
 800067c:	83bb      	strh	r3, [r7, #28]
          break;
 800067e:	e014      	b.n	80006aa <APPD_SetCPU2GpioConfig+0x92>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000680:	7ffb      	ldrb	r3, [r7, #31]
 8000682:	4a34      	ldr	r2, [pc, #208]	; (8000754 <APPD_SetCPU2GpioConfig+0x13c>)
 8000684:	00db      	lsls	r3, r3, #3
 8000686:	4413      	add	r3, r2
 8000688:	889a      	ldrh	r2, [r3, #4]
 800068a:	8b7b      	ldrh	r3, [r7, #26]
 800068c:	4313      	orrs	r3, r2
 800068e:	837b      	strh	r3, [r7, #26]
          break;
 8000690:	e00b      	b.n	80006aa <APPD_SetCPU2GpioConfig+0x92>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000692:	7ffb      	ldrb	r3, [r7, #31]
 8000694:	4a2f      	ldr	r2, [pc, #188]	; (8000754 <APPD_SetCPU2GpioConfig+0x13c>)
 8000696:	00db      	lsls	r3, r3, #3
 8000698:	4413      	add	r3, r2
 800069a:	889a      	ldrh	r2, [r3, #4]
 800069c:	8b3b      	ldrh	r3, [r7, #24]
 800069e:	4313      	orrs	r3, r2
 80006a0:	833b      	strh	r3, [r7, #24]
          break;
 80006a2:	e002      	b.n	80006aa <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 80006a4:	bf00      	nop
 80006a6:	e000      	b.n	80006aa <APPD_SetCPU2GpioConfig+0x92>
          break;
 80006a8:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80006aa:	7ffb      	ldrb	r3, [r7, #31]
 80006ac:	3301      	adds	r3, #1
 80006ae:	77fb      	strb	r3, [r7, #31]
 80006b0:	7ffb      	ldrb	r3, [r7, #31]
 80006b2:	2b25      	cmp	r3, #37	; 0x25
 80006b4:	d9c3      	bls.n	800063e <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	2301      	movs	r3, #1
 80006bc:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006be:	2303      	movs	r3, #3
 80006c0:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 80006c2:	8bbb      	ldrh	r3, [r7, #28]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d014      	beq.n	80006f2 <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 80006c8:	8bbb      	ldrh	r3, [r7, #28]
 80006ca:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006cc:	2001      	movs	r0, #1
 80006ce:	f7ff ff3f 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 80006d2:	2001      	movs	r0, #1
 80006d4:	f7ff ff55 	bl	8000582 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	4619      	mov	r1, r3
 80006dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e0:	f002 fd24 	bl	800312c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 80006e4:	8bbb      	ldrh	r3, [r7, #28]
 80006e6:	2200      	movs	r2, #0
 80006e8:	4619      	mov	r1, r3
 80006ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ee:	f002 fe8d 	bl	800340c <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 80006f2:	8b7b      	ldrh	r3, [r7, #26]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d012      	beq.n	800071e <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 80006f8:	8b7b      	ldrh	r3, [r7, #26]
 80006fa:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fc:	2002      	movs	r0, #2
 80006fe:	f7ff ff27 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000702:	2002      	movs	r0, #2
 8000704:	f7ff ff3d 	bl	8000582 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	4619      	mov	r1, r3
 800070c:	4813      	ldr	r0, [pc, #76]	; (800075c <APPD_SetCPU2GpioConfig+0x144>)
 800070e:	f002 fd0d 	bl	800312c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000712:	8b7b      	ldrh	r3, [r7, #26]
 8000714:	2200      	movs	r2, #0
 8000716:	4619      	mov	r1, r3
 8000718:	4810      	ldr	r0, [pc, #64]	; (800075c <APPD_SetCPU2GpioConfig+0x144>)
 800071a:	f002 fe77 	bl	800340c <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 800071e:	8b3b      	ldrh	r3, [r7, #24]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d013      	beq.n	800074c <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000724:	8b3b      	ldrh	r3, [r7, #24]
 8000726:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000728:	2004      	movs	r0, #4
 800072a:	f7ff ff11 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 800072e:	2004      	movs	r0, #4
 8000730:	f7ff ff27 	bl	8000582 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	4619      	mov	r1, r3
 8000738:	4807      	ldr	r0, [pc, #28]	; (8000758 <APPD_SetCPU2GpioConfig+0x140>)
 800073a:	f002 fcf7 	bl	800312c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 800073e:	8b3b      	ldrh	r3, [r7, #24]
 8000740:	2200      	movs	r2, #0
 8000742:	4619      	mov	r1, r3
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <APPD_SetCPU2GpioConfig+0x140>)
 8000746:	f002 fe61 	bl	800340c <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 800074a:	bf00      	nop
 800074c:	bf00      	nop
}
 800074e:	3720      	adds	r7, #32
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	0800b944 	.word	0x0800b944
 8000758:	48000800 	.word	0x48000800
 800075c:	48000400 	.word	0x48000400

08000760 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000764:	bf00      	nop
}
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 800076e:	b580      	push	{r7, lr}
 8000770:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8000772:	f001 fb65 	bl	8001e40 <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000776:	bf00      	nop
}
 8000778:	bd80      	pop	{r7, pc}

0800077a <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b084      	sub	sp, #16
 800077e:	af00      	add	r7, sp, #0
 8000780:	60f8      	str	r0, [r7, #12]
 8000782:	460b      	mov	r3, r1
 8000784:	607a      	str	r2, [r7, #4]
 8000786:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000788:	897a      	ldrh	r2, [r7, #10]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	68f9      	ldr	r1, [r7, #12]
 800078e:	2000      	movs	r0, #0
 8000790:	f001 f9ba 	bl	8001b08 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000794:	bf00      	nop
}
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <LL_C2_PWR_SetPowerMode+0x28>)
 80007a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007aa:	f023 0207 	bic.w	r2, r3, #7
 80007ae:	4905      	ldr	r1, [pc, #20]	; (80007c4 <LL_C2_PWR_SetPowerMode+0x28>)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4313      	orrs	r3, r2
 80007b4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	58000400 	.word	0x58000400

080007c8 <LL_EXTI_EnableIT_32_63>:
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <LL_EXTI_EnableIT_32_63+0x24>)
 80007d2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80007d6:	4905      	ldr	r1, [pc, #20]	; (80007ec <LL_EXTI_EnableIT_32_63+0x24>)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4313      	orrs	r3, r2
 80007dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80007e0:	bf00      	nop
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	58000800 	.word	0x58000800

080007f0 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80007f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007fc:	4a0a      	ldr	r2, [pc, #40]	; (8000828 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80007fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000806:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800080a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	021b      	lsls	r3, r3, #8
 8000812:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000816:	4313      	orrs	r3, r2
 8000818:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 800081c:	bf00      	nop
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	cafecafe 	.word	0xcafecafe

0800082c <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000838:	689b      	ldr	r3, [r3, #8]
 800083a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800083e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4313      	orrs	r3, r2
 8000846:	608b      	str	r3, [r1, #8]
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800085c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000860:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800087a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800087e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000882:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800088a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 800089c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80008ac:	d101      	bne.n	80008b2 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80008ae:	2301      	movs	r3, #1
 80008b0:	e000      	b.n	80008b4 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80008b2:	2300      	movs	r3, #0
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80008c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80008d2:	d101      	bne.n	80008d8 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80008d4:	2301      	movs	r3, #1
 80008d6:	e000      	b.n	80008da <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80008d8:	2300      	movs	r3, #0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <LL_AHB3_GRP1_EnableClock>:
{
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80008ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80008f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80008fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000900:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4013      	ands	r3, r2
 8000906:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000908:	68fb      	ldr	r3, [r7, #12]
}
 800090a:	bf00      	nop
 800090c:	3714      	adds	r7, #20
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
	...

08000918 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 800091c:	4b04      	ldr	r3, [pc, #16]	; (8000930 <LL_DBGMCU_GetRevisionID+0x18>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	0c1b      	lsrs	r3, r3, #16
 8000922:	b29b      	uxth	r3, r3
}
 8000924:	4618      	mov	r0, r3
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e0042000 	.word	0xe0042000

08000934 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	685a      	ldr	r2, [r3, #4]
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	041b      	lsls	r3, r3, #16
 8000946:	431a      	orrs	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	605a      	str	r2, [r3, #4]
}
 800094c:	bf00      	nop
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	685a      	ldr	r2, [r3, #4]
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	431a      	orrs	r2, r3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	605a      	str	r2, [r3, #4]
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800097a:	b480      	push	{r7}
 800097c:	b083      	sub	sp, #12
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
 8000982:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	695a      	ldr	r2, [r3, #20]
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	041b      	lsls	r3, r3, #16
 800098c:	431a      	orrs	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	615a      	str	r2, [r3, #20]
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800099e:	b480      	push	{r7}
 80009a0:	b083      	sub	sp, #12
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
 80009a6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	695a      	ldr	r2, [r3, #20]
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	431a      	orrs	r2, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	615a      	str	r2, [r3, #20]
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	683a      	ldr	r2, [r7, #0]
 80009ce:	609a      	str	r2, [r3, #8]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	683a      	ldr	r2, [r7, #0]
 80009ea:	619a      	str	r2, [r3, #24]
}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	22ff      	movs	r2, #255	; 0xff
 8000a04:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000a12:	b480      	push	{r7}
 8000a14:	b083      	sub	sp, #12
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	22ca      	movs	r2, #202	; 0xca
 8000a1e:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2253      	movs	r2, #83	; 0x53
 8000a24:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
 8000a3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	f023 0207 	bic.w	r2, r3, #7
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	431a      	orrs	r2, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config( void )
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 8000a5c:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <MX_APPE_Config+0x18>)
 8000a5e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a62:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device( );
 8000a64:	f000 f826 	bl	8000ab4 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000a68:	f000 f866 	bl	8000b38 <Config_HSE>

  return;
 8000a6c:	bf00      	nop
}
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	58004000 	.word	0x58004000

08000a74 <MX_APPE_Init>:

void MX_APPE_Init( void )
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  System_Init( );       /**< System initialization */
 8000a78:	f000 f872 	bl	8000b60 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000a7c:	f000 f88a 	bl	8000b94 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000a80:	4904      	ldr	r1, [pc, #16]	; (8000a94 <MX_APPE_Init+0x20>)
 8000a82:	2000      	movs	r0, #0
 8000a84:	f000 fe38 	bl	80016f8 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8000a88:	f7ff fd97 	bl	80005ba <APPD_Init>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000a8c:	f000 f890 	bl	8000bb0 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000a90:	bf00      	nop
}
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20001500 	.word	0x20001500

08000a98 <Init_Smps>:

void Init_Smps( void )
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  return;
 8000a9c:	bf00      	nop
}
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <Init_Exti>:

void Init_Exti( void )
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63( LL_EXTI_LINE_36 & LL_EXTI_LINE_38 );
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f7ff fe8c 	bl	80007c8 <LL_EXTI_EnableIT_32_63>

  return;
 8000ab0:	bf00      	nop
}
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device( void )
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 8000ab8:	f000 f804 	bl	8000ac4 <Reset_BackupDomain>

  Reset_IPCC();
 8000abc:	f000 f81a 	bl	8000af4 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW */

  return;
 8000ac0:	bf00      	nop
}
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <Reset_BackupDomain>:

#if ( CFG_HW_RESET_BY_FW == 1 )
static void Reset_BackupDomain( void )
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000ac8:	f7ff fee6 	bl	8000898 <LL_RCC_IsActiveFlag_PINRST>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d00d      	beq.n	8000aee <Reset_BackupDomain+0x2a>
 8000ad2:	f7ff fef4 	bl	80008be <LL_RCC_IsActiveFlag_SFTRST>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d108      	bne.n	8000aee <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000adc:	f002 fd58 	bl	8003590 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000ae0:	f002 fd56 	bl	8003590 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000ae4:	f7ff feb6 	bl	8000854 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000ae8:	f7ff fec5 	bl	8000876 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000aec:	bf00      	nop
 8000aee:	bf00      	nop
}
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000af8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000afc:	f7ff fef2 	bl	80008e4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000b00:	213f      	movs	r1, #63	; 0x3f
 8000b02:	480c      	ldr	r0, [pc, #48]	; (8000b34 <Reset_IPCC+0x40>)
 8000b04:	f7ff ff5c 	bl	80009c0 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000b08:	213f      	movs	r1, #63	; 0x3f
 8000b0a:	480a      	ldr	r0, [pc, #40]	; (8000b34 <Reset_IPCC+0x40>)
 8000b0c:	f7ff ff66 	bl	80009dc <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000b10:	213f      	movs	r1, #63	; 0x3f
 8000b12:	4808      	ldr	r0, [pc, #32]	; (8000b34 <Reset_IPCC+0x40>)
 8000b14:	f7ff ff0e 	bl	8000934 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000b18:	213f      	movs	r1, #63	; 0x3f
 8000b1a:	4806      	ldr	r0, [pc, #24]	; (8000b34 <Reset_IPCC+0x40>)
 8000b1c:	f7ff ff2d 	bl	800097a <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000b20:	213f      	movs	r1, #63	; 0x3f
 8000b22:	4804      	ldr	r0, [pc, #16]	; (8000b34 <Reset_IPCC+0x40>)
 8000b24:	f7ff ff18 	bl	8000958 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000b28:	213f      	movs	r1, #63	; 0x3f
 8000b2a:	4802      	ldr	r0, [pc, #8]	; (8000b34 <Reset_IPCC+0x40>)
 8000b2c:	f7ff ff37 	bl	800099e <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000b30:	bf00      	nop
}
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	58000c00 	.word	0x58000c00

08000b38 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW */

static void Config_HSE(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f007 fed0 	bl	80088e4 <OTP_Read>
 8000b44:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d005      	beq.n	8000b58 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	799b      	ldrb	r3, [r3, #6]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fe4d 	bl	80007f0 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000b56:	bf00      	nop
 8000b58:	bf00      	nop
}
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <System_Init>:

static void System_Init( void )
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  Init_Smps( );
 8000b64:	f7ff ff98 	bl	8000a98 <Init_Smps>

  Init_Exti( );
 8000b68:	f7ff ff9d 	bl	8000aa6 <Init_Exti>

  Init_Rtc( );
 8000b6c:	f000 f802 	bl	8000b74 <Init_Rtc>

  return;
 8000b70:	bf00      	nop
}
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <Init_Rtc>:

static void Init_Rtc( void )
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000b78:	4805      	ldr	r0, [pc, #20]	; (8000b90 <Init_Rtc+0x1c>)
 8000b7a:	f7ff ff4a 	bl	8000a12 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4803      	ldr	r0, [pc, #12]	; (8000b90 <Init_Rtc+0x1c>)
 8000b82:	f7ff ff56 	bl	8000a32 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000b86:	4802      	ldr	r0, [pc, #8]	; (8000b90 <Init_Rtc+0x1c>)
 8000b88:	f7ff ff36 	bl	80009f8 <LL_RTC_EnableWriteProtection>

  return;
 8000b8c:	bf00      	nop
}
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40002800 	.word	0x40002800

08000b94 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000b98:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000b9c:	f7ff fe46 	bl	800082c <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000ba0:	f009 f9aa 	bl	8009ef8 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000ba4:	2004      	movs	r0, #4
 8000ba6:	f7ff fdf9 	bl	800079c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000baa:	bf00      	nop
}
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b088      	sub	sp, #32
 8000bb4:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000bb6:	f007 fb9d 	bl	80082f4 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 8000bba:	4a11      	ldr	r2, [pc, #68]	; (8000c00 <appe_Tl_Init+0x50>)
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	2004      	movs	r0, #4
 8000bc0:	f009 fac6 	bl	800a150 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <appe_Tl_Init+0x54>)
 8000bc6:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <appe_Tl_Init+0x58>)
 8000bca:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000bcc:	463b      	mov	r3, r7
 8000bce:	4619      	mov	r1, r3
 8000bd0:	480e      	ldr	r0, [pc, #56]	; (8000c0c <appe_Tl_Init+0x5c>)
 8000bd2:	f007 fa55 	bl	8008080 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <appe_Tl_Init+0x60>)
 8000bd8:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <appe_Tl_Init+0x64>)
 8000bdc:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <appe_Tl_Init+0x68>)
 8000be0:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000be2:	f240 533c 	movw	r3, #1340	; 0x53c
 8000be6:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000be8:	f107 0308 	add.w	r3, r7, #8
 8000bec:	4618      	mov	r0, r3
 8000bee:	f007 fcc3 	bl	8008578 <TL_MM_Init>

  TL_Enable();
 8000bf2:	f007 fb79 	bl	80082e8 <TL_Enable>

  return;
 8000bf6:	bf00      	nop
}
 8000bf8:	3720      	adds	r7, #32
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	080080b9 	.word	0x080080b9
 8000c04:	20030724 	.word	0x20030724
 8000c08:	08000c1d 	.word	0x08000c1d
 8000c0c:	08000c35 	.word	0x08000c35
 8000c10:	2003093c 	.word	0x2003093c
 8000c14:	20030830 	.word	0x20030830
 8000c18:	200301e8 	.word	0x200301e8

08000c1c <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000c26:	bf00      	nop
}
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
	...

08000c34 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b088      	sub	sp, #32
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	330b      	adds	r3, #11
 8000c42:	61fb      	str	r3, [r7, #28]

  /* Read the firmware version of both the wireless firmware and the FUS */
  SHCI_GetWirelessFwInfo( &WirelessInfo );
 8000c44:	f107 030c 	add.w	r3, r7, #12
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f006 ffd5 	bl	8007bf8 <SHCI_GetWirelessFwInfo>
  APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8000c4e:	7b3b      	ldrb	r3, [r7, #12]
 8000c50:	4619      	mov	r1, r3
 8000c52:	7b7b      	ldrb	r3, [r7, #13]
 8000c54:	461a      	mov	r2, r3
 8000c56:	7bbb      	ldrb	r3, [r7, #14]
 8000c58:	482e      	ldr	r0, [pc, #184]	; (8000d14 <APPE_SysUserEvtRx+0xe0>)
 8000c5a:	f009 fbfd 	bl	800a458 <iprintf>
  APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8000c5e:	7c3b      	ldrb	r3, [r7, #16]
 8000c60:	4619      	mov	r1, r3
 8000c62:	482d      	ldr	r0, [pc, #180]	; (8000d18 <APPE_SysUserEvtRx+0xe4>)
 8000c64:	f009 fbf8 	bl	800a458 <iprintf>
  APP_DBG_MSG("FUS version %d.%d.%d\n\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8000c68:	7dbb      	ldrb	r3, [r7, #22]
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	7dfb      	ldrb	r3, [r7, #23]
 8000c6e:	461a      	mov	r2, r3
 8000c70:	7e3b      	ldrb	r3, [r7, #24]
 8000c72:	482a      	ldr	r0, [pc, #168]	; (8000d1c <APPE_SysUserEvtRx+0xe8>)
 8000c74:	f009 fbf0 	bl	800a458 <iprintf>

  switch(p_sys_event->subevtcode)
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000c82:	2b07      	cmp	r3, #7
 8000c84:	d840      	bhi.n	8000d08 <APPE_SysUserEvtRx+0xd4>
 8000c86:	a201      	add	r2, pc, #4	; (adr r2, 8000c8c <APPE_SysUserEvtRx+0x58>)
 8000c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c8c:	08000cad 	.word	0x08000cad
 8000c90:	08000cb5 	.word	0x08000cb5
 8000c94:	08000cbd 	.word	0x08000cbd
 8000c98:	08000d09 	.word	0x08000d09
 8000c9c:	08000cd9 	.word	0x08000cd9
 8000ca0:	08000ce9 	.word	0x08000ce9
 8000ca4:	08000cf1 	.word	0x08000cf1
 8000ca8:	08000d01 	.word	0x08000d01
  {
  case SHCI_SUB_EVT_CODE_READY:
    APPE_SysEvtReadyProcessing(pPayload);
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f000 f869 	bl	8000d84 <APPE_SysEvtReadyProcessing>
    break;
 8000cb2:	e02a      	b.n	8000d0a <APPE_SysUserEvtRx+0xd6>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APPE_SysEvtError(pPayload);
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f000 f83f 	bl	8000d38 <APPE_SysEvtError>
    break;
 8000cba:	e026      	b.n	8000d0a <APPE_SysUserEvtRx+0xd6>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG("-- BLE NVM RAM HAS BEEN UPDATED BY CMO+ \n");
 8000cbc:	4818      	ldr	r0, [pc, #96]	; (8000d20 <APPE_SysUserEvtRx+0xec>)
 8000cbe:	f009 fc51 	bl	800a564 <puts>
    APP_DBG_MSG("SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE : StartAddress = %lx , Size = %ld\n",
        ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3302      	adds	r3, #2
    APP_DBG_MSG("SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE : StartAddress = %lx , Size = %ld\n",
 8000cc6:	6819      	ldr	r1, [r3, #0]
        ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	3302      	adds	r3, #2
    APP_DBG_MSG("SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE : StartAddress = %lx , Size = %ld\n",
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	4814      	ldr	r0, [pc, #80]	; (8000d24 <APPE_SysUserEvtRx+0xf0>)
 8000cd2:	f009 fbc1 	bl	800a458 <iprintf>
    break;
 8000cd6:	e018      	b.n	8000d0a <APPE_SysUserEvtRx+0xd6>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	3302      	adds	r3, #2
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4811      	ldr	r0, [pc, #68]	; (8000d28 <APPE_SysUserEvtRx+0xf4>)
 8000ce2:	f009 fbb9 	bl	800a458 <iprintf>
    break;
 8000ce6:	e010      	b.n	8000d0a <APPE_SysUserEvtRx+0xd6>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_END_WRITE\n");
 8000ce8:	4810      	ldr	r0, [pc, #64]	; (8000d2c <APPE_SysUserEvtRx+0xf8>)
 8000cea:	f009 fc3b 	bl	800a564 <puts>
    break;
 8000cee:	e00c      	b.n	8000d0a <APPE_SysUserEvtRx+0xd6>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	3302      	adds	r3, #2
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	480d      	ldr	r0, [pc, #52]	; (8000d30 <APPE_SysUserEvtRx+0xfc>)
 8000cfa:	f009 fbad 	bl	800a458 <iprintf>
    break;
 8000cfe:	e004      	b.n	8000d0a <APPE_SysUserEvtRx+0xd6>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_END_ERASE\n");
 8000d00:	480c      	ldr	r0, [pc, #48]	; (8000d34 <APPE_SysUserEvtRx+0x100>)
 8000d02:	f009 fc2f 	bl	800a564 <puts>
    break;
 8000d06:	e000      	b.n	8000d0a <APPE_SysUserEvtRx+0xd6>

  default:
    break;
 8000d08:	bf00      	nop
  }

  return;
 8000d0a:	bf00      	nop
}
 8000d0c:	3720      	adds	r7, #32
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	0800b424 	.word	0x0800b424
 8000d18:	0800b448 	.word	0x0800b448
 8000d1c:	0800b464 	.word	0x0800b464
 8000d20:	0800b47c 	.word	0x0800b47c
 8000d24:	0800b4a8 	.word	0x0800b4a8
 8000d28:	0800b4ec 	.word	0x0800b4ec
 8000d2c:	0800b520 	.word	0x0800b520
 8000d30:	0800b53c 	.word	0x0800b53c
 8000d34:	0800b574 	.word	0x0800b574

08000d38 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( void * pPayload)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	330b      	adds	r3, #11
 8000d46:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	3302      	adds	r3, #2
 8000d4c:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n",(*p_sys_error_code));
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	4619      	mov	r1, r3
 8000d54:	4808      	ldr	r0, [pc, #32]	; (8000d78 <APPE_SysEvtError+0x40>)
 8000d56:	f009 fb7f 	bl	800a458 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d103      	bne.n	8000d6a <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8000d62:	4806      	ldr	r0, [pc, #24]	; (8000d7c <APPE_SysEvtError+0x44>)
 8000d64:	f009 fbfe 	bl	800a564 <puts>
  }
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000d68:	e003      	b.n	8000d72 <APPE_SysEvtError+0x3a>
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <APPE_SysEvtError+0x48>)
 8000d6c:	f009 fbfa 	bl	800a564 <puts>
  return;
 8000d70:	bf00      	nop
}
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	0800b590 	.word	0x0800b590
 8000d7c:	0800b5bc 	.word	0x0800b5bc
 8000d80:	0800b5f4 	.word	0x0800b5f4

08000d84 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void * pPayload )
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	; 0x28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	819a      	strh	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	330b      	adds	r3, #11
 8000da4:	623b      	str	r3, [r7, #32]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000da6:	6a3b      	ldr	r3, [r7, #32]
 8000da8:	3302      	adds	r3, #2
 8000daa:	61fb      	str	r3, [r7, #28]

  if(p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d11e      	bne.n	8000df2 <APPE_SysEvtReadyProcessing+0x6e>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - WIRELESS_FW_RUNNING \n");
 8000db4:	4818      	ldr	r0, [pc, #96]	; (8000e18 <APPE_SysEvtReadyProcessing+0x94>)
 8000db6:	f009 fbd5 	bl	800a564 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2( );
 8000dba:	f7ff fc11 	bl	80005e0 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000dbe:	230d      	movs	r3, #13
 8000dc0:	733b      	strb	r3, [r7, #12]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000dc2:	237f      	movs	r3, #127	; 0x7f
 8000dc4:	73bb      	strb	r3, [r7, #14]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000dc6:	f7ff fda7 	bl	8000918 <LL_DBGMCU_GetRevisionID>
 8000dca:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG("DBGMCU_GetRevisionID= %lx \n\n", RevisionID);
 8000dcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000dce:	4813      	ldr	r0, [pc, #76]	; (8000e1c <APPE_SysEvtReadyProcessing+0x98>)
 8000dd0:	f009 fb42 	bl	800a458 <iprintf>

    config_param.RevisionID = RevisionID;
 8000dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	833b      	strh	r3, [r7, #24]
    (void)SHCI_C2_Config(&config_param);
 8000dda:	f107 030c 	add.w	r3, r7, #12
 8000dde:	4618      	mov	r0, r3
 8000de0:	f006 fef4 	bl	8007bcc <SHCI_C2_Config>

    APP_BLE_Init( );
 8000de4:	f008 fa8a 	bl	80092fc <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000de8:	2100      	movs	r1, #0
 8000dea:	2001      	movs	r0, #1
 8000dec:	f009 f896 	bl	8009f1c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n");
  }

  return;
 8000df0:	e00e      	b.n	8000e10 <APPE_SysEvtReadyProcessing+0x8c>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d106      	bne.n	8000e08 <APPE_SysEvtReadyProcessing+0x84>
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n");
 8000dfa:	4809      	ldr	r0, [pc, #36]	; (8000e20 <APPE_SysEvtReadyProcessing+0x9c>)
 8000dfc:	f009 fbb2 	bl	800a564 <puts>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2200      	movs	r2, #0
 8000e04:	701a      	strb	r2, [r3, #0]
  return;
 8000e06:	e003      	b.n	8000e10 <APPE_SysEvtReadyProcessing+0x8c>
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n");
 8000e08:	4806      	ldr	r0, [pc, #24]	; (8000e24 <APPE_SysEvtReadyProcessing+0xa0>)
 8000e0a:	f009 fbab 	bl	800a564 <puts>
  return;
 8000e0e:	bf00      	nop
}
 8000e10:	3728      	adds	r7, #40	; 0x28
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	0800b628 	.word	0x0800b628
 8000e1c:	0800b658 	.word	0x0800b658
 8000e20:	0800b678 	.word	0x0800b678
 8000e24:	0800b6a4 	.word	0x0800b6a4

08000e28 <MX_APPE_Process>:
    __WFI( );
  }
}

void MX_APPE_Process(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e30:	f009 f8a4 	bl	8009f7c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 8000e3c:	bf00      	nop
}
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
 8000e4e:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295
 8000e54:	f009 f892 	bl	8009f7c <UTIL_SEQ_Run>

  return;
 8000e58:	bf00      	nop
}
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2004      	movs	r0, #4
 8000e6c:	f009 f992 	bl	800a194 <UTIL_SEQ_SetTask>
  return;
 8000e70:	bf00      	nop
}
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000e80:	2002      	movs	r0, #2
 8000e82:	f009 f9f3 	bl	800a26c <UTIL_SEQ_SetEvt>
  return;
 8000e86:	bf00      	nop
}
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000e96:	2002      	movs	r0, #2
 8000e98:	f009 fa08 	bl	800a2ac <UTIL_SEQ_WaitEvt>
  return;
 8000e9c:	bf00      	nop
}
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <LL_EXTI_EnableIT_0_31>:
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <LL_EXTI_EnableIT_0_31+0x24>)
 8000eae:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000eb2:	4905      	ldr	r1, [pc, #20]	; (8000ec8 <LL_EXTI_EnableIT_0_31+0x24>)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	58000800 	.word	0x58000800

08000ecc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4904      	ldr	r1, [pc, #16]	; (8000eec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	600b      	str	r3, [r1, #0]

}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	58000800 	.word	0x58000800

08000ef0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <ReadRtcSsrValue+0x3c>)
 8000ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000efe:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <ReadRtcSsrValue+0x3c>)
 8000f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000f06:	e005      	b.n	8000f14 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000f0c:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <ReadRtcSsrValue+0x3c>)
 8000f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d1f5      	bne.n	8000f08 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000f1c:	683b      	ldr	r3, [r7, #0]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40002800 	.word	0x40002800

08000f30 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	460a      	mov	r2, r1
 8000f3a:	71fb      	strb	r3, [r7, #7]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000f40:	79ba      	ldrb	r2, [r7, #6]
 8000f42:	491d      	ldr	r1, [pc, #116]	; (8000fb8 <LinkTimerAfter+0x88>)
 8000f44:	4613      	mov	r3, r2
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	4413      	add	r3, r2
 8000f4a:	00db      	lsls	r3, r3, #3
 8000f4c:	440b      	add	r3, r1
 8000f4e:	3315      	adds	r3, #21
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	2b06      	cmp	r3, #6
 8000f58:	d009      	beq.n	8000f6e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000f5a:	7bfa      	ldrb	r2, [r7, #15]
 8000f5c:	4916      	ldr	r1, [pc, #88]	; (8000fb8 <LinkTimerAfter+0x88>)
 8000f5e:	4613      	mov	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	440b      	add	r3, r1
 8000f68:	3314      	adds	r3, #20
 8000f6a:	79fa      	ldrb	r2, [r7, #7]
 8000f6c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000f6e:	79fa      	ldrb	r2, [r7, #7]
 8000f70:	4911      	ldr	r1, [pc, #68]	; (8000fb8 <LinkTimerAfter+0x88>)
 8000f72:	4613      	mov	r3, r2
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	4413      	add	r3, r2
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	440b      	add	r3, r1
 8000f7c:	3315      	adds	r3, #21
 8000f7e:	7bfa      	ldrb	r2, [r7, #15]
 8000f80:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000f82:	79fa      	ldrb	r2, [r7, #7]
 8000f84:	490c      	ldr	r1, [pc, #48]	; (8000fb8 <LinkTimerAfter+0x88>)
 8000f86:	4613      	mov	r3, r2
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	4413      	add	r3, r2
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	440b      	add	r3, r1
 8000f90:	3314      	adds	r3, #20
 8000f92:	79ba      	ldrb	r2, [r7, #6]
 8000f94:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000f96:	79ba      	ldrb	r2, [r7, #6]
 8000f98:	4907      	ldr	r1, [pc, #28]	; (8000fb8 <LinkTimerAfter+0x88>)
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	4413      	add	r3, r2
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	440b      	add	r3, r1
 8000fa4:	3315      	adds	r3, #21
 8000fa6:	79fa      	ldrb	r2, [r7, #7]
 8000fa8:	701a      	strb	r2, [r3, #0]

  return;
 8000faa:	bf00      	nop
}
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000088 	.word	0x20000088

08000fbc <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	460a      	mov	r2, r1
 8000fc6:	71fb      	strb	r3, [r7, #7]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000fcc:	4b29      	ldr	r3, [pc, #164]	; (8001074 <LinkTimerBefore+0xb8>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	79ba      	ldrb	r2, [r7, #6]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d032      	beq.n	800103e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000fd8:	79ba      	ldrb	r2, [r7, #6]
 8000fda:	4927      	ldr	r1, [pc, #156]	; (8001078 <LinkTimerBefore+0xbc>)
 8000fdc:	4613      	mov	r3, r2
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	4413      	add	r3, r2
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	440b      	add	r3, r1
 8000fe6:	3314      	adds	r3, #20
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000fec:	7bfa      	ldrb	r2, [r7, #15]
 8000fee:	4922      	ldr	r1, [pc, #136]	; (8001078 <LinkTimerBefore+0xbc>)
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	4413      	add	r3, r2
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	440b      	add	r3, r1
 8000ffa:	3315      	adds	r3, #21
 8000ffc:	79fa      	ldrb	r2, [r7, #7]
 8000ffe:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001000:	79fa      	ldrb	r2, [r7, #7]
 8001002:	491d      	ldr	r1, [pc, #116]	; (8001078 <LinkTimerBefore+0xbc>)
 8001004:	4613      	mov	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	4413      	add	r3, r2
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	440b      	add	r3, r1
 800100e:	3315      	adds	r3, #21
 8001010:	79ba      	ldrb	r2, [r7, #6]
 8001012:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001014:	79fa      	ldrb	r2, [r7, #7]
 8001016:	4918      	ldr	r1, [pc, #96]	; (8001078 <LinkTimerBefore+0xbc>)
 8001018:	4613      	mov	r3, r2
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	4413      	add	r3, r2
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	440b      	add	r3, r1
 8001022:	3314      	adds	r3, #20
 8001024:	7bfa      	ldrb	r2, [r7, #15]
 8001026:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001028:	79ba      	ldrb	r2, [r7, #6]
 800102a:	4913      	ldr	r1, [pc, #76]	; (8001078 <LinkTimerBefore+0xbc>)
 800102c:	4613      	mov	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4413      	add	r3, r2
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	440b      	add	r3, r1
 8001036:	3314      	adds	r3, #20
 8001038:	79fa      	ldrb	r2, [r7, #7]
 800103a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 800103c:	e014      	b.n	8001068 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800103e:	79fa      	ldrb	r2, [r7, #7]
 8001040:	490d      	ldr	r1, [pc, #52]	; (8001078 <LinkTimerBefore+0xbc>)
 8001042:	4613      	mov	r3, r2
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	4413      	add	r3, r2
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	440b      	add	r3, r1
 800104c:	3315      	adds	r3, #21
 800104e:	79ba      	ldrb	r2, [r7, #6]
 8001050:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001052:	79ba      	ldrb	r2, [r7, #6]
 8001054:	4908      	ldr	r1, [pc, #32]	; (8001078 <LinkTimerBefore+0xbc>)
 8001056:	4613      	mov	r3, r2
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	4413      	add	r3, r2
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	440b      	add	r3, r1
 8001060:	3314      	adds	r3, #20
 8001062:	79fa      	ldrb	r2, [r7, #7]
 8001064:	701a      	strb	r2, [r3, #0]
  return;
 8001066:	bf00      	nop
}
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000118 	.word	0x20000118
 8001078:	20000088 	.word	0x20000088

0800107c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001086:	4b4e      	ldr	r3, [pc, #312]	; (80011c0 <linkTimer+0x144>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	2b06      	cmp	r3, #6
 800108e:	d118      	bne.n	80010c2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001090:	4b4b      	ldr	r3, [pc, #300]	; (80011c0 <linkTimer+0x144>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4b4b      	ldr	r3, [pc, #300]	; (80011c4 <linkTimer+0x148>)
 8001098:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800109a:	4a49      	ldr	r2, [pc, #292]	; (80011c0 <linkTimer+0x144>)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80010a0:	79fa      	ldrb	r2, [r7, #7]
 80010a2:	4949      	ldr	r1, [pc, #292]	; (80011c8 <linkTimer+0x14c>)
 80010a4:	4613      	mov	r3, r2
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	4413      	add	r3, r2
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	440b      	add	r3, r1
 80010ae:	3315      	adds	r3, #21
 80010b0:	2206      	movs	r2, #6
 80010b2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80010b4:	4b45      	ldr	r3, [pc, #276]	; (80011cc <linkTimer+0x150>)
 80010b6:	f04f 32ff 	mov.w	r2, #4294967295
 80010ba:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	81fb      	strh	r3, [r7, #14]
 80010c0:	e078      	b.n	80011b4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80010c2:	f000 f909 	bl	80012d8 <ReturnTimeElapsed>
 80010c6:	4603      	mov	r3, r0
 80010c8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80010ca:	79fa      	ldrb	r2, [r7, #7]
 80010cc:	493e      	ldr	r1, [pc, #248]	; (80011c8 <linkTimer+0x14c>)
 80010ce:	4613      	mov	r3, r2
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	4413      	add	r3, r2
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	440b      	add	r3, r1
 80010d8:	3308      	adds	r3, #8
 80010da:	6819      	ldr	r1, [r3, #0]
 80010dc:	89fb      	ldrh	r3, [r7, #14]
 80010de:	79fa      	ldrb	r2, [r7, #7]
 80010e0:	4419      	add	r1, r3
 80010e2:	4839      	ldr	r0, [pc, #228]	; (80011c8 <linkTimer+0x14c>)
 80010e4:	4613      	mov	r3, r2
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	4413      	add	r3, r2
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	4403      	add	r3, r0
 80010ee:	3308      	adds	r3, #8
 80010f0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80010f2:	79fa      	ldrb	r2, [r7, #7]
 80010f4:	4934      	ldr	r1, [pc, #208]	; (80011c8 <linkTimer+0x14c>)
 80010f6:	4613      	mov	r3, r2
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	4413      	add	r3, r2
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	440b      	add	r3, r1
 8001100:	3308      	adds	r3, #8
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001106:	4b2e      	ldr	r3, [pc, #184]	; (80011c0 <linkTimer+0x144>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	b2db      	uxtb	r3, r3
 800110c:	4619      	mov	r1, r3
 800110e:	4a2e      	ldr	r2, [pc, #184]	; (80011c8 <linkTimer+0x14c>)
 8001110:	460b      	mov	r3, r1
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	440b      	add	r3, r1
 8001116:	00db      	lsls	r3, r3, #3
 8001118:	4413      	add	r3, r2
 800111a:	3308      	adds	r3, #8
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	429a      	cmp	r2, r3
 8001122:	d337      	bcc.n	8001194 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001124:	4b26      	ldr	r3, [pc, #152]	; (80011c0 <linkTimer+0x144>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800112a:	7b7a      	ldrb	r2, [r7, #13]
 800112c:	4926      	ldr	r1, [pc, #152]	; (80011c8 <linkTimer+0x14c>)
 800112e:	4613      	mov	r3, r2
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	4413      	add	r3, r2
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	440b      	add	r3, r1
 8001138:	3315      	adds	r3, #21
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800113e:	e013      	b.n	8001168 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001140:	7b7a      	ldrb	r2, [r7, #13]
 8001142:	4921      	ldr	r1, [pc, #132]	; (80011c8 <linkTimer+0x14c>)
 8001144:	4613      	mov	r3, r2
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	4413      	add	r3, r2
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	440b      	add	r3, r1
 800114e:	3315      	adds	r3, #21
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001154:	7b7a      	ldrb	r2, [r7, #13]
 8001156:	491c      	ldr	r1, [pc, #112]	; (80011c8 <linkTimer+0x14c>)
 8001158:	4613      	mov	r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	4413      	add	r3, r2
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	440b      	add	r3, r1
 8001162:	3315      	adds	r3, #21
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001168:	7b3b      	ldrb	r3, [r7, #12]
 800116a:	2b06      	cmp	r3, #6
 800116c:	d00b      	beq.n	8001186 <linkTimer+0x10a>
 800116e:	7b3a      	ldrb	r2, [r7, #12]
 8001170:	4915      	ldr	r1, [pc, #84]	; (80011c8 <linkTimer+0x14c>)
 8001172:	4613      	mov	r3, r2
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	4413      	add	r3, r2
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	440b      	add	r3, r1
 800117c:	3308      	adds	r3, #8
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	68ba      	ldr	r2, [r7, #8]
 8001182:	429a      	cmp	r2, r3
 8001184:	d2dc      	bcs.n	8001140 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001186:	7b7a      	ldrb	r2, [r7, #13]
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff fecf 	bl	8000f30 <LinkTimerAfter>
 8001192:	e00f      	b.n	80011b4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001194:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <linkTimer+0x144>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	4611      	mov	r1, r2
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff ff0c 	bl	8000fbc <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <linkTimer+0x144>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <linkTimer+0x148>)
 80011ac:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80011ae:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <linkTimer+0x144>)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80011b4:	89fb      	ldrh	r3, [r7, #14]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000118 	.word	0x20000118
 80011c4:	20000119 	.word	0x20000119
 80011c8:	20000088 	.word	0x20000088
 80011cc:	2000011c 	.word	0x2000011c

080011d0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	460a      	mov	r2, r1
 80011da:	71fb      	strb	r3, [r7, #7]
 80011dc:	4613      	mov	r3, r2
 80011de:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80011e0:	4b39      	ldr	r3, [pc, #228]	; (80012c8 <UnlinkTimer+0xf8>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	79fa      	ldrb	r2, [r7, #7]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d111      	bne.n	8001210 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80011ec:	4b36      	ldr	r3, [pc, #216]	; (80012c8 <UnlinkTimer+0xf8>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4b36      	ldr	r3, [pc, #216]	; (80012cc <UnlinkTimer+0xfc>)
 80011f4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80011f6:	79fa      	ldrb	r2, [r7, #7]
 80011f8:	4935      	ldr	r1, [pc, #212]	; (80012d0 <UnlinkTimer+0x100>)
 80011fa:	4613      	mov	r3, r2
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	4413      	add	r3, r2
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	440b      	add	r3, r1
 8001204:	3315      	adds	r3, #21
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4b2f      	ldr	r3, [pc, #188]	; (80012c8 <UnlinkTimer+0xf8>)
 800120c:	701a      	strb	r2, [r3, #0]
 800120e:	e03e      	b.n	800128e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001210:	79fa      	ldrb	r2, [r7, #7]
 8001212:	492f      	ldr	r1, [pc, #188]	; (80012d0 <UnlinkTimer+0x100>)
 8001214:	4613      	mov	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	4413      	add	r3, r2
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	440b      	add	r3, r1
 800121e:	3314      	adds	r3, #20
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001224:	79fa      	ldrb	r2, [r7, #7]
 8001226:	492a      	ldr	r1, [pc, #168]	; (80012d0 <UnlinkTimer+0x100>)
 8001228:	4613      	mov	r3, r2
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	4413      	add	r3, r2
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	440b      	add	r3, r1
 8001232:	3315      	adds	r3, #21
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001238:	79f9      	ldrb	r1, [r7, #7]
 800123a:	7bfa      	ldrb	r2, [r7, #15]
 800123c:	4824      	ldr	r0, [pc, #144]	; (80012d0 <UnlinkTimer+0x100>)
 800123e:	460b      	mov	r3, r1
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	440b      	add	r3, r1
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	4403      	add	r3, r0
 8001248:	3315      	adds	r3, #21
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	b2d8      	uxtb	r0, r3
 800124e:	4920      	ldr	r1, [pc, #128]	; (80012d0 <UnlinkTimer+0x100>)
 8001250:	4613      	mov	r3, r2
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	4413      	add	r3, r2
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	440b      	add	r3, r1
 800125a:	3315      	adds	r3, #21
 800125c:	4602      	mov	r2, r0
 800125e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001260:	7bbb      	ldrb	r3, [r7, #14]
 8001262:	2b06      	cmp	r3, #6
 8001264:	d013      	beq.n	800128e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001266:	79f9      	ldrb	r1, [r7, #7]
 8001268:	7bba      	ldrb	r2, [r7, #14]
 800126a:	4819      	ldr	r0, [pc, #100]	; (80012d0 <UnlinkTimer+0x100>)
 800126c:	460b      	mov	r3, r1
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	440b      	add	r3, r1
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	4403      	add	r3, r0
 8001276:	3314      	adds	r3, #20
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	b2d8      	uxtb	r0, r3
 800127c:	4914      	ldr	r1, [pc, #80]	; (80012d0 <UnlinkTimer+0x100>)
 800127e:	4613      	mov	r3, r2
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	4413      	add	r3, r2
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	440b      	add	r3, r1
 8001288:	3314      	adds	r3, #20
 800128a:	4602      	mov	r2, r0
 800128c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800128e:	79fa      	ldrb	r2, [r7, #7]
 8001290:	490f      	ldr	r1, [pc, #60]	; (80012d0 <UnlinkTimer+0x100>)
 8001292:	4613      	mov	r3, r2
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	4413      	add	r3, r2
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	440b      	add	r3, r1
 800129c:	330c      	adds	r3, #12
 800129e:	2201      	movs	r2, #1
 80012a0:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <UnlinkTimer+0xf8>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	2b06      	cmp	r3, #6
 80012aa:	d107      	bne.n	80012bc <UnlinkTimer+0xec>
 80012ac:	79bb      	ldrb	r3, [r7, #6]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d104      	bne.n	80012bc <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <UnlinkTimer+0x104>)
 80012b4:	f04f 32ff 	mov.w	r2, #4294967295
 80012b8:	601a      	str	r2, [r3, #0]
  }

  return;
 80012ba:	bf00      	nop
 80012bc:	bf00      	nop
}
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	20000118 	.word	0x20000118
 80012cc:	20000119 	.word	0x20000119
 80012d0:	20000088 	.word	0x20000088
 80012d4:	2000011c 	.word	0x2000011c

080012d8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80012de:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <ReturnTimeElapsed+0x70>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e6:	d026      	beq.n	8001336 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80012e8:	f7ff fe02 	bl	8000ef0 <ReadRtcSsrValue>
 80012ec:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80012ee:	4b16      	ldr	r3, [pc, #88]	; (8001348 <ReturnTimeElapsed+0x70>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d805      	bhi.n	8001304 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80012f8:	4b13      	ldr	r3, [pc, #76]	; (8001348 <ReturnTimeElapsed+0x70>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	e00a      	b.n	800131a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <ReturnTimeElapsed+0x74>)
 8001306:	881b      	ldrh	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001310:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <ReturnTimeElapsed+0x70>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	683a      	ldr	r2, [r7, #0]
 8001316:	4413      	add	r3, r2
 8001318:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800131a:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <ReturnTimeElapsed+0x78>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	fb02 f303 	mul.w	r3, r2, r3
 8001326:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001328:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <ReturnTimeElapsed+0x7c>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	461a      	mov	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	40d3      	lsrs	r3, r2
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	e001      	b.n	800133a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	b29b      	uxth	r3, r3
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	2000011c 	.word	0x2000011c
 800134c:	2000021a 	.word	0x2000021a
 8001350:	20000219 	.word	0x20000219
 8001354:	20000218 	.word	0x20000218

08001358 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d108      	bne.n	800137a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001368:	f7ff fdc2 	bl	8000ef0 <ReadRtcSsrValue>
 800136c:	4603      	mov	r3, r0
 800136e:	4a24      	ldr	r2, [pc, #144]	; (8001400 <RestartWakeupCounter+0xa8>)
 8001370:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001372:	2003      	movs	r0, #3
 8001374:	f001 fb39 	bl	80029ea <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001378:	e03e      	b.n	80013f8 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800137a:	88fb      	ldrh	r3, [r7, #6]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d803      	bhi.n	8001388 <RestartWakeupCounter+0x30>
 8001380:	4b20      	ldr	r3, [pc, #128]	; (8001404 <RestartWakeupCounter+0xac>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d002      	beq.n	800138e <RestartWakeupCounter+0x36>
      Value -= 1;
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	3b01      	subs	r3, #1
 800138c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800138e:	bf00      	nop
 8001390:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <RestartWakeupCounter+0xb0>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	f003 0304 	and.w	r3, r3, #4
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0f7      	beq.n	8001390 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80013a0:	4b19      	ldr	r3, [pc, #100]	; (8001408 <RestartWakeupCounter+0xb0>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4b17      	ldr	r3, [pc, #92]	; (8001408 <RestartWakeupCounter+0xb0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80013b4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <RestartWakeupCounter+0xb4>)
 80013b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013bc:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80013be:	2003      	movs	r0, #3
 80013c0:	f001 fb21 	bl	8002a06 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <RestartWakeupCounter+0xb8>)
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	0c1b      	lsrs	r3, r3, #16
 80013ca:	041b      	lsls	r3, r3, #16
 80013cc:	88fa      	ldrh	r2, [r7, #6]
 80013ce:	4910      	ldr	r1, [pc, #64]	; (8001410 <RestartWakeupCounter+0xb8>)
 80013d0:	4313      	orrs	r3, r2
 80013d2:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80013d4:	f7ff fd8c 	bl	8000ef0 <ReadRtcSsrValue>
 80013d8:	4603      	mov	r3, r0
 80013da:	4a09      	ldr	r2, [pc, #36]	; (8001400 <RestartWakeupCounter+0xa8>)
 80013dc:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 80013de:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <RestartWakeupCounter+0xb0>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	689a      	ldr	r2, [r3, #8]
 80013e6:	4b08      	ldr	r3, [pc, #32]	; (8001408 <RestartWakeupCounter+0xb0>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80013f0:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80013f2:	f3af 8000 	nop.w
  return ;
 80013f6:	bf00      	nop
}
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	2000011c 	.word	0x2000011c
 8001404:	20000218 	.word	0x20000218
 8001408:	20000214 	.word	0x20000214
 800140c:	58000800 	.word	0x58000800
 8001410:	40002800 	.word	0x40002800

08001414 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800141a:	4b47      	ldr	r3, [pc, #284]	; (8001538 <RescheduleTimerList+0x124>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001426:	d108      	bne.n	800143a <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001428:	bf00      	nop
 800142a:	4b44      	ldr	r3, [pc, #272]	; (800153c <RescheduleTimerList+0x128>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	f003 0304 	and.w	r3, r3, #4
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f7      	bne.n	800142a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800143a:	4b40      	ldr	r3, [pc, #256]	; (800153c <RescheduleTimerList+0x128>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	689a      	ldr	r2, [r3, #8]
 8001442:	4b3e      	ldr	r3, [pc, #248]	; (800153c <RescheduleTimerList+0x128>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800144c:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800144e:	4b3c      	ldr	r3, [pc, #240]	; (8001540 <RescheduleTimerList+0x12c>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001454:	7bfa      	ldrb	r2, [r7, #15]
 8001456:	493b      	ldr	r1, [pc, #236]	; (8001544 <RescheduleTimerList+0x130>)
 8001458:	4613      	mov	r3, r2
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4413      	add	r3, r2
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	440b      	add	r3, r1
 8001462:	3308      	adds	r3, #8
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001468:	f7ff ff36 	bl	80012d8 <ReturnTimeElapsed>
 800146c:	4603      	mov	r3, r0
 800146e:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001470:	88fb      	ldrh	r3, [r7, #6]
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	429a      	cmp	r2, r3
 8001476:	d205      	bcs.n	8001484 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800147c:	4b32      	ldr	r3, [pc, #200]	; (8001548 <RescheduleTimerList+0x134>)
 800147e:	2201      	movs	r2, #1
 8001480:	701a      	strb	r2, [r3, #0]
 8001482:	e04d      	b.n	8001520 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001484:	88fb      	ldrh	r3, [r7, #6]
 8001486:	4a31      	ldr	r2, [pc, #196]	; (800154c <RescheduleTimerList+0x138>)
 8001488:	8812      	ldrh	r2, [r2, #0]
 800148a:	b292      	uxth	r2, r2
 800148c:	4413      	add	r3, r2
 800148e:	461a      	mov	r2, r3
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	4293      	cmp	r3, r2
 8001494:	d906      	bls.n	80014a4 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001496:	4b2d      	ldr	r3, [pc, #180]	; (800154c <RescheduleTimerList+0x138>)
 8001498:	881b      	ldrh	r3, [r3, #0]
 800149a:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800149c:	4b2a      	ldr	r3, [pc, #168]	; (8001548 <RescheduleTimerList+0x134>)
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
 80014a2:	e03d      	b.n	8001520 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	88fb      	ldrh	r3, [r7, #6]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80014ae:	4b26      	ldr	r3, [pc, #152]	; (8001548 <RescheduleTimerList+0x134>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80014b4:	e034      	b.n	8001520 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80014b6:	7bfa      	ldrb	r2, [r7, #15]
 80014b8:	4922      	ldr	r1, [pc, #136]	; (8001544 <RescheduleTimerList+0x130>)
 80014ba:	4613      	mov	r3, r2
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	4413      	add	r3, r2
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	440b      	add	r3, r1
 80014c4:	3308      	adds	r3, #8
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	88fb      	ldrh	r3, [r7, #6]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d20a      	bcs.n	80014e4 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80014ce:	7bfa      	ldrb	r2, [r7, #15]
 80014d0:	491c      	ldr	r1, [pc, #112]	; (8001544 <RescheduleTimerList+0x130>)
 80014d2:	4613      	mov	r3, r2
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	4413      	add	r3, r2
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	440b      	add	r3, r1
 80014dc:	3308      	adds	r3, #8
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	e013      	b.n	800150c <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80014e4:	7bfa      	ldrb	r2, [r7, #15]
 80014e6:	4917      	ldr	r1, [pc, #92]	; (8001544 <RescheduleTimerList+0x130>)
 80014e8:	4613      	mov	r3, r2
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	4413      	add	r3, r2
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	440b      	add	r3, r1
 80014f2:	3308      	adds	r3, #8
 80014f4:	6819      	ldr	r1, [r3, #0]
 80014f6:	88fb      	ldrh	r3, [r7, #6]
 80014f8:	7bfa      	ldrb	r2, [r7, #15]
 80014fa:	1ac9      	subs	r1, r1, r3
 80014fc:	4811      	ldr	r0, [pc, #68]	; (8001544 <RescheduleTimerList+0x130>)
 80014fe:	4613      	mov	r3, r2
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	4413      	add	r3, r2
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	4403      	add	r3, r0
 8001508:	3308      	adds	r3, #8
 800150a:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800150c:	7bfa      	ldrb	r2, [r7, #15]
 800150e:	490d      	ldr	r1, [pc, #52]	; (8001544 <RescheduleTimerList+0x130>)
 8001510:	4613      	mov	r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4413      	add	r3, r2
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	440b      	add	r3, r1
 800151a:	3315      	adds	r3, #21
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	2b06      	cmp	r3, #6
 8001524:	d1c7      	bne.n	80014b6 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001526:	89bb      	ldrh	r3, [r7, #12]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff15 	bl	8001358 <RestartWakeupCounter>

  return ;
 800152e:	bf00      	nop
}
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40002800 	.word	0x40002800
 800153c:	20000214 	.word	0x20000214
 8001540:	20000118 	.word	0x20000118
 8001544:	20000088 	.word	0x20000088
 8001548:	20000120 	.word	0x20000120
 800154c:	2000021c 	.word	0x2000021c

08001550 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	; 0x28
 8001554:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001556:	f3ef 8310 	mrs	r3, PRIMASK
 800155a:	617b      	str	r3, [r7, #20]
  return(result);
 800155c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001560:	b672      	cpsid	i
}
 8001562:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001564:	4b5f      	ldr	r3, [pc, #380]	; (80016e4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	22ca      	movs	r2, #202	; 0xca
 800156c:	625a      	str	r2, [r3, #36]	; 0x24
 800156e:	4b5d      	ldr	r3, [pc, #372]	; (80016e4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2253      	movs	r2, #83	; 0x53
 8001576:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8001578:	4b5a      	ldr	r3, [pc, #360]	; (80016e4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	4b58      	ldr	r3, [pc, #352]	; (80016e4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800158a:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 800158c:	4b56      	ldr	r3, [pc, #344]	; (80016e8 <HW_TS_RTC_Wakeup_Handler+0x198>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001594:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001598:	4954      	ldr	r1, [pc, #336]	; (80016ec <HW_TS_RTC_Wakeup_Handler+0x19c>)
 800159a:	4613      	mov	r3, r2
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	4413      	add	r3, r2
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	440b      	add	r3, r1
 80015a4:	330c      	adds	r3, #12
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d172      	bne.n	8001694 <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80015ae:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80015b2:	494e      	ldr	r1, [pc, #312]	; (80016ec <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80015b4:	4613      	mov	r3, r2
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	4413      	add	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	440b      	add	r3, r1
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80015c2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80015c6:	4949      	ldr	r1, [pc, #292]	; (80016ec <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80015c8:	4613      	mov	r3, r2
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4413      	add	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	440b      	add	r3, r1
 80015d2:	3310      	adds	r3, #16
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80015d8:	4b45      	ldr	r3, [pc, #276]	; (80016f0 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d050      	beq.n	8001684 <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80015e2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80015e6:	4941      	ldr	r1, [pc, #260]	; (80016ec <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80015e8:	4613      	mov	r3, r2
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4413      	add	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	440b      	add	r3, r1
 80015f2:	330d      	adds	r3, #13
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d126      	bne.n	800164a <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80015fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001600:	2101      	movs	r1, #1
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fde4 	bl	80011d0 <UnlinkTimer>
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	f383 8810 	msr	PRIMASK, r3
}
 8001612:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001614:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001618:	4934      	ldr	r1, [pc, #208]	; (80016ec <HW_TS_RTC_Wakeup_Handler+0x19c>)
 800161a:	4613      	mov	r3, r2
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	4413      	add	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	440b      	add	r3, r1
 8001624:	3304      	adds	r3, #4
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800162c:	4611      	mov	r1, r2
 800162e:	4618      	mov	r0, r3
 8001630:	f000 f9d4 	bl	80019dc <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001634:	4b2b      	ldr	r3, [pc, #172]	; (80016e4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	22ca      	movs	r2, #202	; 0xca
 800163c:	625a      	str	r2, [r3, #36]	; 0x24
 800163e:	4b29      	ldr	r3, [pc, #164]	; (80016e4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2253      	movs	r2, #83	; 0x53
 8001646:	625a      	str	r2, [r3, #36]	; 0x24
 8001648:	e014      	b.n	8001674 <HW_TS_RTC_Wakeup_Handler+0x124>
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f383 8810 	msr	PRIMASK, r3
}
 8001654:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001656:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800165a:	4618      	mov	r0, r3
 800165c:	f000 f932 	bl	80018c4 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001660:	4b20      	ldr	r3, [pc, #128]	; (80016e4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	22ca      	movs	r2, #202	; 0xca
 8001668:	625a      	str	r2, [r3, #36]	; 0x24
 800166a:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2253      	movs	r2, #83	; 0x53
 8001672:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001674:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001678:	69fa      	ldr	r2, [r7, #28]
 800167a:	4619      	mov	r1, r3
 800167c:	69b8      	ldr	r0, [r7, #24]
 800167e:	f000 fa35 	bl	8001aec <HW_TS_RTC_Int_AppNot>
 8001682:	e025      	b.n	80016d0 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 8001684:	f7ff fec6 	bl	8001414 <RescheduleTimerList>
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	f383 8810 	msr	PRIMASK, r3
}
 8001692:	e01d      	b.n	80016d0 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001694:	bf00      	nop
 8001696:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0f7      	beq.n	8001696 <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80016a6:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80016ba:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80016bc:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 80016be:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80016c2:	60da      	str	r2, [r3, #12]
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f383 8810 	msr	PRIMASK, r3
}
 80016ce:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	22ff      	movs	r2, #255	; 0xff
 80016d8:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 80016da:	bf00      	nop
}
 80016dc:	3728      	adds	r7, #40	; 0x28
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000214 	.word	0x20000214
 80016e8:	20000118 	.word	0x20000118
 80016ec:	20000088 	.word	0x20000088
 80016f0:	20000120 	.word	0x20000120
 80016f4:	58000800 	.word	0x58000800

080016f8 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b088      	sub	sp, #32
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	6039      	str	r1, [r7, #0]
 8001702:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001704:	4a64      	ldr	r2, [pc, #400]	; (8001898 <HW_TS_Init+0x1a0>)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800170a:	4b63      	ldr	r3, [pc, #396]	; (8001898 <HW_TS_Init+0x1a0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	22ca      	movs	r2, #202	; 0xca
 8001712:	625a      	str	r2, [r3, #36]	; 0x24
 8001714:	4b60      	ldr	r3, [pc, #384]	; (8001898 <HW_TS_Init+0x1a0>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2253      	movs	r2, #83	; 0x53
 800171c:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800171e:	4b5f      	ldr	r3, [pc, #380]	; (800189c <HW_TS_Init+0x1a4>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	4a5e      	ldr	r2, [pc, #376]	; (800189c <HW_TS_Init+0x1a4>)
 8001724:	f043 0320 	orr.w	r3, r3, #32
 8001728:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800172a:	4b5c      	ldr	r3, [pc, #368]	; (800189c <HW_TS_Init+0x1a4>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	b2db      	uxtb	r3, r3
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	b2db      	uxtb	r3, r3
 8001736:	f1c3 0304 	rsb	r3, r3, #4
 800173a:	b2da      	uxtb	r2, r3
 800173c:	4b58      	ldr	r3, [pc, #352]	; (80018a0 <HW_TS_Init+0x1a8>)
 800173e:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001740:	4b56      	ldr	r3, [pc, #344]	; (800189c <HW_TS_Init+0x1a4>)
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001748:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800174c:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	fa92 f2a2 	rbit	r2, r2
 8001754:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	2a00      	cmp	r2, #0
 800175e:	d101      	bne.n	8001764 <HW_TS_Init+0x6c>
  {
    return 32U;
 8001760:	2220      	movs	r2, #32
 8001762:	e003      	b.n	800176c <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	fab2 f282 	clz	r2, r2
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	40d3      	lsrs	r3, r2
 800176e:	b2db      	uxtb	r3, r3
 8001770:	3301      	adds	r3, #1
 8001772:	b2da      	uxtb	r2, r3
 8001774:	4b4b      	ldr	r3, [pc, #300]	; (80018a4 <HW_TS_Init+0x1ac>)
 8001776:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001778:	4b48      	ldr	r3, [pc, #288]	; (800189c <HW_TS_Init+0x1a4>)
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	b29b      	uxth	r3, r3
 800177e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001782:	b29b      	uxth	r3, r3
 8001784:	3301      	adds	r3, #1
 8001786:	b29a      	uxth	r2, r3
 8001788:	4b47      	ldr	r3, [pc, #284]	; (80018a8 <HW_TS_Init+0x1b0>)
 800178a:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800178c:	4b46      	ldr	r3, [pc, #280]	; (80018a8 <HW_TS_Init+0x1b0>)
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	3b01      	subs	r3, #1
 8001792:	4a44      	ldr	r2, [pc, #272]	; (80018a4 <HW_TS_Init+0x1ac>)
 8001794:	7812      	ldrb	r2, [r2, #0]
 8001796:	fb02 f303 	mul.w	r3, r2, r3
 800179a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800179e:	4a40      	ldr	r2, [pc, #256]	; (80018a0 <HW_TS_Init+0x1a8>)
 80017a0:	7812      	ldrb	r2, [r2, #0]
 80017a2:	40d3      	lsrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d904      	bls.n	80017ba <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80017b0:	4b3e      	ldr	r3, [pc, #248]	; (80018ac <HW_TS_Init+0x1b4>)
 80017b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017b6:	801a      	strh	r2, [r3, #0]
 80017b8:	e003      	b.n	80017c2 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	b29a      	uxth	r2, r3
 80017be:	4b3b      	ldr	r3, [pc, #236]	; (80018ac <HW_TS_Init+0x1b4>)
 80017c0:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80017c2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80017c6:	f7ff fb81 	bl	8000ecc <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80017ca:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80017ce:	f7ff fb69 	bl	8000ea4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d143      	bne.n	8001860 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80017d8:	4b35      	ldr	r3, [pc, #212]	; (80018b0 <HW_TS_Init+0x1b8>)
 80017da:	2201      	movs	r2, #1
 80017dc:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80017de:	4b35      	ldr	r3, [pc, #212]	; (80018b4 <HW_TS_Init+0x1bc>)
 80017e0:	f04f 32ff 	mov.w	r2, #4294967295
 80017e4:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80017e6:	2300      	movs	r3, #0
 80017e8:	77fb      	strb	r3, [r7, #31]
 80017ea:	e00c      	b.n	8001806 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80017ec:	7ffa      	ldrb	r2, [r7, #31]
 80017ee:	4932      	ldr	r1, [pc, #200]	; (80018b8 <HW_TS_Init+0x1c0>)
 80017f0:	4613      	mov	r3, r2
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	4413      	add	r3, r2
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	440b      	add	r3, r1
 80017fa:	330c      	adds	r3, #12
 80017fc:	2200      	movs	r2, #0
 80017fe:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001800:	7ffb      	ldrb	r3, [r7, #31]
 8001802:	3301      	adds	r3, #1
 8001804:	77fb      	strb	r3, [r7, #31]
 8001806:	7ffb      	ldrb	r3, [r7, #31]
 8001808:	2b05      	cmp	r3, #5
 800180a:	d9ef      	bls.n	80017ec <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800180c:	4b2b      	ldr	r3, [pc, #172]	; (80018bc <HW_TS_Init+0x1c4>)
 800180e:	2206      	movs	r2, #6
 8001810:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8001812:	4b21      	ldr	r3, [pc, #132]	; (8001898 <HW_TS_Init+0x1a0>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <HW_TS_Init+0x1a0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001824:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001826:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <HW_TS_Init+0x1a0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	b2da      	uxtb	r2, r3
 8001830:	4b19      	ldr	r3, [pc, #100]	; (8001898 <HW_TS_Init+0x1a0>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800183a:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800183c:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <HW_TS_Init+0x1c8>)
 800183e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001842:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001844:	2003      	movs	r0, #3
 8001846:	f001 f8de 	bl	8002a06 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800184a:	4b13      	ldr	r3, [pc, #76]	; (8001898 <HW_TS_Init+0x1a0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	4b11      	ldr	r3, [pc, #68]	; (8001898 <HW_TS_Init+0x1a0>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	e00a      	b.n	8001876 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001860:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <HW_TS_Init+0x1a0>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800186c:	2b00      	cmp	r3, #0
 800186e:	d002      	beq.n	8001876 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001870:	2003      	movs	r0, #3
 8001872:	f001 f8ba 	bl	80029ea <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001876:	4b08      	ldr	r3, [pc, #32]	; (8001898 <HW_TS_Init+0x1a0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	22ff      	movs	r2, #255	; 0xff
 800187e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001880:	2200      	movs	r2, #0
 8001882:	2103      	movs	r1, #3
 8001884:	2003      	movs	r0, #3
 8001886:	f001 f86e 	bl	8002966 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800188a:	2003      	movs	r0, #3
 800188c:	f001 f885 	bl	800299a <HAL_NVIC_EnableIRQ>

  return;
 8001890:	bf00      	nop
}
 8001892:	3720      	adds	r7, #32
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000214 	.word	0x20000214
 800189c:	40002800 	.word	0x40002800
 80018a0:	20000218 	.word	0x20000218
 80018a4:	20000219 	.word	0x20000219
 80018a8:	2000021a 	.word	0x2000021a
 80018ac:	2000021c 	.word	0x2000021c
 80018b0:	20000120 	.word	0x20000120
 80018b4:	2000011c 	.word	0x2000011c
 80018b8:	20000088 	.word	0x20000088
 80018bc:	20000118 	.word	0x20000118
 80018c0:	58000800 	.word	0x58000800

080018c4 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018ce:	f3ef 8310 	mrs	r3, PRIMASK
 80018d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80018d4:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80018d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80018d8:	b672      	cpsid	i
}
 80018da:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80018dc:	2003      	movs	r0, #3
 80018de:	f001 f86a 	bl	80029b6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80018e2:	4b38      	ldr	r3, [pc, #224]	; (80019c4 <HW_TS_Stop+0x100>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	22ca      	movs	r2, #202	; 0xca
 80018ea:	625a      	str	r2, [r3, #36]	; 0x24
 80018ec:	4b35      	ldr	r3, [pc, #212]	; (80019c4 <HW_TS_Stop+0x100>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2253      	movs	r2, #83	; 0x53
 80018f4:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80018f6:	79fa      	ldrb	r2, [r7, #7]
 80018f8:	4933      	ldr	r1, [pc, #204]	; (80019c8 <HW_TS_Stop+0x104>)
 80018fa:	4613      	mov	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	4413      	add	r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	440b      	add	r3, r1
 8001904:	330c      	adds	r3, #12
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d148      	bne.n	80019a0 <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	2100      	movs	r1, #0
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fc5c 	bl	80011d0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001918:	4b2c      	ldr	r3, [pc, #176]	; (80019cc <HW_TS_Stop+0x108>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800191e:	7cfb      	ldrb	r3, [r7, #19]
 8001920:	2b06      	cmp	r3, #6
 8001922:	d135      	bne.n	8001990 <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001924:	4b2a      	ldr	r3, [pc, #168]	; (80019d0 <HW_TS_Stop+0x10c>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800192c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001930:	d108      	bne.n	8001944 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001932:	bf00      	nop
 8001934:	4b23      	ldr	r3, [pc, #140]	; (80019c4 <HW_TS_Stop+0x100>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1f7      	bne.n	8001934 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001944:	4b1f      	ldr	r3, [pc, #124]	; (80019c4 <HW_TS_Stop+0x100>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	4b1d      	ldr	r3, [pc, #116]	; (80019c4 <HW_TS_Stop+0x100>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001956:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001958:	bf00      	nop
 800195a:	4b1a      	ldr	r3, [pc, #104]	; (80019c4 <HW_TS_Stop+0x100>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	f003 0304 	and.w	r3, r3, #4
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0f7      	beq.n	800195a <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800196a:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <HW_TS_Stop+0x100>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	b2da      	uxtb	r2, r3
 8001974:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <HW_TS_Stop+0x100>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800197e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001980:	4b14      	ldr	r3, [pc, #80]	; (80019d4 <HW_TS_Stop+0x110>)
 8001982:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001986:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001988:	2003      	movs	r0, #3
 800198a:	f001 f83c 	bl	8002a06 <HAL_NVIC_ClearPendingIRQ>
 800198e:	e007      	b.n	80019a0 <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001990:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <HW_TS_Stop+0x114>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	7cfa      	ldrb	r2, [r7, #19]
 8001998:	429a      	cmp	r2, r3
 800199a:	d001      	beq.n	80019a0 <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 800199c:	f7ff fd3a 	bl	8001414 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <HW_TS_Stop+0x100>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	22ff      	movs	r2, #255	; 0xff
 80019a8:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80019aa:	2003      	movs	r0, #3
 80019ac:	f000 fff5 	bl	800299a <HAL_NVIC_EnableIRQ>
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	f383 8810 	msr	PRIMASK, r3
}
 80019ba:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80019bc:	bf00      	nop
}
 80019be:	3718      	adds	r7, #24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000214 	.word	0x20000214
 80019c8:	20000088 	.word	0x20000088
 80019cc:	20000118 	.word	0x20000118
 80019d0:	40002800 	.word	0x40002800
 80019d4:	58000800 	.word	0x58000800
 80019d8:	20000119 	.word	0x20000119

080019dc <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	6039      	str	r1, [r7, #0]
 80019e6:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80019e8:	79fa      	ldrb	r2, [r7, #7]
 80019ea:	493c      	ldr	r1, [pc, #240]	; (8001adc <HW_TS_Start+0x100>)
 80019ec:	4613      	mov	r3, r2
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	4413      	add	r3, r2
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	440b      	add	r3, r1
 80019f6:	330c      	adds	r3, #12
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d103      	bne.n	8001a08 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff ff5e 	bl	80018c4 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a08:	f3ef 8310 	mrs	r3, PRIMASK
 8001a0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001a10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a12:	b672      	cpsid	i
}
 8001a14:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001a16:	2003      	movs	r0, #3
 8001a18:	f000 ffcd 	bl	80029b6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001a1c:	4b30      	ldr	r3, [pc, #192]	; (8001ae0 <HW_TS_Start+0x104>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	22ca      	movs	r2, #202	; 0xca
 8001a24:	625a      	str	r2, [r3, #36]	; 0x24
 8001a26:	4b2e      	ldr	r3, [pc, #184]	; (8001ae0 <HW_TS_Start+0x104>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2253      	movs	r2, #83	; 0x53
 8001a2e:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001a30:	79fa      	ldrb	r2, [r7, #7]
 8001a32:	492a      	ldr	r1, [pc, #168]	; (8001adc <HW_TS_Start+0x100>)
 8001a34:	4613      	mov	r3, r2
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	4413      	add	r3, r2
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	440b      	add	r3, r1
 8001a3e:	330c      	adds	r3, #12
 8001a40:	2202      	movs	r2, #2
 8001a42:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001a44:	79fa      	ldrb	r2, [r7, #7]
 8001a46:	4925      	ldr	r1, [pc, #148]	; (8001adc <HW_TS_Start+0x100>)
 8001a48:	4613      	mov	r3, r2
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	4413      	add	r3, r2
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	440b      	add	r3, r1
 8001a52:	3308      	adds	r3, #8
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001a58:	79fa      	ldrb	r2, [r7, #7]
 8001a5a:	4920      	ldr	r1, [pc, #128]	; (8001adc <HW_TS_Start+0x100>)
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	4413      	add	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	440b      	add	r3, r1
 8001a66:	3304      	adds	r3, #4
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fb04 	bl	800107c <linkTimer>
 8001a74:	4603      	mov	r3, r0
 8001a76:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001a78:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <HW_TS_Start+0x108>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001a7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ae8 <HW_TS_Start+0x10c>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	7c7a      	ldrb	r2, [r7, #17]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d002      	beq.n	8001a90 <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 8001a8a:	f7ff fcc3 	bl	8001414 <RescheduleTimerList>
 8001a8e:	e013      	b.n	8001ab8 <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001a90:	79fa      	ldrb	r2, [r7, #7]
 8001a92:	4912      	ldr	r1, [pc, #72]	; (8001adc <HW_TS_Start+0x100>)
 8001a94:	4613      	mov	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	4413      	add	r3, r2
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	440b      	add	r3, r1
 8001a9e:	3308      	adds	r3, #8
 8001aa0:	6819      	ldr	r1, [r3, #0]
 8001aa2:	8a7b      	ldrh	r3, [r7, #18]
 8001aa4:	79fa      	ldrb	r2, [r7, #7]
 8001aa6:	1ac9      	subs	r1, r1, r3
 8001aa8:	480c      	ldr	r0, [pc, #48]	; (8001adc <HW_TS_Start+0x100>)
 8001aaa:	4613      	mov	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4413      	add	r3, r2
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	4403      	add	r3, r0
 8001ab4:	3308      	adds	r3, #8
 8001ab6:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001ab8:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <HW_TS_Start+0x104>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	22ff      	movs	r2, #255	; 0xff
 8001ac0:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001ac2:	2003      	movs	r0, #3
 8001ac4:	f000 ff69 	bl	800299a <HAL_NVIC_EnableIRQ>
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	f383 8810 	msr	PRIMASK, r3
}
 8001ad2:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001ad4:	bf00      	nop
}
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000088 	.word	0x20000088
 8001ae0:	20000214 	.word	0x20000214
 8001ae4:	20000118 	.word	0x20000118
 8001ae8:	20000119 	.word	0x20000119

08001aec <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	460b      	mov	r3, r1
 8001af6:	607a      	str	r2, [r7, #4]
 8001af8:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4798      	blx	r3

  return;
 8001afe:	bf00      	nop
}
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60b9      	str	r1, [r7, #8]
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	4603      	mov	r3, r0
 8001b14:	73fb      	strb	r3, [r7, #15]
 8001b16:	4613      	mov	r3, r2
 8001b18:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d10e      	bne.n	8001b46 <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8001b28:	4a17      	ldr	r2, [pc, #92]	; (8001b88 <HW_UART_Transmit_DMA+0x80>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8001b2e:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <HW_UART_Transmit_DMA+0x84>)
 8001b30:	4a17      	ldr	r2, [pc, #92]	; (8001b90 <HW_UART_Transmit_DMA+0x88>)
 8001b32:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8001b34:	89bb      	ldrh	r3, [r7, #12]
 8001b36:	461a      	mov	r2, r3
 8001b38:	68b9      	ldr	r1, [r7, #8]
 8001b3a:	4814      	ldr	r0, [pc, #80]	; (8001b8c <HW_UART_Transmit_DMA+0x84>)
 8001b3c:	f003 fd2a 	bl	8005594 <HAL_UART_Transmit_DMA>
 8001b40:	4603      	mov	r3, r0
 8001b42:	75fb      	strb	r3, [r7, #23]
            break;
 8001b44:	e000      	b.n	8001b48 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8001b46:	bf00      	nop
    }

    switch (hal_status)
 8001b48:	7dfb      	ldrb	r3, [r7, #23]
 8001b4a:	2b03      	cmp	r3, #3
 8001b4c:	d816      	bhi.n	8001b7c <HW_UART_Transmit_DMA+0x74>
 8001b4e:	a201      	add	r2, pc, #4	; (adr r2, 8001b54 <HW_UART_Transmit_DMA+0x4c>)
 8001b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b54:	08001b65 	.word	0x08001b65
 8001b58:	08001b6b 	.word	0x08001b6b
 8001b5c:	08001b71 	.word	0x08001b71
 8001b60:	08001b77 	.word	0x08001b77
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8001b64:	2300      	movs	r3, #0
 8001b66:	75bb      	strb	r3, [r7, #22]
            break;
 8001b68:	e009      	b.n	8001b7e <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	75bb      	strb	r3, [r7, #22]
            break;
 8001b6e:	e006      	b.n	8001b7e <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8001b70:	2302      	movs	r3, #2
 8001b72:	75bb      	strb	r3, [r7, #22]
            break;
 8001b74:	e003      	b.n	8001b7e <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8001b76:	2303      	movs	r3, #3
 8001b78:	75bb      	strb	r3, [r7, #22]
            break;
 8001b7a:	e000      	b.n	8001b7e <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8001b7c:	bf00      	nop
    }

    return hw_status;
 8001b7e:	7dbb      	ldrb	r3, [r7, #22]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20001370 	.word	0x20001370
 8001b8c:	20001470 	.word	0x20001470
 8001b90:	40013800 	.word	0x40013800

08001b94 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <HAL_UART_TxCpltCallback+0x34>)
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d107      	bne.n	8001bb8 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8001ba8:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <HAL_UART_TxCpltCallback+0x38>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d005      	beq.n	8001bbc <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8001bb0:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_UART_TxCpltCallback+0x38>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4798      	blx	r3
            }
            break;
 8001bb6:	e001      	b.n	8001bbc <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8001bb8:	bf00      	nop
 8001bba:	e000      	b.n	8001bbe <HAL_UART_TxCpltCallback+0x2a>
            break;
 8001bbc:	bf00      	nop
    }

    return;
 8001bbe:	bf00      	nop
}
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40013800 	.word	0x40013800
 8001bcc:	20001370 	.word	0x20001370

08001bd0 <LL_RCC_LSE_SetDriveCapability>:
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be0:	f023 0218 	bic.w	r2, r3, #24
 8001be4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <LL_AHB1_GRP1_EnableClock>:
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001c0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c20:	68fb      	ldr	r3, [r7, #12]
}
 8001c22:	bf00      	nop
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <LL_AHB2_GRP1_EnableClock>:
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b085      	sub	sp, #20
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c52:	68fb      	ldr	r3, [r7, #12]
}
 8001c54:	bf00      	nop
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c64:	f000 fcb2 	bl	80025cc <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001c68:	f7fe fef6 	bl	8000a58 <MX_APPE_Config>

  /* Configure the system clock */
  SystemClock_Config();
 8001c6c:	f000 f816 	bl	8001c9c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001c70:	f000 f876 	bl	8001d60 <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8001c74:	f000 f894 	bl	8001da0 <MX_IPCC_Init>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c78:	f000 f952 	bl	8001f20 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c7c:	f000 f92e 	bl	8001edc <MX_DMA_Init>
  MX_RF_Init();
 8001c80:	f000 f8a2 	bl	8001dc8 <MX_RF_Init>
  MX_RTC_Init();
 8001c84:	f000 f8a8 	bl	8001dd8 <MX_RTC_Init>

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001c88:	f7fe fef4 	bl	8000a74 <MX_APPE_Init>

  /* Infinite loop */
  while (1)
  {
    MX_APPE_Process();
 8001c8c:	f7ff f8cc 	bl	8000e28 <MX_APPE_Process>

    UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001c90:	f04f 30ff 	mov.w	r0, #4294967295
 8001c94:	f008 f972 	bl	8009f7c <UTIL_SEQ_Run>
    MX_APPE_Process();
 8001c98:	e7f8      	b.n	8001c8c <main+0x2c>
	...

08001c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b09a      	sub	sp, #104	; 0x68
 8001ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ca2:	f107 0320 	add.w	r3, r7, #32
 8001ca6:	2248      	movs	r2, #72	; 0x48
 8001ca8:	2100      	movs	r1, #0
 8001caa:	4618      	mov	r0, r3
 8001cac:	f008 fbcc 	bl	800a448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	609a      	str	r2, [r3, #8]
 8001cba:	60da      	str	r2, [r3, #12]
 8001cbc:	611a      	str	r2, [r3, #16]
 8001cbe:	615a      	str	r2, [r3, #20]
 8001cc0:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001cc2:	f001 fc65 	bl	8003590 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	f7ff ff82 	bl	8001bd0 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ccc:	4b23      	ldr	r3, [pc, #140]	; (8001d5c <SystemClock_Config+0xc0>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cd4:	4a21      	ldr	r2, [pc, #132]	; (8001d5c <SystemClock_Config+0xc0>)
 8001cd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cda:	6013      	str	r3, [r2, #0]
 8001cdc:	4b1f      	ldr	r3, [pc, #124]	; (8001d5c <SystemClock_Config+0xc0>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ce4:	603b      	str	r3, [r7, #0]
 8001ce6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001ce8:	2327      	movs	r3, #39	; 0x27
 8001cea:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d00:	2340      	movs	r3, #64	; 0x40
 8001d02:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001d04:	2300      	movs	r3, #0
 8001d06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001d08:	23a0      	movs	r3, #160	; 0xa0
 8001d0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d10:	f107 0320 	add.w	r3, r7, #32
 8001d14:	4618      	mov	r0, r3
 8001d16:	f001 ffcf 	bl	8003cb8 <HAL_RCC_OscConfig>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001d20:	f000 f92a 	bl	8001f78 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001d24:	236f      	movs	r3, #111	; 0x6f
 8001d26:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d30:	2300      	movs	r3, #0
 8001d32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d40:	1d3b      	adds	r3, r7, #4
 8001d42:	2101      	movs	r1, #1
 8001d44:	4618      	mov	r0, r3
 8001d46:	f002 fb43 	bl	80043d0 <HAL_RCC_ClockConfig>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001d50:	f000 f912 	bl	8001f78 <Error_Handler>
  }
}
 8001d54:	bf00      	nop
 8001d56:	3768      	adds	r7, #104	; 0x68
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	58000400 	.word	0x58000400

08001d60 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b094      	sub	sp, #80	; 0x50
 8001d64:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d66:	463b      	mov	r3, r7
 8001d68:	2250      	movs	r2, #80	; 0x50
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f008 fb6b 	bl	800a448 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001d72:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001d76:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001d78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d7c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001d82:	2310      	movs	r3, #16
 8001d84:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d86:	463b      	mov	r3, r7
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f002 ff62 	bl	8004c52 <HAL_RCCEx_PeriphCLKConfig>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001d94:	f000 f8f0 	bl	8001f78 <Error_Handler>
  }
}
 8001d98:	bf00      	nop
 8001d9a:	3750      	adds	r7, #80	; 0x50
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  hipcc.Instance = IPCC;
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <MX_IPCC_Init+0x20>)
 8001da6:	4a07      	ldr	r2, [pc, #28]	; (8001dc4 <MX_IPCC_Init+0x24>)
 8001da8:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001daa:	4805      	ldr	r0, [pc, #20]	; (8001dc0 <MX_IPCC_Init+0x20>)
 8001dac:	f001 fb6a 	bl	8003484 <HAL_IPCC_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001db6:	f000 f8df 	bl	8001f78 <Error_Handler>
  }
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20001374 	.word	0x20001374
 8001dc4:	58000c00 	.word	0x58000c00

08001dc8 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0

}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ddc:	4b16      	ldr	r3, [pc, #88]	; (8001e38 <MX_RTC_Init+0x60>)
 8001dde:	4a17      	ldr	r2, [pc, #92]	; (8001e3c <MX_RTC_Init+0x64>)
 8001de0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001de2:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <MX_RTC_Init+0x60>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001de8:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <MX_RTC_Init+0x60>)
 8001dea:	220f      	movs	r2, #15
 8001dec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001dee:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <MX_RTC_Init+0x60>)
 8001df0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001df4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001df6:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <MX_RTC_Init+0x60>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001dfc:	4b0e      	ldr	r3, [pc, #56]	; (8001e38 <MX_RTC_Init+0x60>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e02:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <MX_RTC_Init+0x60>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <MX_RTC_Init+0x60>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e0e:	480a      	ldr	r0, [pc, #40]	; (8001e38 <MX_RTC_Init+0x60>)
 8001e10:	f003 f9a6 	bl	8005160 <HAL_RTC_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001e1a:	f000 f8ad 	bl	8001f78 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2100      	movs	r1, #0
 8001e22:	4805      	ldr	r0, [pc, #20]	; (8001e38 <MX_RTC_Init+0x60>)
 8001e24:	f003 fa8a 	bl	800533c <HAL_RTCEx_SetWakeUpTimer_IT>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001e2e:	f000 f8a3 	bl	8001f78 <Error_Handler>
  }
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20001500 	.word	0x20001500
 8001e3c:	40002800 	.word	0x40002800

08001e40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001e44:	4b23      	ldr	r3, [pc, #140]	; (8001ed4 <MX_USART1_UART_Init+0x94>)
 8001e46:	4a24      	ldr	r2, [pc, #144]	; (8001ed8 <MX_USART1_UART_Init+0x98>)
 8001e48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e4a:	4b22      	ldr	r3, [pc, #136]	; (8001ed4 <MX_USART1_UART_Init+0x94>)
 8001e4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e52:	4b20      	ldr	r3, [pc, #128]	; (8001ed4 <MX_USART1_UART_Init+0x94>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e58:	4b1e      	ldr	r3, [pc, #120]	; (8001ed4 <MX_USART1_UART_Init+0x94>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e5e:	4b1d      	ldr	r3, [pc, #116]	; (8001ed4 <MX_USART1_UART_Init+0x94>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e64:	4b1b      	ldr	r3, [pc, #108]	; (8001ed4 <MX_USART1_UART_Init+0x94>)
 8001e66:	220c      	movs	r2, #12
 8001e68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ed4 <MX_USART1_UART_Init+0x94>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001e70:	4b18      	ldr	r3, [pc, #96]	; (8001ed4 <MX_USART1_UART_Init+0x94>)
 8001e72:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e76:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e78:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <MX_USART1_UART_Init+0x94>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e7e:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <MX_USART1_UART_Init+0x94>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e84:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <MX_USART1_UART_Init+0x94>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e8a:	4812      	ldr	r0, [pc, #72]	; (8001ed4 <MX_USART1_UART_Init+0x94>)
 8001e8c:	f003 fb32 	bl	80054f4 <HAL_UART_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001e96:	f000 f86f 	bl	8001f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	480d      	ldr	r0, [pc, #52]	; (8001ed4 <MX_USART1_UART_Init+0x94>)
 8001e9e:	f004 fcd8 	bl	8006852 <HAL_UARTEx_SetTxFifoThreshold>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001ea8:	f000 f866 	bl	8001f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eac:	2100      	movs	r1, #0
 8001eae:	4809      	ldr	r0, [pc, #36]	; (8001ed4 <MX_USART1_UART_Init+0x94>)
 8001eb0:	f004 fd0d 	bl	80068ce <HAL_UARTEx_SetRxFifoThreshold>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001eba:	f000 f85d 	bl	8001f78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001ebe:	4805      	ldr	r0, [pc, #20]	; (8001ed4 <MX_USART1_UART_Init+0x94>)
 8001ec0:	f004 fc8e 	bl	80067e0 <HAL_UARTEx_DisableFifoMode>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001eca:	f000 f855 	bl	8001f78 <Error_Handler>
  }
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20001470 	.word	0x20001470
 8001ed8:	40013800 	.word	0x40013800

08001edc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001ee0:	2004      	movs	r0, #4
 8001ee2:	f7ff fe8b 	bl	8001bfc <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ee6:	2001      	movs	r0, #1
 8001ee8:	f7ff fe88 	bl	8001bfc <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001eec:	2200      	movs	r2, #0
 8001eee:	2100      	movs	r1, #0
 8001ef0:	200b      	movs	r0, #11
 8001ef2:	f000 fd38 	bl	8002966 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ef6:	200b      	movs	r0, #11
 8001ef8:	f000 fd4f 	bl	800299a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001efc:	2200      	movs	r2, #0
 8001efe:	2100      	movs	r1, #0
 8001f00:	200c      	movs	r0, #12
 8001f02:	f000 fd30 	bl	8002966 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001f06:	200c      	movs	r0, #12
 8001f08:	f000 fd47 	bl	800299a <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2100      	movs	r1, #0
 8001f10:	203e      	movs	r0, #62	; 0x3e
 8001f12:	f000 fd28 	bl	8002966 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8001f16:	203e      	movs	r0, #62	; 0x3e
 8001f18:	f000 fd3f 	bl	800299a <HAL_NVIC_EnableIRQ>

}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f26:	1d3b      	adds	r3, r7, #4
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f34:	2004      	movs	r0, #4
 8001f36:	f7ff fe7a 	bl	8001c2e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3a:	2001      	movs	r0, #1
 8001f3c:	f7ff fe77 	bl	8001c2e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f40:	2002      	movs	r0, #2
 8001f42:	f7ff fe74 	bl	8001c2e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001f46:	2200      	movs	r2, #0
 8001f48:	2103      	movs	r1, #3
 8001f4a:	480a      	ldr	r0, [pc, #40]	; (8001f74 <MX_GPIO_Init+0x54>)
 8001f4c:	f001 fa5e 	bl	800340c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f50:	2303      	movs	r3, #3
 8001f52:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f54:	2301      	movs	r3, #1
 8001f56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f60:	1d3b      	adds	r3, r7, #4
 8001f62:	4619      	mov	r1, r3
 8001f64:	4803      	ldr	r0, [pc, #12]	; (8001f74 <MX_GPIO_Init+0x54>)
 8001f66:	f001 f8e1 	bl	800312c <HAL_GPIO_Init>

}
 8001f6a:	bf00      	nop
 8001f6c:	3718      	adds	r7, #24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	48000400 	.word	0x48000400

08001f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001f7c:	b672      	cpsid	i
}
 8001f7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f80:	e7fe      	b.n	8001f80 <Error_Handler+0x8>

08001f82 <LL_RCC_EnableRTC>:
{
 8001f82:	b480      	push	{r7}
 8001f84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001f9a:	bf00      	nop
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <LL_AHB2_GRP1_EnableClock>:
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
}
 8001fca:	bf00      	nop
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <LL_AHB3_GRP1_EnableClock>:
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b085      	sub	sp, #20
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fe4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
}
 8001ffc:	bf00      	nop
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <LL_APB1_GRP1_EnableClock>:
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002014:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002016:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4313      	orrs	r3, r2
 800201e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002024:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4013      	ands	r3, r2
 800202a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800202c:	68fb      	ldr	r3, [r7, #12]
}
 800202e:	bf00      	nop
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <LL_APB2_GRP1_EnableClock>:
{
 800203a:	b480      	push	{r7}
 800203c:	b085      	sub	sp, #20
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002046:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002048:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4313      	orrs	r3, r2
 8002050:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002056:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4013      	ands	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800205e:	68fb      	ldr	r3, [r7, #12]
}
 8002060:	bf00      	nop
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002070:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002074:	f7ff ffaf 	bl	8001fd6 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002078:	2200      	movs	r2, #0
 800207a:	2100      	movs	r1, #0
 800207c:	202e      	movs	r0, #46	; 0x2e
 800207e:	f000 fc72 	bl	8002966 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002082:	202e      	movs	r0, #46	; 0x2e
 8002084:	f000 fc89 	bl	800299a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002088:	bf00      	nop
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a0d      	ldr	r2, [pc, #52]	; (80020d0 <HAL_IPCC_MspInit+0x44>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d113      	bne.n	80020c6 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800209e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80020a2:	f7ff ff98 	bl	8001fd6 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80020a6:	2200      	movs	r2, #0
 80020a8:	2100      	movs	r1, #0
 80020aa:	202c      	movs	r0, #44	; 0x2c
 80020ac:	f000 fc5b 	bl	8002966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80020b0:	202c      	movs	r0, #44	; 0x2c
 80020b2:	f000 fc72 	bl	800299a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80020b6:	2200      	movs	r2, #0
 80020b8:	2100      	movs	r1, #0
 80020ba:	202d      	movs	r0, #45	; 0x2d
 80020bc:	f000 fc53 	bl	8002966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80020c0:	202d      	movs	r0, #45	; 0x2d
 80020c2:	f000 fc6a 	bl	800299a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	58000c00 	.word	0x58000c00

080020d4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b096      	sub	sp, #88	; 0x58
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020dc:	f107 0308 	add.w	r3, r7, #8
 80020e0:	2250      	movs	r2, #80	; 0x50
 80020e2:	2100      	movs	r1, #0
 80020e4:	4618      	mov	r0, r3
 80020e6:	f008 f9af 	bl	800a448 <memset>
  if(hrtc->Instance==RTC)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a12      	ldr	r2, [pc, #72]	; (8002138 <HAL_RTC_MspInit+0x64>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d11d      	bne.n	8002130 <HAL_RTC_MspInit+0x5c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80020f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020f8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80020fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020fe:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002100:	f107 0308 	add.w	r3, r7, #8
 8002104:	4618      	mov	r0, r3
 8002106:	f002 fda4 	bl	8004c52 <HAL_RCCEx_PeriphCLKConfig>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002110:	f7ff ff32 	bl	8001f78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002114:	f7ff ff35 	bl	8001f82 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002118:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800211c:	f7ff ff74 	bl	8002008 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002120:	2200      	movs	r2, #0
 8002122:	2100      	movs	r1, #0
 8002124:	2003      	movs	r0, #3
 8002126:	f000 fc1e 	bl	8002966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800212a:	2003      	movs	r0, #3
 800212c:	f000 fc35 	bl	800299a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002130:	bf00      	nop
 8002132:	3758      	adds	r7, #88	; 0x58
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40002800 	.word	0x40002800

0800213c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b09c      	sub	sp, #112	; 0x70
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002144:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002154:	f107 030c 	add.w	r3, r7, #12
 8002158:	2250      	movs	r2, #80	; 0x50
 800215a:	2100      	movs	r1, #0
 800215c:	4618      	mov	r0, r3
 800215e:	f008 f973 	bl	800a448 <memset>
  if(huart->Instance==USART1)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a44      	ldr	r2, [pc, #272]	; (8002278 <HAL_UART_MspInit+0x13c>)
 8002168:	4293      	cmp	r3, r2
 800216a:	f040 8081 	bne.w	8002270 <HAL_UART_MspInit+0x134>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800216e:	2301      	movs	r3, #1
 8002170:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002172:	2300      	movs	r3, #0
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002176:	f107 030c 	add.w	r3, r7, #12
 800217a:	4618      	mov	r0, r3
 800217c:	f002 fd69 	bl	8004c52 <HAL_RCCEx_PeriphCLKConfig>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002186:	f7ff fef7 	bl	8001f78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800218a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800218e:	f7ff ff54 	bl	800203a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002192:	2001      	movs	r0, #1
 8002194:	f7ff ff06 	bl	8001fa4 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002198:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800219c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219e:	2302      	movs	r3, #2
 80021a0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a6:	2300      	movs	r3, #0
 80021a8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021aa:	2307      	movs	r3, #7
 80021ac:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80021b2:	4619      	mov	r1, r3
 80021b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021b8:	f000 ffb8 	bl	800312c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80021bc:	4b2f      	ldr	r3, [pc, #188]	; (800227c <HAL_UART_MspInit+0x140>)
 80021be:	4a30      	ldr	r2, [pc, #192]	; (8002280 <HAL_UART_MspInit+0x144>)
 80021c0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80021c2:	4b2e      	ldr	r3, [pc, #184]	; (800227c <HAL_UART_MspInit+0x140>)
 80021c4:	220e      	movs	r2, #14
 80021c6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021c8:	4b2c      	ldr	r3, [pc, #176]	; (800227c <HAL_UART_MspInit+0x140>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021ce:	4b2b      	ldr	r3, [pc, #172]	; (800227c <HAL_UART_MspInit+0x140>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021d4:	4b29      	ldr	r3, [pc, #164]	; (800227c <HAL_UART_MspInit+0x140>)
 80021d6:	2280      	movs	r2, #128	; 0x80
 80021d8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021da:	4b28      	ldr	r3, [pc, #160]	; (800227c <HAL_UART_MspInit+0x140>)
 80021dc:	2200      	movs	r2, #0
 80021de:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021e0:	4b26      	ldr	r3, [pc, #152]	; (800227c <HAL_UART_MspInit+0x140>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80021e6:	4b25      	ldr	r3, [pc, #148]	; (800227c <HAL_UART_MspInit+0x140>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021ec:	4b23      	ldr	r3, [pc, #140]	; (800227c <HAL_UART_MspInit+0x140>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80021f2:	4822      	ldr	r0, [pc, #136]	; (800227c <HAL_UART_MspInit+0x140>)
 80021f4:	f000 fc16 	bl	8002a24 <HAL_DMA_Init>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80021fe:	f7ff febb 	bl	8001f78 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a1d      	ldr	r2, [pc, #116]	; (800227c <HAL_UART_MspInit+0x140>)
 8002206:	67da      	str	r2, [r3, #124]	; 0x7c
 8002208:	4a1c      	ldr	r2, [pc, #112]	; (800227c <HAL_UART_MspInit+0x140>)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800220e:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <HAL_UART_MspInit+0x148>)
 8002210:	4a1d      	ldr	r2, [pc, #116]	; (8002288 <HAL_UART_MspInit+0x14c>)
 8002212:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002214:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <HAL_UART_MspInit+0x148>)
 8002216:	220f      	movs	r2, #15
 8002218:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800221a:	4b1a      	ldr	r3, [pc, #104]	; (8002284 <HAL_UART_MspInit+0x148>)
 800221c:	2210      	movs	r2, #16
 800221e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002220:	4b18      	ldr	r3, [pc, #96]	; (8002284 <HAL_UART_MspInit+0x148>)
 8002222:	2200      	movs	r2, #0
 8002224:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002226:	4b17      	ldr	r3, [pc, #92]	; (8002284 <HAL_UART_MspInit+0x148>)
 8002228:	2280      	movs	r2, #128	; 0x80
 800222a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800222c:	4b15      	ldr	r3, [pc, #84]	; (8002284 <HAL_UART_MspInit+0x148>)
 800222e:	2200      	movs	r2, #0
 8002230:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002232:	4b14      	ldr	r3, [pc, #80]	; (8002284 <HAL_UART_MspInit+0x148>)
 8002234:	2200      	movs	r2, #0
 8002236:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002238:	4b12      	ldr	r3, [pc, #72]	; (8002284 <HAL_UART_MspInit+0x148>)
 800223a:	2200      	movs	r2, #0
 800223c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800223e:	4b11      	ldr	r3, [pc, #68]	; (8002284 <HAL_UART_MspInit+0x148>)
 8002240:	2200      	movs	r2, #0
 8002242:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002244:	480f      	ldr	r0, [pc, #60]	; (8002284 <HAL_UART_MspInit+0x148>)
 8002246:	f000 fbed 	bl	8002a24 <HAL_DMA_Init>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <HAL_UART_MspInit+0x118>
    {
      Error_Handler();
 8002250:	f7ff fe92 	bl	8001f78 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a0b      	ldr	r2, [pc, #44]	; (8002284 <HAL_UART_MspInit+0x148>)
 8002258:	679a      	str	r2, [r3, #120]	; 0x78
 800225a:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <HAL_UART_MspInit+0x148>)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002260:	2200      	movs	r2, #0
 8002262:	2100      	movs	r1, #0
 8002264:	2024      	movs	r0, #36	; 0x24
 8002266:	f000 fb7e 	bl	8002966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800226a:	2024      	movs	r0, #36	; 0x24
 800226c:	f000 fb95 	bl	800299a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002270:	bf00      	nop
 8002272:	3770      	adds	r7, #112	; 0x70
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40013800 	.word	0x40013800
 800227c:	20001410 	.word	0x20001410
 8002280:	40020008 	.word	0x40020008
 8002284:	200013b0 	.word	0x200013b0
 8002288:	4002001c 	.word	0x4002001c

0800228c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002290:	e7fe      	b.n	8002290 <NMI_Handler+0x4>

08002292 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002296:	e7fe      	b.n	8002296 <HardFault_Handler+0x4>

08002298 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800229c:	e7fe      	b.n	800229c <MemManage_Handler+0x4>

0800229e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800229e:	b480      	push	{r7}
 80022a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022a2:	e7fe      	b.n	80022a2 <BusFault_Handler+0x4>

080022a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022a8:	e7fe      	b.n	80022a8 <UsageFault_Handler+0x4>

080022aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022aa:	b480      	push	{r7}
 80022ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022c6:	b480      	push	{r7}
 80022c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022d8:	f000 f9d2 	bl	8002680 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022dc:	bf00      	nop
 80022de:	bd80      	pop	{r7, pc}

080022e0 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80022e4:	f7ff f934 	bl	8001550 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80022e8:	bf00      	nop
 80022ea:	bd80      	pop	{r7, pc}

080022ec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80022f0:	4802      	ldr	r0, [pc, #8]	; (80022fc <DMA1_Channel1_IRQHandler+0x10>)
 80022f2:	f000 fd78 	bl	8002de6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20001410 	.word	0x20001410

08002300 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002304:	4802      	ldr	r0, [pc, #8]	; (8002310 <DMA1_Channel2_IRQHandler+0x10>)
 8002306:	f000 fd6e 	bl	8002de6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	200013b0 	.word	0x200013b0

08002314 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002318:	4802      	ldr	r0, [pc, #8]	; (8002324 <USART1_IRQHandler+0x10>)
 800231a:	f003 f9cd 	bl	80056b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20001470 	.word	0x20001470

08002328 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800232c:	f007 fca0 	bl	8009c70 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002330:	bf00      	nop
 8002332:	bd80      	pop	{r7, pc}

08002334 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002338:	f007 fcd2 	bl	8009ce0 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 800233c:	bf00      	nop
 800233e:	bd80      	pop	{r7, pc}

08002340 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002344:	f001 f87a 	bl	800343c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002348:	bf00      	nop
 800234a:	bd80      	pop	{r7, pc}

0800234c <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_rx);
 8002350:	4803      	ldr	r0, [pc, #12]	; (8002360 <DMAMUX1_OVR_IRQHandler+0x14>)
 8002352:	f000 fe99 	bl	8003088 <HAL_DMAEx_MUX_IRQHandler>
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_tx);
 8002356:	4803      	ldr	r0, [pc, #12]	; (8002364 <DMAMUX1_OVR_IRQHandler+0x18>)
 8002358:	f000 fe96 	bl	8003088 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 800235c:	bf00      	nop
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20001410 	.word	0x20001410
 8002364:	200013b0 	.word	0x200013b0

08002368 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	e00a      	b.n	8002390 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800237a:	f3af 8000 	nop.w
 800237e:	4601      	mov	r1, r0
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	60ba      	str	r2, [r7, #8]
 8002386:	b2ca      	uxtb	r2, r1
 8002388:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	3301      	adds	r3, #1
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	429a      	cmp	r2, r3
 8002396:	dbf0      	blt.n	800237a <_read+0x12>
	}

return len;
 8002398:	687b      	ldr	r3, [r7, #4]
}
 800239a:	4618      	mov	r0, r3
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
	return -1;
 80023aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023ca:	605a      	str	r2, [r3, #4]
	return 0;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <_isatty>:

int _isatty(int file)
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
	return 1;
 80023e2:	2301      	movs	r3, #1
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
	return 0;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
	...

0800240c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002414:	4a14      	ldr	r2, [pc, #80]	; (8002468 <_sbrk+0x5c>)
 8002416:	4b15      	ldr	r3, [pc, #84]	; (800246c <_sbrk+0x60>)
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002420:	4b13      	ldr	r3, [pc, #76]	; (8002470 <_sbrk+0x64>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d102      	bne.n	800242e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002428:	4b11      	ldr	r3, [pc, #68]	; (8002470 <_sbrk+0x64>)
 800242a:	4a12      	ldr	r2, [pc, #72]	; (8002474 <_sbrk+0x68>)
 800242c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800242e:	4b10      	ldr	r3, [pc, #64]	; (8002470 <_sbrk+0x64>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	429a      	cmp	r2, r3
 800243a:	d207      	bcs.n	800244c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800243c:	f007 ffcc 	bl	800a3d8 <__errno>
 8002440:	4603      	mov	r3, r0
 8002442:	220c      	movs	r2, #12
 8002444:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002446:	f04f 33ff 	mov.w	r3, #4294967295
 800244a:	e009      	b.n	8002460 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800244c:	4b08      	ldr	r3, [pc, #32]	; (8002470 <_sbrk+0x64>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002452:	4b07      	ldr	r3, [pc, #28]	; (8002470 <_sbrk+0x64>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	4a05      	ldr	r2, [pc, #20]	; (8002470 <_sbrk+0x64>)
 800245c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800245e:	68fb      	ldr	r3, [r7, #12]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	20030000 	.word	0x20030000
 800246c:	00000400 	.word	0x00000400
 8002470:	20000220 	.word	0x20000220
 8002474:	20001540 	.word	0x20001540

08002478 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800247c:	4b24      	ldr	r3, [pc, #144]	; (8002510 <SystemInit+0x98>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002482:	4a23      	ldr	r2, [pc, #140]	; (8002510 <SystemInit+0x98>)
 8002484:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002488:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800248c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800249c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80024a4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80024a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024b0:	4b18      	ldr	r3, [pc, #96]	; (8002514 <SystemInit+0x9c>)
 80024b2:	4013      	ands	r3, r2
 80024b4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80024b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024c2:	f023 0305 	bic.w	r3, r3, #5
 80024c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80024ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024d6:	f023 0301 	bic.w	r3, r3, #1
 80024da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80024de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e2:	4a0d      	ldr	r2, [pc, #52]	; (8002518 <SystemInit+0xa0>)
 80024e4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80024e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ea:	4a0b      	ldr	r2, [pc, #44]	; (8002518 <SystemInit+0xa0>)
 80024ec:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80024ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024fc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80024fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002502:	2200      	movs	r2, #0
 8002504:	619a      	str	r2, [r3, #24]
}
 8002506:	bf00      	nop
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	e000ed00 	.word	0xe000ed00
 8002514:	faf6fefb 	.word	0xfaf6fefb
 8002518:	22041000 	.word	0x22041000

0800251c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800251c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800251e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002520:	3304      	adds	r3, #4

08002522 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002522:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002524:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002526:	d3f9      	bcc.n	800251c <CopyDataInit>
  bx lr
 8002528:	4770      	bx	lr

0800252a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800252a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800252c:	3004      	adds	r0, #4

0800252e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800252e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002530:	d3fb      	bcc.n	800252a <FillZerobss>
  bx lr
 8002532:	4770      	bx	lr

08002534 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002534:	480c      	ldr	r0, [pc, #48]	; (8002568 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002536:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002538:	f7ff ff9e 	bl	8002478 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800253c:	480b      	ldr	r0, [pc, #44]	; (800256c <LoopForever+0x8>)
 800253e:	490c      	ldr	r1, [pc, #48]	; (8002570 <LoopForever+0xc>)
 8002540:	4a0c      	ldr	r2, [pc, #48]	; (8002574 <LoopForever+0x10>)
 8002542:	2300      	movs	r3, #0
 8002544:	f7ff ffed 	bl	8002522 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002548:	480b      	ldr	r0, [pc, #44]	; (8002578 <LoopForever+0x14>)
 800254a:	490c      	ldr	r1, [pc, #48]	; (800257c <LoopForever+0x18>)
 800254c:	2300      	movs	r3, #0
 800254e:	f7ff ffee 	bl	800252e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002552:	480b      	ldr	r0, [pc, #44]	; (8002580 <LoopForever+0x1c>)
 8002554:	490b      	ldr	r1, [pc, #44]	; (8002584 <LoopForever+0x20>)
 8002556:	2300      	movs	r3, #0
 8002558:	f7ff ffe9 	bl	800252e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800255c:	f007 ff42 	bl	800a3e4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002560:	f7ff fb7e 	bl	8001c60 <main>

08002564 <LoopForever>:

LoopForever:
  b LoopForever
 8002564:	e7fe      	b.n	8002564 <LoopForever>
 8002566:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002568:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800256c:	20000004 	.word	0x20000004
 8002570:	20000088 	.word	0x20000088
 8002574:	0800bc1c 	.word	0x0800bc1c
  INIT_BSS _sbss, _ebss
 8002578:	200001f8 	.word	0x200001f8
 800257c:	2000153c 	.word	0x2000153c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002580:	200301e0 	.word	0x200301e0
 8002584:	20030a57 	.word	0x20030a57

08002588 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002588:	e7fe      	b.n	8002588 <ADC1_IRQHandler>
	...

0800258c <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002590:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	4a04      	ldr	r2, [pc, #16]	; (80025a8 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	6053      	str	r3, [r2, #4]
}
 800259c:	bf00      	nop
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	e0042000 	.word	0xe0042000

080025ac <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	4a04      	ldr	r2, [pc, #16]	; (80025c8 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80025b6:	f043 0302 	orr.w	r3, r3, #2
 80025ba:	6053      	str	r3, [r2, #4]
}
 80025bc:	bf00      	nop
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	e0042000 	.word	0xe0042000

080025cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025d6:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <HAL_Init+0x3c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a0b      	ldr	r2, [pc, #44]	; (8002608 <HAL_Init+0x3c>)
 80025dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025e2:	2003      	movs	r0, #3
 80025e4:	f000 f9b4 	bl	8002950 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025e8:	200f      	movs	r0, #15
 80025ea:	f000 f80f 	bl	800260c <HAL_InitTick>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d002      	beq.n	80025fa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	71fb      	strb	r3, [r7, #7]
 80025f8:	e001      	b.n	80025fe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025fa:	f7ff fd37 	bl	800206c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025fe:	79fb      	ldrb	r3, [r7, #7]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	58004000 	.word	0x58004000

0800260c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002614:	2300      	movs	r3, #0
 8002616:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002618:	4b17      	ldr	r3, [pc, #92]	; (8002678 <HAL_InitTick+0x6c>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d024      	beq.n	800266a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002620:	f002 f882 	bl	8004728 <HAL_RCC_GetHCLKFreq>
 8002624:	4602      	mov	r2, r0
 8002626:	4b14      	ldr	r3, [pc, #80]	; (8002678 <HAL_InitTick+0x6c>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	4619      	mov	r1, r3
 800262c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002630:	fbb3 f3f1 	udiv	r3, r3, r1
 8002634:	fbb2 f3f3 	udiv	r3, r2, r3
 8002638:	4618      	mov	r0, r3
 800263a:	f000 f9ca 	bl	80029d2 <HAL_SYSTICK_Config>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10f      	bne.n	8002664 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b0f      	cmp	r3, #15
 8002648:	d809      	bhi.n	800265e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800264a:	2200      	movs	r2, #0
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	f04f 30ff 	mov.w	r0, #4294967295
 8002652:	f000 f988 	bl	8002966 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002656:	4a09      	ldr	r2, [pc, #36]	; (800267c <HAL_InitTick+0x70>)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6013      	str	r3, [r2, #0]
 800265c:	e007      	b.n	800266e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	73fb      	strb	r3, [r7, #15]
 8002662:	e004      	b.n	800266e <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	73fb      	strb	r3, [r7, #15]
 8002668:	e001      	b.n	800266e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800266e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	2000000c 	.word	0x2000000c
 800267c:	20000008 	.word	0x20000008

08002680 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002684:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <HAL_IncTick+0x20>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	461a      	mov	r2, r3
 800268a:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <HAL_IncTick+0x24>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4413      	add	r3, r2
 8002690:	4a04      	ldr	r2, [pc, #16]	; (80026a4 <HAL_IncTick+0x24>)
 8002692:	6013      	str	r3, [r2, #0]
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	2000000c 	.word	0x2000000c
 80026a4:	20001524 	.word	0x20001524

080026a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  return uwTick;
 80026ac:	4b03      	ldr	r3, [pc, #12]	; (80026bc <HAL_GetTick+0x14>)
 80026ae:	681b      	ldr	r3, [r3, #0]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	20001524 	.word	0x20001524

080026c0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80026c4:	4b03      	ldr	r3, [pc, #12]	; (80026d4 <HAL_GetTickPrio+0x14>)
 80026c6:	681b      	ldr	r3, [r3, #0]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	20000008 	.word	0x20000008

080026d8 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80026dc:	f7ff ff56 	bl	800258c <LL_DBGMCU_EnableDBGSleepMode>
}
 80026e0:	bf00      	nop
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80026e8:	f7ff ff60 	bl	80025ac <LL_DBGMCU_EnableDBGStopMode>
}
 80026ec:	bf00      	nop
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002700:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <__NVIC_SetPriorityGrouping+0x44>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800270c:	4013      	ands	r3, r2
 800270e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002718:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800271c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002722:	4a04      	ldr	r2, [pc, #16]	; (8002734 <__NVIC_SetPriorityGrouping+0x44>)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	60d3      	str	r3, [r2, #12]
}
 8002728:	bf00      	nop
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	e000ed00 	.word	0xe000ed00

08002738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800273c:	4b04      	ldr	r3, [pc, #16]	; (8002750 <__NVIC_GetPriorityGrouping+0x18>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	0a1b      	lsrs	r3, r3, #8
 8002742:	f003 0307 	and.w	r3, r3, #7
}
 8002746:	4618      	mov	r0, r3
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	2b00      	cmp	r3, #0
 8002764:	db0b      	blt.n	800277e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	f003 021f 	and.w	r2, r3, #31
 800276c:	4907      	ldr	r1, [pc, #28]	; (800278c <__NVIC_EnableIRQ+0x38>)
 800276e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	2001      	movs	r0, #1
 8002776:	fa00 f202 	lsl.w	r2, r0, r2
 800277a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	e000e100 	.word	0xe000e100

08002790 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	db12      	blt.n	80027c8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	f003 021f 	and.w	r2, r3, #31
 80027a8:	490a      	ldr	r1, [pc, #40]	; (80027d4 <__NVIC_DisableIRQ+0x44>)
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	095b      	lsrs	r3, r3, #5
 80027b0:	2001      	movs	r0, #1
 80027b2:	fa00 f202 	lsl.w	r2, r0, r2
 80027b6:	3320      	adds	r3, #32
 80027b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80027bc:	f3bf 8f4f 	dsb	sy
}
 80027c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80027c2:	f3bf 8f6f 	isb	sy
}
 80027c6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	e000e100 	.word	0xe000e100

080027d8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	db0c      	blt.n	8002804 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ea:	79fb      	ldrb	r3, [r7, #7]
 80027ec:	f003 021f 	and.w	r2, r3, #31
 80027f0:	4907      	ldr	r1, [pc, #28]	; (8002810 <__NVIC_SetPendingIRQ+0x38>)
 80027f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f6:	095b      	lsrs	r3, r3, #5
 80027f8:	2001      	movs	r0, #1
 80027fa:	fa00 f202 	lsl.w	r2, r0, r2
 80027fe:	3340      	adds	r3, #64	; 0x40
 8002800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	e000e100 	.word	0xe000e100

08002814 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800281e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002822:	2b00      	cmp	r3, #0
 8002824:	db0c      	blt.n	8002840 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	f003 021f 	and.w	r2, r3, #31
 800282c:	4907      	ldr	r1, [pc, #28]	; (800284c <__NVIC_ClearPendingIRQ+0x38>)
 800282e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002832:	095b      	lsrs	r3, r3, #5
 8002834:	2001      	movs	r0, #1
 8002836:	fa00 f202 	lsl.w	r2, r0, r2
 800283a:	3360      	adds	r3, #96	; 0x60
 800283c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	e000e100 	.word	0xe000e100

08002850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	6039      	str	r1, [r7, #0]
 800285a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800285c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002860:	2b00      	cmp	r3, #0
 8002862:	db0a      	blt.n	800287a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	b2da      	uxtb	r2, r3
 8002868:	490c      	ldr	r1, [pc, #48]	; (800289c <__NVIC_SetPriority+0x4c>)
 800286a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286e:	0112      	lsls	r2, r2, #4
 8002870:	b2d2      	uxtb	r2, r2
 8002872:	440b      	add	r3, r1
 8002874:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002878:	e00a      	b.n	8002890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	b2da      	uxtb	r2, r3
 800287e:	4908      	ldr	r1, [pc, #32]	; (80028a0 <__NVIC_SetPriority+0x50>)
 8002880:	79fb      	ldrb	r3, [r7, #7]
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	3b04      	subs	r3, #4
 8002888:	0112      	lsls	r2, r2, #4
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	440b      	add	r3, r1
 800288e:	761a      	strb	r2, [r3, #24]
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	e000e100 	.word	0xe000e100
 80028a0:	e000ed00 	.word	0xe000ed00

080028a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b089      	sub	sp, #36	; 0x24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f1c3 0307 	rsb	r3, r3, #7
 80028be:	2b04      	cmp	r3, #4
 80028c0:	bf28      	it	cs
 80028c2:	2304      	movcs	r3, #4
 80028c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	3304      	adds	r3, #4
 80028ca:	2b06      	cmp	r3, #6
 80028cc:	d902      	bls.n	80028d4 <NVIC_EncodePriority+0x30>
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	3b03      	subs	r3, #3
 80028d2:	e000      	b.n	80028d6 <NVIC_EncodePriority+0x32>
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d8:	f04f 32ff 	mov.w	r2, #4294967295
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43da      	mvns	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	401a      	ands	r2, r3
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028ec:	f04f 31ff 	mov.w	r1, #4294967295
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	fa01 f303 	lsl.w	r3, r1, r3
 80028f6:	43d9      	mvns	r1, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028fc:	4313      	orrs	r3, r2
         );
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3724      	adds	r7, #36	; 0x24
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
	...

0800290c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3b01      	subs	r3, #1
 8002918:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800291c:	d301      	bcc.n	8002922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800291e:	2301      	movs	r3, #1
 8002920:	e00f      	b.n	8002942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002922:	4a0a      	ldr	r2, [pc, #40]	; (800294c <SysTick_Config+0x40>)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3b01      	subs	r3, #1
 8002928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800292a:	210f      	movs	r1, #15
 800292c:	f04f 30ff 	mov.w	r0, #4294967295
 8002930:	f7ff ff8e 	bl	8002850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002934:	4b05      	ldr	r3, [pc, #20]	; (800294c <SysTick_Config+0x40>)
 8002936:	2200      	movs	r2, #0
 8002938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800293a:	4b04      	ldr	r3, [pc, #16]	; (800294c <SysTick_Config+0x40>)
 800293c:	2207      	movs	r2, #7
 800293e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	e000e010 	.word	0xe000e010

08002950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7ff fec9 	bl	80026f0 <__NVIC_SetPriorityGrouping>
}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b086      	sub	sp, #24
 800296a:	af00      	add	r7, sp, #0
 800296c:	4603      	mov	r3, r0
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	607a      	str	r2, [r7, #4]
 8002972:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002974:	f7ff fee0 	bl	8002738 <__NVIC_GetPriorityGrouping>
 8002978:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	68b9      	ldr	r1, [r7, #8]
 800297e:	6978      	ldr	r0, [r7, #20]
 8002980:	f7ff ff90 	bl	80028a4 <NVIC_EncodePriority>
 8002984:	4602      	mov	r2, r0
 8002986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800298a:	4611      	mov	r1, r2
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff ff5f 	bl	8002850 <__NVIC_SetPriority>
}
 8002992:	bf00      	nop
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	4603      	mov	r3, r0
 80029a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff fed3 	bl	8002754 <__NVIC_EnableIRQ>
}
 80029ae:	bf00      	nop
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	4603      	mov	r3, r0
 80029be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80029c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff fee3 	bl	8002790 <__NVIC_DisableIRQ>
}
 80029ca:	bf00      	nop
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff ff96 	bl	800290c <SysTick_Config>
 80029e0:	4603      	mov	r3, r0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	4603      	mov	r3, r0
 80029f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80029f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff feed 	bl	80027d8 <__NVIC_SetPendingIRQ>
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff fefd 	bl	8002814 <__NVIC_ClearPendingIRQ>
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
	...

08002a24 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e08e      	b.n	8002b54 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	4b47      	ldr	r3, [pc, #284]	; (8002b5c <HAL_DMA_Init+0x138>)
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d80f      	bhi.n	8002a62 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	461a      	mov	r2, r3
 8002a48:	4b45      	ldr	r3, [pc, #276]	; (8002b60 <HAL_DMA_Init+0x13c>)
 8002a4a:	4413      	add	r3, r2
 8002a4c:	4a45      	ldr	r2, [pc, #276]	; (8002b64 <HAL_DMA_Init+0x140>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	091b      	lsrs	r3, r3, #4
 8002a54:	009a      	lsls	r2, r3, #2
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a42      	ldr	r2, [pc, #264]	; (8002b68 <HAL_DMA_Init+0x144>)
 8002a5e:	641a      	str	r2, [r3, #64]	; 0x40
 8002a60:	e00e      	b.n	8002a80 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	4b40      	ldr	r3, [pc, #256]	; (8002b6c <HAL_DMA_Init+0x148>)
 8002a6a:	4413      	add	r3, r2
 8002a6c:	4a3d      	ldr	r2, [pc, #244]	; (8002b64 <HAL_DMA_Init+0x140>)
 8002a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a72:	091b      	lsrs	r3, r3, #4
 8002a74:	009a      	lsls	r2, r3, #2
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a3c      	ldr	r2, [pc, #240]	; (8002b70 <HAL_DMA_Init+0x14c>)
 8002a7e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a9a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002aa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ab0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002abc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 fa74 	bl	8002fc0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ae0:	d102      	bne.n	8002ae8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002af0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002af4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002afe:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d010      	beq.n	8002b2a <HAL_DMA_Init+0x106>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d80c      	bhi.n	8002b2a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 fa93 	bl	800303c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002b26:	605a      	str	r2, [r3, #4]
 8002b28:	e008      	b.n	8002b3c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40020407 	.word	0x40020407
 8002b60:	bffdfff8 	.word	0xbffdfff8
 8002b64:	cccccccd 	.word	0xcccccccd
 8002b68:	40020000 	.word	0x40020000
 8002b6c:	bffdfbf8 	.word	0xbffdfbf8
 8002b70:	40020400 	.word	0x40020400

08002b74 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
 8002b80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b82:	2300      	movs	r3, #0
 8002b84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <HAL_DMA_Start_IT+0x20>
 8002b90:	2302      	movs	r3, #2
 8002b92:	e066      	b.n	8002c62 <HAL_DMA_Start_IT+0xee>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d155      	bne.n	8002c54 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2202      	movs	r2, #2
 8002bac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0201 	bic.w	r2, r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	68b9      	ldr	r1, [r7, #8]
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 f9b9 	bl	8002f44 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d008      	beq.n	8002bec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f042 020e 	orr.w	r2, r2, #14
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	e00f      	b.n	8002c0c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0204 	bic.w	r2, r2, #4
 8002bfa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 020a 	orr.w	r2, r2, #10
 8002c0a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d007      	beq.n	8002c2a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c28:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d007      	beq.n	8002c42 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c40:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f042 0201 	orr.w	r2, r2, #1
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	e005      	b.n	8002c60 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e04f      	b.n	8002d1c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d008      	beq.n	8002c9a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2204      	movs	r2, #4
 8002c8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e040      	b.n	8002d1c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 020e 	bic.w	r2, r2, #14
 8002ca8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cb8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 0201 	bic.w	r2, r2, #1
 8002cc8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cce:	f003 021c 	and.w	r2, r3, #28
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cdc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ce6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00c      	beq.n	8002d0a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cfe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002d08:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d005      	beq.n	8002d4c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2204      	movs	r2, #4
 8002d44:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	73fb      	strb	r3, [r7, #15]
 8002d4a:	e047      	b.n	8002ddc <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 020e 	bic.w	r2, r2, #14
 8002d5a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 0201 	bic.w	r2, r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d80:	f003 021c 	and.w	r2, r3, #28
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	2101      	movs	r1, #1
 8002d8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d8e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d98:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00c      	beq.n	8002dbc <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002db0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002dba:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	4798      	blx	r3
    }
  }
  return status;
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b084      	sub	sp, #16
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e02:	f003 031c 	and.w	r3, r3, #28
 8002e06:	2204      	movs	r2, #4
 8002e08:	409a      	lsls	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d026      	beq.n	8002e60 <HAL_DMA_IRQHandler+0x7a>
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d021      	beq.n	8002e60 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0320 	and.w	r3, r3, #32
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d107      	bne.n	8002e3a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0204 	bic.w	r2, r2, #4
 8002e38:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3e:	f003 021c 	and.w	r2, r3, #28
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	2104      	movs	r1, #4
 8002e48:	fa01 f202 	lsl.w	r2, r1, r2
 8002e4c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d071      	beq.n	8002f3a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002e5e:	e06c      	b.n	8002f3a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e64:	f003 031c 	and.w	r3, r3, #28
 8002e68:	2202      	movs	r2, #2
 8002e6a:	409a      	lsls	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d02e      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xec>
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d029      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0320 	and.w	r3, r3, #32
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10b      	bne.n	8002ea4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 020a 	bic.w	r2, r2, #10
 8002e9a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea8:	f003 021c 	and.w	r2, r3, #28
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	2102      	movs	r1, #2
 8002eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d038      	beq.n	8002f3a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002ed0:	e033      	b.n	8002f3a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed6:	f003 031c 	and.w	r3, r3, #28
 8002eda:	2208      	movs	r2, #8
 8002edc:	409a      	lsls	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d02a      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x156>
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d025      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 020e 	bic.w	r2, r2, #14
 8002efe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f04:	f003 021c 	and.w	r2, r3, #28
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f12:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d004      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002f3a:	bf00      	nop
 8002f3c:	bf00      	nop
}
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
 8002f50:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002f5a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d004      	beq.n	8002f6e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002f6c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f72:	f003 021c 	and.w	r2, r3, #28
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f80:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b10      	cmp	r3, #16
 8002f90:	d108      	bne.n	8002fa4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002fa2:	e007      	b.n	8002fb4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	60da      	str	r2, [r3, #12]
}
 8002fb4:	bf00      	nop
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	4b17      	ldr	r3, [pc, #92]	; (800302c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d80a      	bhi.n	8002fea <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd8:	089b      	lsrs	r3, r3, #2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002fe0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6493      	str	r3, [r2, #72]	; 0x48
 8002fe8:	e007      	b.n	8002ffa <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fee:	089b      	lsrs	r3, r3, #2
 8002ff0:	009a      	lsls	r2, r3, #2
 8002ff2:	4b0f      	ldr	r3, [pc, #60]	; (8003030 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002ff4:	4413      	add	r3, r2
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	3b08      	subs	r3, #8
 8003002:	4a0c      	ldr	r2, [pc, #48]	; (8003034 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003004:	fba2 2303 	umull	r2, r3, r2, r3
 8003008:	091b      	lsrs	r3, r3, #4
 800300a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a0a      	ldr	r2, [pc, #40]	; (8003038 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003010:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	2201      	movs	r2, #1
 800301a:	409a      	lsls	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003020:	bf00      	nop
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	40020407 	.word	0x40020407
 8003030:	4002081c 	.word	0x4002081c
 8003034:	cccccccd 	.word	0xcccccccd
 8003038:	40020880 	.word	0x40020880

0800303c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800304c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003052:	4413      	add	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	461a      	mov	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a09      	ldr	r2, [pc, #36]	; (8003084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003060:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	3b01      	subs	r3, #1
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	2201      	movs	r2, #1
 800306c:	409a      	lsls	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003072:	bf00      	nop
 8003074:	3714      	adds	r7, #20
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	1000823f 	.word	0x1000823f
 8003084:	40020940 	.word	0x40020940

08003088 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800309a:	4013      	ands	r3, r2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d01a      	beq.n	80030d6 <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR, DMAMUX_CxCR_SOIE);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030ae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    WRITE_REG(hdma->DMAmuxChannelStatus->CFR, hdma->DMAmuxChannelStatusMask);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80030b8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0U)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d022      	beq.n	8003124 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e8:	4013      	ands	r3, r2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d01a      	beq.n	8003124 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      CLEAR_BIT(hdma->DMAmuxRequestGen->RGCR, DMAMUX_RGxCR_OIE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      WRITE_REG(hdma->DMAmuxRequestGenStatus->RGCFR, hdma->DMAmuxRequestGenStatusMask);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003106:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	4798      	blx	r3
      }
    }
  }
}
 8003124:	bf00      	nop
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800312c:	b480      	push	{r7}
 800312e:	b087      	sub	sp, #28
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003136:	2300      	movs	r3, #0
 8003138:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800313a:	e14c      	b.n	80033d6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	2101      	movs	r1, #1
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	fa01 f303 	lsl.w	r3, r1, r3
 8003148:	4013      	ands	r3, r2
 800314a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 813e 	beq.w	80033d0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f003 0303 	and.w	r3, r3, #3
 800315c:	2b01      	cmp	r3, #1
 800315e:	d005      	beq.n	800316c <HAL_GPIO_Init+0x40>
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f003 0303 	and.w	r3, r3, #3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d130      	bne.n	80031ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	2203      	movs	r2, #3
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	43db      	mvns	r3, r3
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4013      	ands	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	68da      	ldr	r2, [r3, #12]
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031a2:	2201      	movs	r2, #1
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	43db      	mvns	r3, r3
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	4013      	ands	r3, r2
 80031b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	091b      	lsrs	r3, r3, #4
 80031b8:	f003 0201 	and.w	r2, r3, #1
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f003 0303 	and.w	r3, r3, #3
 80031d6:	2b03      	cmp	r3, #3
 80031d8:	d017      	beq.n	800320a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	2203      	movs	r2, #3
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	43db      	mvns	r3, r3
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	4013      	ands	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	689a      	ldr	r2, [r3, #8]
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	4313      	orrs	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f003 0303 	and.w	r3, r3, #3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d123      	bne.n	800325e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	08da      	lsrs	r2, r3, #3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	3208      	adds	r2, #8
 800321e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003222:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	220f      	movs	r2, #15
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	43db      	mvns	r3, r3
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	4013      	ands	r3, r2
 8003238:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	691a      	ldr	r2, [r3, #16]
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	4313      	orrs	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	08da      	lsrs	r2, r3, #3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3208      	adds	r2, #8
 8003258:	6939      	ldr	r1, [r7, #16]
 800325a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	2203      	movs	r2, #3
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	43db      	mvns	r3, r3
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	4013      	ands	r3, r2
 8003274:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f003 0203 	and.w	r2, r3, #3
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	4313      	orrs	r3, r2
 800328a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 8098 	beq.w	80033d0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80032a0:	4a54      	ldr	r2, [pc, #336]	; (80033f4 <HAL_GPIO_Init+0x2c8>)
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	089b      	lsrs	r3, r3, #2
 80032a6:	3302      	adds	r3, #2
 80032a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f003 0303 	and.w	r3, r3, #3
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	220f      	movs	r2, #15
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	43db      	mvns	r3, r3
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	4013      	ands	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032ca:	d019      	beq.n	8003300 <HAL_GPIO_Init+0x1d4>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a4a      	ldr	r2, [pc, #296]	; (80033f8 <HAL_GPIO_Init+0x2cc>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d013      	beq.n	80032fc <HAL_GPIO_Init+0x1d0>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a49      	ldr	r2, [pc, #292]	; (80033fc <HAL_GPIO_Init+0x2d0>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d00d      	beq.n	80032f8 <HAL_GPIO_Init+0x1cc>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a48      	ldr	r2, [pc, #288]	; (8003400 <HAL_GPIO_Init+0x2d4>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d007      	beq.n	80032f4 <HAL_GPIO_Init+0x1c8>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a47      	ldr	r2, [pc, #284]	; (8003404 <HAL_GPIO_Init+0x2d8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d101      	bne.n	80032f0 <HAL_GPIO_Init+0x1c4>
 80032ec:	2304      	movs	r3, #4
 80032ee:	e008      	b.n	8003302 <HAL_GPIO_Init+0x1d6>
 80032f0:	2307      	movs	r3, #7
 80032f2:	e006      	b.n	8003302 <HAL_GPIO_Init+0x1d6>
 80032f4:	2303      	movs	r3, #3
 80032f6:	e004      	b.n	8003302 <HAL_GPIO_Init+0x1d6>
 80032f8:	2302      	movs	r3, #2
 80032fa:	e002      	b.n	8003302 <HAL_GPIO_Init+0x1d6>
 80032fc:	2301      	movs	r3, #1
 80032fe:	e000      	b.n	8003302 <HAL_GPIO_Init+0x1d6>
 8003300:	2300      	movs	r3, #0
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	f002 0203 	and.w	r2, r2, #3
 8003308:	0092      	lsls	r2, r2, #2
 800330a:	4093      	lsls	r3, r2
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	4313      	orrs	r3, r2
 8003310:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003312:	4938      	ldr	r1, [pc, #224]	; (80033f4 <HAL_GPIO_Init+0x2c8>)
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	089b      	lsrs	r3, r3, #2
 8003318:	3302      	adds	r3, #2
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003320:	4b39      	ldr	r3, [pc, #228]	; (8003408 <HAL_GPIO_Init+0x2dc>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	43db      	mvns	r3, r3
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4013      	ands	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	4313      	orrs	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003344:	4a30      	ldr	r2, [pc, #192]	; (8003408 <HAL_GPIO_Init+0x2dc>)
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800334a:	4b2f      	ldr	r3, [pc, #188]	; (8003408 <HAL_GPIO_Init+0x2dc>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	43db      	mvns	r3, r3
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4013      	ands	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4313      	orrs	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800336e:	4a26      	ldr	r2, [pc, #152]	; (8003408 <HAL_GPIO_Init+0x2dc>)
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003374:	4b24      	ldr	r3, [pc, #144]	; (8003408 <HAL_GPIO_Init+0x2dc>)
 8003376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800337a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	43db      	mvns	r3, r3
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	4013      	ands	r3, r2
 8003384:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4313      	orrs	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800339a:	4a1b      	ldr	r2, [pc, #108]	; (8003408 <HAL_GPIO_Init+0x2dc>)
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80033a2:	4b19      	ldr	r3, [pc, #100]	; (8003408 <HAL_GPIO_Init+0x2dc>)
 80033a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	43db      	mvns	r3, r3
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4013      	ands	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033c8:	4a0f      	ldr	r2, [pc, #60]	; (8003408 <HAL_GPIO_Init+0x2dc>)
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	3301      	adds	r3, #1
 80033d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	fa22 f303 	lsr.w	r3, r2, r3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f47f aeab 	bne.w	800313c <HAL_GPIO_Init+0x10>
  }
}
 80033e6:	bf00      	nop
 80033e8:	bf00      	nop
 80033ea:	371c      	adds	r7, #28
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	40010000 	.word	0x40010000
 80033f8:	48000400 	.word	0x48000400
 80033fc:	48000800 	.word	0x48000800
 8003400:	48000c00 	.word	0x48000c00
 8003404:	48001000 	.word	0x48001000
 8003408:	58000800 	.word	0x58000800

0800340c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	460b      	mov	r3, r1
 8003416:	807b      	strh	r3, [r7, #2]
 8003418:	4613      	mov	r3, r2
 800341a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800341c:	787b      	ldrb	r3, [r7, #1]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003422:	887a      	ldrh	r2, [r7, #2]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003428:	e002      	b.n	8003430 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800342a:	887a      	ldrh	r2, [r7, #2]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003442:	4b0a      	ldr	r3, [pc, #40]	; (800346c <HAL_HSEM_IRQHandler+0x30>)
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003448:	4b08      	ldr	r3, [pc, #32]	; (800346c <HAL_HSEM_IRQHandler+0x30>)
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	43db      	mvns	r3, r3
 8003450:	4906      	ldr	r1, [pc, #24]	; (800346c <HAL_HSEM_IRQHandler+0x30>)
 8003452:	4013      	ands	r3, r2
 8003454:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003456:	4a05      	ldr	r2, [pc, #20]	; (800346c <HAL_HSEM_IRQHandler+0x30>)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f807 	bl	8003470 <HAL_HSEM_FreeCallback>
}
 8003462:	bf00      	nop
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	58001500 	.word	0x58001500

08003470 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800348c:	2300      	movs	r3, #0
 800348e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d01e      	beq.n	80034d4 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003496:	4b13      	ldr	r3, [pc, #76]	; (80034e4 <HAL_IPCC_Init+0x60>)
 8003498:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d102      	bne.n	80034ac <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7fe fdf0 	bl	800208c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80034ac:	68b8      	ldr	r0, [r7, #8]
 80034ae:	f000 f85b 	bl	8003568 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f82c 	bl	800351c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80034d2:	e001      	b.n	80034d8 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	58000c00 	.word	0x58000c00

080034e8 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	4613      	mov	r3, r2
 80034f4:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80034f6:	bf00      	nop
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003502:	b480      	push	{r7}
 8003504:	b085      	sub	sp, #20
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	4613      	mov	r3, r2
 800350e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003510:	bf00      	nop
 8003512:	3714      	adds	r7, #20
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003524:	2300      	movs	r3, #0
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	e00f      	b.n	800354a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	4a0b      	ldr	r2, [pc, #44]	; (8003560 <IPCC_SetDefaultCallbacks+0x44>)
 8003534:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	3306      	adds	r3, #6
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	4a08      	ldr	r2, [pc, #32]	; (8003564 <IPCC_SetDefaultCallbacks+0x48>)
 8003542:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	3301      	adds	r3, #1
 8003548:	60fb      	str	r3, [r7, #12]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2b05      	cmp	r3, #5
 800354e:	d9ec      	bls.n	800352a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003550:	bf00      	nop
 8003552:	bf00      	nop
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	080034e9 	.word	0x080034e9
 8003564:	08003503 	.word	0x08003503

08003568 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 800357c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	223f      	movs	r2, #63	; 0x3f
 8003582:	609a      	str	r2, [r3, #8]
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003594:	4b05      	ldr	r3, [pc, #20]	; (80035ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a04      	ldr	r2, [pc, #16]	; (80035ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800359a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800359e:	6013      	str	r3, [r2, #0]
}
 80035a0:	bf00      	nop
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	58000400 	.word	0x58000400

080035b0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80035b4:	4b04      	ldr	r3, [pc, #16]	; (80035c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80035bc:	4618      	mov	r0, r3
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	58000400 	.word	0x58000400

080035cc <LL_RCC_HSE_IsEnabledDiv2>:
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80035d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035de:	d101      	bne.n	80035e4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80035e0:	2301      	movs	r3, #1
 80035e2:	e000      	b.n	80035e6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <LL_RCC_HSE_Enable>:
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80035f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003602:	6013      	str	r3, [r2, #0]
}
 8003604:	bf00      	nop
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <LL_RCC_HSE_Disable>:
{
 800360e:	b480      	push	{r7}
 8003610:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800361c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003620:	6013      	str	r3, [r2, #0]
}
 8003622:	bf00      	nop
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <LL_RCC_HSE_IsReady>:
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800363e:	d101      	bne.n	8003644 <LL_RCC_HSE_IsReady+0x18>
 8003640:	2301      	movs	r3, #1
 8003642:	e000      	b.n	8003646 <LL_RCC_HSE_IsReady+0x1a>
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <LL_RCC_HSI_Enable>:
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800365e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003662:	6013      	str	r3, [r2, #0]
}
 8003664:	bf00      	nop
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <LL_RCC_HSI_Disable>:
{
 800366e:	b480      	push	{r7}
 8003670:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800367c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003680:	6013      	str	r3, [r2, #0]
}
 8003682:	bf00      	nop
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <LL_RCC_HSI_IsReady>:
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800369a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800369e:	d101      	bne.n	80036a4 <LL_RCC_HSI_IsReady+0x18>
 80036a0:	2301      	movs	r3, #1
 80036a2:	e000      	b.n	80036a6 <LL_RCC_HSI_IsReady+0x1a>
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <LL_RCC_HSI_SetCalibTrimming>:
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80036b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	061b      	lsls	r3, r3, #24
 80036c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036ca:	4313      	orrs	r3, r2
 80036cc:	604b      	str	r3, [r1, #4]
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <LL_RCC_HSI48_Enable>:
{
 80036da:	b480      	push	{r7}
 80036dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80036de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036ea:	f043 0301 	orr.w	r3, r3, #1
 80036ee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80036f2:	bf00      	nop
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <LL_RCC_HSI48_Disable>:
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003704:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003708:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800370c:	f023 0301 	bic.w	r3, r3, #1
 8003710:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003714:	bf00      	nop
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <LL_RCC_HSI48_IsReady>:
{
 800371e:	b480      	push	{r7}
 8003720:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003726:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b02      	cmp	r3, #2
 8003730:	d101      	bne.n	8003736 <LL_RCC_HSI48_IsReady+0x18>
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <LL_RCC_HSI48_IsReady+0x1a>
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <LL_RCC_LSE_Enable>:
{
 8003742:	b480      	push	{r7}
 8003744:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800374a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003752:	f043 0301 	orr.w	r3, r3, #1
 8003756:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800375a:	bf00      	nop
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <LL_RCC_LSE_Disable>:
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800376c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003770:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003774:	f023 0301 	bic.w	r3, r3, #1
 8003778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800377c:	bf00      	nop
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <LL_RCC_LSE_EnableBypass>:
{
 8003786:	b480      	push	{r7}
 8003788:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800378a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800378e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003792:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003796:	f043 0304 	orr.w	r3, r3, #4
 800379a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800379e:	bf00      	nop
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <LL_RCC_LSE_DisableBypass>:
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80037ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037b8:	f023 0304 	bic.w	r3, r3, #4
 80037bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80037c0:	bf00      	nop
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <LL_RCC_LSE_IsReady>:
{
 80037ca:	b480      	push	{r7}
 80037cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80037ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d101      	bne.n	80037e2 <LL_RCC_LSE_IsReady+0x18>
 80037de:	2301      	movs	r3, #1
 80037e0:	e000      	b.n	80037e4 <LL_RCC_LSE_IsReady+0x1a>
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <LL_RCC_LSI1_Enable>:
{
 80037ee:	b480      	push	{r7}
 80037f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80037f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003806:	bf00      	nop
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <LL_RCC_LSI1_Disable>:
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003818:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800381c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003820:	f023 0301 	bic.w	r3, r3, #1
 8003824:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003828:	bf00      	nop
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <LL_RCC_LSI1_IsReady>:
{
 8003832:	b480      	push	{r7}
 8003834:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800383a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b02      	cmp	r3, #2
 8003844:	d101      	bne.n	800384a <LL_RCC_LSI1_IsReady+0x18>
 8003846:	2301      	movs	r3, #1
 8003848:	e000      	b.n	800384c <LL_RCC_LSI1_IsReady+0x1a>
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <LL_RCC_LSI2_Enable>:
{
 8003856:	b480      	push	{r7}
 8003858:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800385a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800385e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003862:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003866:	f043 0304 	orr.w	r3, r3, #4
 800386a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800386e:	bf00      	nop
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <LL_RCC_LSI2_Disable>:
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800387c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003884:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003888:	f023 0304 	bic.w	r3, r3, #4
 800388c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003890:	bf00      	nop
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <LL_RCC_LSI2_IsReady>:
{
 800389a:	b480      	push	{r7}
 800389c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800389e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d101      	bne.n	80038b2 <LL_RCC_LSI2_IsReady+0x18>
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <LL_RCC_LSI2_IsReady+0x1a>
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <LL_RCC_LSI2_SetTrimming>:
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80038c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	021b      	lsls	r3, r3, #8
 80038d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038da:	4313      	orrs	r3, r2
 80038dc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <LL_RCC_MSI_Enable>:
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80038f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038fa:	f043 0301 	orr.w	r3, r3, #1
 80038fe:	6013      	str	r3, [r2, #0]
}
 8003900:	bf00      	nop
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <LL_RCC_MSI_Disable>:
{
 800390a:	b480      	push	{r7}
 800390c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800390e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003918:	f023 0301 	bic.w	r3, r3, #1
 800391c:	6013      	str	r3, [r2, #0]
}
 800391e:	bf00      	nop
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <LL_RCC_MSI_IsReady>:
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800392c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b02      	cmp	r3, #2
 8003938:	d101      	bne.n	800393e <LL_RCC_MSI_IsReady+0x16>
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <LL_RCC_MSI_IsReady+0x18>
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <LL_RCC_MSI_SetRange>:
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800395c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4313      	orrs	r3, r2
 8003964:	600b      	str	r3, [r1, #0]
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <LL_RCC_MSI_GetRange>:
{
 8003972:	b480      	push	{r7}
 8003974:	b083      	sub	sp, #12
 8003976:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003982:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2bb0      	cmp	r3, #176	; 0xb0
 8003988:	d901      	bls.n	800398e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800398a:	23b0      	movs	r3, #176	; 0xb0
 800398c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800398e:	687b      	ldr	r3, [r7, #4]
}
 8003990:	4618      	mov	r0, r3
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <LL_RCC_MSI_SetCalibTrimming>:
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80039a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	021b      	lsls	r3, r3, #8
 80039b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039b6:	4313      	orrs	r3, r2
 80039b8:	604b      	str	r3, [r1, #4]
}
 80039ba:	bf00      	nop
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <LL_RCC_SetSysClkSource>:
{
 80039c6:	b480      	push	{r7}
 80039c8:	b083      	sub	sp, #12
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80039ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f023 0203 	bic.w	r2, r3, #3
 80039d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4313      	orrs	r3, r2
 80039e0:	608b      	str	r3, [r1, #8]
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <LL_RCC_GetSysClkSource>:
{
 80039ee:	b480      	push	{r7}
 80039f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80039f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 030c 	and.w	r3, r3, #12
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <LL_RCC_SetAHBPrescaler>:
{
 8003a06:	b480      	push	{r7}
 8003a08:	b083      	sub	sp, #12
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	608b      	str	r3, [r1, #8]
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <LL_C2_RCC_SetAHBPrescaler>:
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003a3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <LL_RCC_SetAHB4Prescaler>:
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a66:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003a6a:	f023 020f 	bic.w	r2, r3, #15
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	091b      	lsrs	r3, r3, #4
 8003a72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a76:	4313      	orrs	r3, r2
 8003a78:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <LL_RCC_SetAPB1Prescaler>:
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	608b      	str	r3, [r1, #8]
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <LL_RCC_SetAPB2Prescaler>:
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ac2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	608b      	str	r3, [r1, #8]
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <LL_RCC_GetAHBPrescaler>:
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <LL_RCC_GetAHB4Prescaler>:
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003af8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <LL_RCC_GetAPB1Prescaler>:
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <LL_RCC_GetAPB2Prescaler>:
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <LL_RCC_PLL_Enable>:
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b4e:	6013      	str	r3, [r2, #0]
}
 8003b50:	bf00      	nop
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <LL_RCC_PLL_Disable>:
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b6c:	6013      	str	r3, [r2, #0]
}
 8003b6e:	bf00      	nop
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <LL_RCC_PLL_IsReady>:
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b8a:	d101      	bne.n	8003b90 <LL_RCC_PLL_IsReady+0x18>
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e000      	b.n	8003b92 <LL_RCC_PLL_IsReady+0x1a>
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <LL_RCC_PLL_GetN>:
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	0a1b      	lsrs	r3, r3, #8
 8003ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <LL_RCC_PLL_GetR>:
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <LL_RCC_PLL_GetDivider>:
{
 8003bce:	b480      	push	{r7}
 8003bd0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <LL_RCC_PLL_GetMainSource>:
{
 8003be6:	b480      	push	{r7}
 8003be8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f003 0303 	and.w	r3, r3, #3
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <LL_RCC_IsActiveFlag_HPRE>:
{
 8003bfe:	b480      	push	{r7}
 8003c00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c10:	d101      	bne.n	8003c16 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003c12:	2301      	movs	r3, #1
 8003c14:	e000      	b.n	8003c18 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8003c22:	b480      	push	{r7}
 8003c24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c2a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c36:	d101      	bne.n	8003c3c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e000      	b.n	8003c3e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c50:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c5c:	d101      	bne.n	8003c62 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e000      	b.n	8003c64 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <LL_RCC_IsActiveFlag_PPRE1>:
{
 8003c6e:	b480      	push	{r7}
 8003c70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c80:	d101      	bne.n	8003c86 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8003c92:	b480      	push	{r7}
 8003c94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ca0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ca4:	d101      	bne.n	8003caa <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e000      	b.n	8003cac <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
	...

08003cb8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cb8:	b590      	push	{r4, r7, lr}
 8003cba:	b08d      	sub	sp, #52	; 0x34
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e37e      	b.n	80043c8 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0320 	and.w	r3, r3, #32
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 8092 	beq.w	8003dfc <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cd8:	f7ff fe89 	bl	80039ee <LL_RCC_GetSysClkSource>
 8003cdc:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cde:	f7ff ff82 	bl	8003be6 <LL_RCC_PLL_GetMainSource>
 8003ce2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d005      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x3e>
 8003cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cec:	2b0c      	cmp	r3, #12
 8003cee:	d14c      	bne.n	8003d8a <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d149      	bne.n	8003d8a <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cf6:	f7ff fe17 	bl	8003928 <LL_RCC_MSI_IsReady>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d005      	beq.n	8003d0c <HAL_RCC_OscConfig+0x54>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	69db      	ldr	r3, [r3, #28]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d101      	bne.n	8003d0c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e35d      	b.n	80043c8 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003d10:	f7ff fe2f 	bl	8003972 <LL_RCC_MSI_GetRange>
 8003d14:	4603      	mov	r3, r0
 8003d16:	429c      	cmp	r4, r3
 8003d18:	d914      	bls.n	8003d44 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 fd42 	bl	80047a8 <RCC_SetFlashLatencyFromMSIRange>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e34c      	b.n	80043c8 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7ff fe09 	bl	800394a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff fe2d 	bl	800399c <LL_RCC_MSI_SetCalibTrimming>
 8003d42:	e013      	b.n	8003d6c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff fdfe 	bl	800394a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff fe22 	bl	800399c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 fd23 	bl	80047a8 <RCC_SetFlashLatencyFromMSIRange>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e32d      	b.n	80043c8 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003d6c:	f000 fcdc 	bl	8004728 <HAL_RCC_GetHCLKFreq>
 8003d70:	4603      	mov	r3, r0
 8003d72:	4ab3      	ldr	r2, [pc, #716]	; (8004040 <HAL_RCC_OscConfig+0x388>)
 8003d74:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003d76:	4bb3      	ldr	r3, [pc, #716]	; (8004044 <HAL_RCC_OscConfig+0x38c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fe fc46 	bl	800260c <HAL_InitTick>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d039      	beq.n	8003dfa <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e31e      	b.n	80043c8 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d01e      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d92:	f7ff fdab 	bl	80038ec <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d96:	f7fe fc87 	bl	80026a8 <HAL_GetTick>
 8003d9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003d9c:	e008      	b.n	8003db0 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d9e:	f7fe fc83 	bl	80026a8 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e30b      	b.n	80043c8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003db0:	f7ff fdba 	bl	8003928 <LL_RCC_MSI_IsReady>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0f1      	beq.n	8003d9e <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7ff fdc3 	bl	800394a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff fde7 	bl	800399c <LL_RCC_MSI_SetCalibTrimming>
 8003dce:	e015      	b.n	8003dfc <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003dd0:	f7ff fd9b 	bl	800390a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003dd4:	f7fe fc68 	bl	80026a8 <HAL_GetTick>
 8003dd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ddc:	f7fe fc64 	bl	80026a8 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e2ec      	b.n	80043c8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003dee:	f7ff fd9b 	bl	8003928 <LL_RCC_MSI_IsReady>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1f1      	bne.n	8003ddc <HAL_RCC_OscConfig+0x124>
 8003df8:	e000      	b.n	8003dfc <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003dfa:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d04e      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e08:	f7ff fdf1 	bl	80039ee <LL_RCC_GetSysClkSource>
 8003e0c:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e0e:	f7ff feea 	bl	8003be6 <LL_RCC_PLL_GetMainSource>
 8003e12:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003e14:	6a3b      	ldr	r3, [r7, #32]
 8003e16:	2b08      	cmp	r3, #8
 8003e18:	d005      	beq.n	8003e26 <HAL_RCC_OscConfig+0x16e>
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	2b0c      	cmp	r3, #12
 8003e1e:	d10d      	bne.n	8003e3c <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	2b03      	cmp	r3, #3
 8003e24:	d10a      	bne.n	8003e3c <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e26:	f7ff fc01 	bl	800362c <LL_RCC_HSE_IsReady>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d039      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x1ec>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d135      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e2c5      	b.n	80043c8 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e44:	d102      	bne.n	8003e4c <HAL_RCC_OscConfig+0x194>
 8003e46:	f7ff fbd3 	bl	80035f0 <LL_RCC_HSE_Enable>
 8003e4a:	e001      	b.n	8003e50 <HAL_RCC_OscConfig+0x198>
 8003e4c:	f7ff fbdf 	bl	800360e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d012      	beq.n	8003e7e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e58:	f7fe fc26 	bl	80026a8 <HAL_GetTick>
 8003e5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e60:	f7fe fc22 	bl	80026a8 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b64      	cmp	r3, #100	; 0x64
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e2aa      	b.n	80043c8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003e72:	f7ff fbdb 	bl	800362c <LL_RCC_HSE_IsReady>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d0f1      	beq.n	8003e60 <HAL_RCC_OscConfig+0x1a8>
 8003e7c:	e013      	b.n	8003ea6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7e:	f7fe fc13 	bl	80026a8 <HAL_GetTick>
 8003e82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e86:	f7fe fc0f 	bl	80026a8 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b64      	cmp	r3, #100	; 0x64
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e297      	b.n	80043c8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003e98:	f7ff fbc8 	bl	800362c <LL_RCC_HSE_IsReady>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f1      	bne.n	8003e86 <HAL_RCC_OscConfig+0x1ce>
 8003ea2:	e000      	b.n	8003ea6 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea4:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d051      	beq.n	8003f56 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eb2:	f7ff fd9c 	bl	80039ee <LL_RCC_GetSysClkSource>
 8003eb6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003eb8:	f7ff fe95 	bl	8003be6 <LL_RCC_PLL_GetMainSource>
 8003ebc:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	2b04      	cmp	r3, #4
 8003ec2:	d005      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x218>
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	2b0c      	cmp	r3, #12
 8003ec8:	d113      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d110      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ed0:	f7ff fbdc 	bl	800368c <LL_RCC_HSI_IsReady>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d005      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x22e>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e270      	b.n	80043c8 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff fbe0 	bl	80036b0 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ef0:	e031      	b.n	8003f56 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d019      	beq.n	8003f2e <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003efa:	f7ff fba9 	bl	8003650 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efe:	f7fe fbd3 	bl	80026a8 <HAL_GetTick>
 8003f02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f06:	f7fe fbcf 	bl	80026a8 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e257      	b.n	80043c8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003f18:	f7ff fbb8 	bl	800368c <LL_RCC_HSI_IsReady>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0f1      	beq.n	8003f06 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7ff fbc2 	bl	80036b0 <LL_RCC_HSI_SetCalibTrimming>
 8003f2c:	e013      	b.n	8003f56 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f2e:	f7ff fb9e 	bl	800366e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f32:	f7fe fbb9 	bl	80026a8 <HAL_GetTick>
 8003f36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f3a:	f7fe fbb5 	bl	80026a8 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e23d      	b.n	80043c8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003f4c:	f7ff fb9e 	bl	800368c <LL_RCC_HSI_IsReady>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f1      	bne.n	8003f3a <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0308 	and.w	r3, r3, #8
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d106      	bne.n	8003f70 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f000 80a3 	beq.w	80040b6 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d076      	beq.n	8004066 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0310 	and.w	r3, r3, #16
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d046      	beq.n	8004012 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003f84:	f7ff fc55 	bl	8003832 <LL_RCC_LSI1_IsReady>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d113      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003f8e:	f7ff fc2e 	bl	80037ee <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f92:	f7fe fb89 	bl	80026a8 <HAL_GetTick>
 8003f96:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003f98:	e008      	b.n	8003fac <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003f9a:	f7fe fb85 	bl	80026a8 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e20d      	b.n	80043c8 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003fac:	f7ff fc41 	bl	8003832 <LL_RCC_LSI1_IsReady>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0f1      	beq.n	8003f9a <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003fb6:	f7ff fc4e 	bl	8003856 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fba:	f7fe fb75 	bl	80026a8 <HAL_GetTick>
 8003fbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003fc2:	f7fe fb71 	bl	80026a8 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b03      	cmp	r3, #3
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e1f9      	b.n	80043c8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003fd4:	f7ff fc61 	bl	800389a <LL_RCC_LSI2_IsReady>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0f1      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff fc6b 	bl	80038be <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003fe8:	f7ff fc12 	bl	8003810 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fec:	f7fe fb5c 	bl	80026a8 <HAL_GetTick>
 8003ff0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003ff4:	f7fe fb58 	bl	80026a8 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e1e0      	b.n	80043c8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004006:	f7ff fc14 	bl	8003832 <LL_RCC_LSI1_IsReady>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1f1      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x33c>
 8004010:	e051      	b.n	80040b6 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004012:	f7ff fbec 	bl	80037ee <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004016:	f7fe fb47 	bl	80026a8 <HAL_GetTick>
 800401a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800401c:	e008      	b.n	8004030 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800401e:	f7fe fb43 	bl	80026a8 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e1cb      	b.n	80043c8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004030:	f7ff fbff 	bl	8003832 <LL_RCC_LSI1_IsReady>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d0f1      	beq.n	800401e <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800403a:	f7ff fc1d 	bl	8003878 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800403e:	e00c      	b.n	800405a <HAL_RCC_OscConfig+0x3a2>
 8004040:	20000004 	.word	0x20000004
 8004044:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004048:	f7fe fb2e 	bl	80026a8 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b03      	cmp	r3, #3
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e1b6      	b.n	80043c8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800405a:	f7ff fc1e 	bl	800389a <LL_RCC_LSI2_IsReady>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1f1      	bne.n	8004048 <HAL_RCC_OscConfig+0x390>
 8004064:	e027      	b.n	80040b6 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004066:	f7ff fc07 	bl	8003878 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800406a:	f7fe fb1d 	bl	80026a8 <HAL_GetTick>
 800406e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004070:	e008      	b.n	8004084 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004072:	f7fe fb19 	bl	80026a8 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b03      	cmp	r3, #3
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e1a1      	b.n	80043c8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004084:	f7ff fc09 	bl	800389a <LL_RCC_LSI2_IsReady>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1f1      	bne.n	8004072 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800408e:	f7ff fbbf 	bl	8003810 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004092:	f7fe fb09 	bl	80026a8 <HAL_GetTick>
 8004096:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800409a:	f7fe fb05 	bl	80026a8 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e18d      	b.n	80043c8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80040ac:	f7ff fbc1 	bl	8003832 <LL_RCC_LSI1_IsReady>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1f1      	bne.n	800409a <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0304 	and.w	r3, r3, #4
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d05b      	beq.n	800417a <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040c2:	4bb5      	ldr	r3, [pc, #724]	; (8004398 <HAL_RCC_OscConfig+0x6e0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d114      	bne.n	80040f8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80040ce:	f7ff fa5f 	bl	8003590 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040d2:	f7fe fae9 	bl	80026a8 <HAL_GetTick>
 80040d6:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040d8:	e008      	b.n	80040ec <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040da:	f7fe fae5 	bl	80026a8 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e16d      	b.n	80043c8 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040ec:	4baa      	ldr	r3, [pc, #680]	; (8004398 <HAL_RCC_OscConfig+0x6e0>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0f0      	beq.n	80040da <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d102      	bne.n	8004106 <HAL_RCC_OscConfig+0x44e>
 8004100:	f7ff fb1f 	bl	8003742 <LL_RCC_LSE_Enable>
 8004104:	e00c      	b.n	8004120 <HAL_RCC_OscConfig+0x468>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	2b05      	cmp	r3, #5
 800410c:	d104      	bne.n	8004118 <HAL_RCC_OscConfig+0x460>
 800410e:	f7ff fb3a 	bl	8003786 <LL_RCC_LSE_EnableBypass>
 8004112:	f7ff fb16 	bl	8003742 <LL_RCC_LSE_Enable>
 8004116:	e003      	b.n	8004120 <HAL_RCC_OscConfig+0x468>
 8004118:	f7ff fb24 	bl	8003764 <LL_RCC_LSE_Disable>
 800411c:	f7ff fb44 	bl	80037a8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d014      	beq.n	8004152 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004128:	f7fe fabe 	bl	80026a8 <HAL_GetTick>
 800412c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800412e:	e00a      	b.n	8004146 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004130:	f7fe faba 	bl	80026a8 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	f241 3288 	movw	r2, #5000	; 0x1388
 800413e:	4293      	cmp	r3, r2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e140      	b.n	80043c8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004146:	f7ff fb40 	bl	80037ca <LL_RCC_LSE_IsReady>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d0ef      	beq.n	8004130 <HAL_RCC_OscConfig+0x478>
 8004150:	e013      	b.n	800417a <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004152:	f7fe faa9 	bl	80026a8 <HAL_GetTick>
 8004156:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004158:	e00a      	b.n	8004170 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800415a:	f7fe faa5 	bl	80026a8 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	f241 3288 	movw	r2, #5000	; 0x1388
 8004168:	4293      	cmp	r3, r2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e12b      	b.n	80043c8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004170:	f7ff fb2b 	bl	80037ca <LL_RCC_LSE_IsReady>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1ef      	bne.n	800415a <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004182:	2b00      	cmp	r3, #0
 8004184:	d02c      	beq.n	80041e0 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418a:	2b00      	cmp	r3, #0
 800418c:	d014      	beq.n	80041b8 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800418e:	f7ff faa4 	bl	80036da <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004192:	f7fe fa89 	bl	80026a8 <HAL_GetTick>
 8004196:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004198:	e008      	b.n	80041ac <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800419a:	f7fe fa85 	bl	80026a8 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d901      	bls.n	80041ac <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e10d      	b.n	80043c8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80041ac:	f7ff fab7 	bl	800371e <LL_RCC_HSI48_IsReady>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d0f1      	beq.n	800419a <HAL_RCC_OscConfig+0x4e2>
 80041b6:	e013      	b.n	80041e0 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041b8:	f7ff faa0 	bl	80036fc <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041bc:	f7fe fa74 	bl	80026a8 <HAL_GetTick>
 80041c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041c4:	f7fe fa70 	bl	80026a8 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e0f8      	b.n	80043c8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80041d6:	f7ff faa2 	bl	800371e <LL_RCC_HSI48_IsReady>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1f1      	bne.n	80041c4 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 80ee 	beq.w	80043c6 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041ea:	f7ff fc00 	bl	80039ee <LL_RCC_GetSysClkSource>
 80041ee:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80041f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	f040 80af 	bne.w	8004360 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f003 0203 	and.w	r2, r3, #3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420c:	429a      	cmp	r2, r3
 800420e:	d123      	bne.n	8004258 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800421a:	429a      	cmp	r2, r3
 800421c:	d11c      	bne.n	8004258 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	0a1b      	lsrs	r3, r3, #8
 8004222:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800422a:	429a      	cmp	r2, r3
 800422c:	d114      	bne.n	8004258 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004238:	429a      	cmp	r2, r3
 800423a:	d10d      	bne.n	8004258 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004246:	429a      	cmp	r2, r3
 8004248:	d106      	bne.n	8004258 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004254:	429a      	cmp	r2, r3
 8004256:	d05d      	beq.n	8004314 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	2b0c      	cmp	r3, #12
 800425c:	d058      	beq.n	8004310 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800425e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e0ab      	b.n	80043c8 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004270:	f7ff fc73 	bl	8003b5a <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004274:	f7fe fa18 	bl	80026a8 <HAL_GetTick>
 8004278:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800427c:	f7fe fa14 	bl	80026a8 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e09c      	b.n	80043c8 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800428e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1ef      	bne.n	800427c <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800429c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	4b3e      	ldr	r3, [pc, #248]	; (800439c <HAL_RCC_OscConfig+0x6e4>)
 80042a4:	4013      	ands	r3, r2
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042ae:	4311      	orrs	r1, r2
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042b4:	0212      	lsls	r2, r2, #8
 80042b6:	4311      	orrs	r1, r2
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042bc:	4311      	orrs	r1, r2
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80042c2:	4311      	orrs	r1, r2
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80042c8:	430a      	orrs	r2, r1
 80042ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80042d2:	f7ff fc33 	bl	8003b3c <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042e4:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042e6:	f7fe f9df 	bl	80026a8 <HAL_GetTick>
 80042ea:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ec:	e008      	b.n	8004300 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ee:	f7fe f9db 	bl	80026a8 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e063      	b.n	80043c8 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0ef      	beq.n	80042ee <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800430e:	e05a      	b.n	80043c6 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e059      	b.n	80043c8 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d151      	bne.n	80043c6 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004322:	f7ff fc0b 	bl	8003b3c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004334:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004336:	f7fe f9b7 	bl	80026a8 <HAL_GetTick>
 800433a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800433c:	e008      	b.n	8004350 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800433e:	f7fe f9b3 	bl	80026a8 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e03b      	b.n	80043c8 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0ef      	beq.n	800433e <HAL_RCC_OscConfig+0x686>
 800435e:	e032      	b.n	80043c6 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	2b0c      	cmp	r3, #12
 8004364:	d02d      	beq.n	80043c2 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004366:	f7ff fbf8 	bl	8003b5a <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800436a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004374:	f023 0303 	bic.w	r3, r3, #3
 8004378:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800437a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004384:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8004388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800438c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438e:	f7fe f98b 	bl	80026a8 <HAL_GetTick>
 8004392:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004394:	e00d      	b.n	80043b2 <HAL_RCC_OscConfig+0x6fa>
 8004396:	bf00      	nop
 8004398:	58000400 	.word	0x58000400
 800439c:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a0:	f7fe f982 	bl	80026a8 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e00a      	b.n	80043c8 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1ef      	bne.n	80043a0 <HAL_RCC_OscConfig+0x6e8>
 80043c0:	e001      	b.n	80043c6 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e000      	b.n	80043c8 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3734      	adds	r7, #52	; 0x34
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd90      	pop	{r4, r7, pc}

080043d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e12d      	b.n	8004640 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043e4:	4b98      	ldr	r3, [pc, #608]	; (8004648 <HAL_RCC_ClockConfig+0x278>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d91b      	bls.n	800442a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043f2:	4b95      	ldr	r3, [pc, #596]	; (8004648 <HAL_RCC_ClockConfig+0x278>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f023 0207 	bic.w	r2, r3, #7
 80043fa:	4993      	ldr	r1, [pc, #588]	; (8004648 <HAL_RCC_ClockConfig+0x278>)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	4313      	orrs	r3, r2
 8004400:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004402:	f7fe f951 	bl	80026a8 <HAL_GetTick>
 8004406:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004408:	e008      	b.n	800441c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800440a:	f7fe f94d 	bl	80026a8 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d901      	bls.n	800441c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e111      	b.n	8004640 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800441c:	4b8a      	ldr	r3, [pc, #552]	; (8004648 <HAL_RCC_ClockConfig+0x278>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d1ef      	bne.n	800440a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d016      	beq.n	8004464 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	4618      	mov	r0, r3
 800443c:	f7ff fae3 	bl	8003a06 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004440:	f7fe f932 	bl	80026a8 <HAL_GetTick>
 8004444:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004446:	e008      	b.n	800445a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004448:	f7fe f92e 	bl	80026a8 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e0f2      	b.n	8004640 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800445a:	f7ff fbd0 	bl	8003bfe <LL_RCC_IsActiveFlag_HPRE>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0f1      	beq.n	8004448 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0320 	and.w	r3, r3, #32
 800446c:	2b00      	cmp	r3, #0
 800446e:	d016      	beq.n	800449e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	4618      	mov	r0, r3
 8004476:	f7ff fada 	bl	8003a2e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800447a:	f7fe f915 	bl	80026a8 <HAL_GetTick>
 800447e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004480:	e008      	b.n	8004494 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004482:	f7fe f911 	bl	80026a8 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e0d5      	b.n	8004640 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004494:	f7ff fbc5 	bl	8003c22 <LL_RCC_IsActiveFlag_C2HPRE>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d0f1      	beq.n	8004482 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d016      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7ff fad3 	bl	8003a5a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80044b4:	f7fe f8f8 	bl	80026a8 <HAL_GetTick>
 80044b8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80044bc:	f7fe f8f4 	bl	80026a8 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e0b8      	b.n	8004640 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80044ce:	f7ff fbbb 	bl	8003c48 <LL_RCC_IsActiveFlag_SHDHPRE>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0f1      	beq.n	80044bc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d016      	beq.n	8004512 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7ff facd 	bl	8003a88 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80044ee:	f7fe f8db 	bl	80026a8 <HAL_GetTick>
 80044f2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80044f4:	e008      	b.n	8004508 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80044f6:	f7fe f8d7 	bl	80026a8 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b02      	cmp	r3, #2
 8004502:	d901      	bls.n	8004508 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e09b      	b.n	8004640 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004508:	f7ff fbb1 	bl	8003c6e <LL_RCC_IsActiveFlag_PPRE1>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0f1      	beq.n	80044f6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0308 	and.w	r3, r3, #8
 800451a:	2b00      	cmp	r3, #0
 800451c:	d017      	beq.n	800454e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	4618      	mov	r0, r3
 8004526:	f7ff fac3 	bl	8003ab0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800452a:	f7fe f8bd 	bl	80026a8 <HAL_GetTick>
 800452e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004530:	e008      	b.n	8004544 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004532:	f7fe f8b9 	bl	80026a8 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d901      	bls.n	8004544 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e07d      	b.n	8004640 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004544:	f7ff fba5 	bl	8003c92 <LL_RCC_IsActiveFlag_PPRE2>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d0f1      	beq.n	8004532 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d043      	beq.n	80045e2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2b02      	cmp	r3, #2
 8004560:	d106      	bne.n	8004570 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004562:	f7ff f863 	bl	800362c <LL_RCC_HSE_IsReady>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d11e      	bne.n	80045aa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e067      	b.n	8004640 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	2b03      	cmp	r3, #3
 8004576:	d106      	bne.n	8004586 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004578:	f7ff fafe 	bl	8003b78 <LL_RCC_PLL_IsReady>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d113      	bne.n	80045aa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e05c      	b.n	8004640 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d106      	bne.n	800459c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800458e:	f7ff f9cb 	bl	8003928 <LL_RCC_MSI_IsReady>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d108      	bne.n	80045aa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e051      	b.n	8004640 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800459c:	f7ff f876 	bl	800368c <LL_RCC_HSI_IsReady>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e04a      	b.n	8004640 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7ff fa09 	bl	80039c6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045b4:	f7fe f878 	bl	80026a8 <HAL_GetTick>
 80045b8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ba:	e00a      	b.n	80045d2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045bc:	f7fe f874 	bl	80026a8 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e036      	b.n	8004640 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045d2:	f7ff fa0c 	bl	80039ee <LL_RCC_GetSysClkSource>
 80045d6:	4602      	mov	r2, r0
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	429a      	cmp	r2, r3
 80045e0:	d1ec      	bne.n	80045bc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045e2:	4b19      	ldr	r3, [pc, #100]	; (8004648 <HAL_RCC_ClockConfig+0x278>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0307 	and.w	r3, r3, #7
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d21b      	bcs.n	8004628 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f0:	4b15      	ldr	r3, [pc, #84]	; (8004648 <HAL_RCC_ClockConfig+0x278>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f023 0207 	bic.w	r2, r3, #7
 80045f8:	4913      	ldr	r1, [pc, #76]	; (8004648 <HAL_RCC_ClockConfig+0x278>)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004600:	f7fe f852 	bl	80026a8 <HAL_GetTick>
 8004604:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004606:	e008      	b.n	800461a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004608:	f7fe f84e 	bl	80026a8 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d901      	bls.n	800461a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e012      	b.n	8004640 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800461a:	4b0b      	ldr	r3, [pc, #44]	; (8004648 <HAL_RCC_ClockConfig+0x278>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	429a      	cmp	r2, r3
 8004626:	d1ef      	bne.n	8004608 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004628:	f000 f87e 	bl	8004728 <HAL_RCC_GetHCLKFreq>
 800462c:	4603      	mov	r3, r0
 800462e:	4a07      	ldr	r2, [pc, #28]	; (800464c <HAL_RCC_ClockConfig+0x27c>)
 8004630:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004632:	f7fe f845 	bl	80026c0 <HAL_GetTickPrio>
 8004636:	4603      	mov	r3, r0
 8004638:	4618      	mov	r0, r3
 800463a:	f7fd ffe7 	bl	800260c <HAL_InitTick>
 800463e:	4603      	mov	r3, r0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	58004000 	.word	0x58004000
 800464c:	20000004 	.word	0x20000004

08004650 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004650:	b590      	push	{r4, r7, lr}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004656:	f7ff f9ca 	bl	80039ee <LL_RCC_GetSysClkSource>
 800465a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10a      	bne.n	8004678 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004662:	f7ff f986 	bl	8003972 <LL_RCC_MSI_GetRange>
 8004666:	4603      	mov	r3, r0
 8004668:	091b      	lsrs	r3, r3, #4
 800466a:	f003 030f 	and.w	r3, r3, #15
 800466e:	4a2b      	ldr	r2, [pc, #172]	; (800471c <HAL_RCC_GetSysClockFreq+0xcc>)
 8004670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004674:	60fb      	str	r3, [r7, #12]
 8004676:	e04b      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b04      	cmp	r3, #4
 800467c:	d102      	bne.n	8004684 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800467e:	4b28      	ldr	r3, [pc, #160]	; (8004720 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004680:	60fb      	str	r3, [r7, #12]
 8004682:	e045      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b08      	cmp	r3, #8
 8004688:	d10a      	bne.n	80046a0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800468a:	f7fe ff9f 	bl	80035cc <LL_RCC_HSE_IsEnabledDiv2>
 800468e:	4603      	mov	r3, r0
 8004690:	2b01      	cmp	r3, #1
 8004692:	d102      	bne.n	800469a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004694:	4b22      	ldr	r3, [pc, #136]	; (8004720 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	e03a      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800469a:	4b22      	ldr	r3, [pc, #136]	; (8004724 <HAL_RCC_GetSysClockFreq+0xd4>)
 800469c:	60fb      	str	r3, [r7, #12]
 800469e:	e037      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80046a0:	f7ff faa1 	bl	8003be6 <LL_RCC_PLL_GetMainSource>
 80046a4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d003      	beq.n	80046b4 <HAL_RCC_GetSysClockFreq+0x64>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	2b03      	cmp	r3, #3
 80046b0:	d003      	beq.n	80046ba <HAL_RCC_GetSysClockFreq+0x6a>
 80046b2:	e00d      	b.n	80046d0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80046b4:	4b1a      	ldr	r3, [pc, #104]	; (8004720 <HAL_RCC_GetSysClockFreq+0xd0>)
 80046b6:	60bb      	str	r3, [r7, #8]
        break;
 80046b8:	e015      	b.n	80046e6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80046ba:	f7fe ff87 	bl	80035cc <LL_RCC_HSE_IsEnabledDiv2>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d102      	bne.n	80046ca <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80046c4:	4b16      	ldr	r3, [pc, #88]	; (8004720 <HAL_RCC_GetSysClockFreq+0xd0>)
 80046c6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80046c8:	e00d      	b.n	80046e6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80046ca:	4b16      	ldr	r3, [pc, #88]	; (8004724 <HAL_RCC_GetSysClockFreq+0xd4>)
 80046cc:	60bb      	str	r3, [r7, #8]
        break;
 80046ce:	e00a      	b.n	80046e6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80046d0:	f7ff f94f 	bl	8003972 <LL_RCC_MSI_GetRange>
 80046d4:	4603      	mov	r3, r0
 80046d6:	091b      	lsrs	r3, r3, #4
 80046d8:	f003 030f 	and.w	r3, r3, #15
 80046dc:	4a0f      	ldr	r2, [pc, #60]	; (800471c <HAL_RCC_GetSysClockFreq+0xcc>)
 80046de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046e2:	60bb      	str	r3, [r7, #8]
        break;
 80046e4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80046e6:	f7ff fa59 	bl	8003b9c <LL_RCC_PLL_GetN>
 80046ea:	4602      	mov	r2, r0
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	fb03 f402 	mul.w	r4, r3, r2
 80046f2:	f7ff fa6c 	bl	8003bce <LL_RCC_PLL_GetDivider>
 80046f6:	4603      	mov	r3, r0
 80046f8:	091b      	lsrs	r3, r3, #4
 80046fa:	3301      	adds	r3, #1
 80046fc:	fbb4 f4f3 	udiv	r4, r4, r3
 8004700:	f7ff fa59 	bl	8003bb6 <LL_RCC_PLL_GetR>
 8004704:	4603      	mov	r3, r0
 8004706:	0f5b      	lsrs	r3, r3, #29
 8004708:	3301      	adds	r3, #1
 800470a:	fbb4 f3f3 	udiv	r3, r4, r3
 800470e:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8004710:	68fb      	ldr	r3, [r7, #12]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3714      	adds	r7, #20
 8004716:	46bd      	mov	sp, r7
 8004718:	bd90      	pop	{r4, r7, pc}
 800471a:	bf00      	nop
 800471c:	0800bad4 	.word	0x0800bad4
 8004720:	00f42400 	.word	0x00f42400
 8004724:	01e84800 	.word	0x01e84800

08004728 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004728:	b598      	push	{r3, r4, r7, lr}
 800472a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800472c:	f7ff ff90 	bl	8004650 <HAL_RCC_GetSysClockFreq>
 8004730:	4604      	mov	r4, r0
 8004732:	f7ff f9d1 	bl	8003ad8 <LL_RCC_GetAHBPrescaler>
 8004736:	4603      	mov	r3, r0
 8004738:	091b      	lsrs	r3, r3, #4
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	4a03      	ldr	r2, [pc, #12]	; (800474c <HAL_RCC_GetHCLKFreq+0x24>)
 8004740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004744:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004748:	4618      	mov	r0, r3
 800474a:	bd98      	pop	{r3, r4, r7, pc}
 800474c:	0800ba74 	.word	0x0800ba74

08004750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004750:	b598      	push	{r3, r4, r7, lr}
 8004752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004754:	f7ff ffe8 	bl	8004728 <HAL_RCC_GetHCLKFreq>
 8004758:	4604      	mov	r4, r0
 800475a:	f7ff f9d7 	bl	8003b0c <LL_RCC_GetAPB1Prescaler>
 800475e:	4603      	mov	r3, r0
 8004760:	0a1b      	lsrs	r3, r3, #8
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	4a04      	ldr	r2, [pc, #16]	; (8004778 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800476c:	f003 031f 	and.w	r3, r3, #31
 8004770:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004774:	4618      	mov	r0, r3
 8004776:	bd98      	pop	{r3, r4, r7, pc}
 8004778:	0800bab4 	.word	0x0800bab4

0800477c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800477c:	b598      	push	{r3, r4, r7, lr}
 800477e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004780:	f7ff ffd2 	bl	8004728 <HAL_RCC_GetHCLKFreq>
 8004784:	4604      	mov	r4, r0
 8004786:	f7ff f9cd 	bl	8003b24 <LL_RCC_GetAPB2Prescaler>
 800478a:	4603      	mov	r3, r0
 800478c:	0adb      	lsrs	r3, r3, #11
 800478e:	f003 0307 	and.w	r3, r3, #7
 8004792:	4a04      	ldr	r2, [pc, #16]	; (80047a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004798:	f003 031f 	and.w	r3, r3, #31
 800479c:	fa24 f303 	lsr.w	r3, r4, r3
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	bd98      	pop	{r3, r4, r7, pc}
 80047a4:	0800bab4 	.word	0x0800bab4

080047a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80047a8:	b590      	push	{r4, r7, lr}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2bb0      	cmp	r3, #176	; 0xb0
 80047b4:	d903      	bls.n	80047be <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80047b6:	4b15      	ldr	r3, [pc, #84]	; (800480c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80047b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	e007      	b.n	80047ce <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	091b      	lsrs	r3, r3, #4
 80047c2:	f003 030f 	and.w	r3, r3, #15
 80047c6:	4a11      	ldr	r2, [pc, #68]	; (800480c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80047c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047cc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80047ce:	f7ff f98f 	bl	8003af0 <LL_RCC_GetAHB4Prescaler>
 80047d2:	4603      	mov	r3, r0
 80047d4:	091b      	lsrs	r3, r3, #4
 80047d6:	f003 030f 	and.w	r3, r3, #15
 80047da:	4a0d      	ldr	r2, [pc, #52]	; (8004810 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80047dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	4a0a      	ldr	r2, [pc, #40]	; (8004814 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80047ec:	fba2 2303 	umull	r2, r3, r2, r3
 80047f0:	0c9c      	lsrs	r4, r3, #18
 80047f2:	f7fe fedd 	bl	80035b0 <HAL_PWREx_GetVoltageRange>
 80047f6:	4603      	mov	r3, r0
 80047f8:	4619      	mov	r1, r3
 80047fa:	4620      	mov	r0, r4
 80047fc:	f000 f80c 	bl	8004818 <RCC_SetFlashLatency>
 8004800:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8004802:	4618      	mov	r0, r3
 8004804:	3714      	adds	r7, #20
 8004806:	46bd      	mov	sp, r7
 8004808:	bd90      	pop	{r4, r7, pc}
 800480a:	bf00      	nop
 800480c:	0800bad4 	.word	0x0800bad4
 8004810:	0800ba74 	.word	0x0800ba74
 8004814:	431bde83 	.word	0x431bde83

08004818 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004818:	b590      	push	{r4, r7, lr}
 800481a:	b093      	sub	sp, #76	; 0x4c
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004822:	4b39      	ldr	r3, [pc, #228]	; (8004908 <RCC_SetFlashLatency+0xf0>)
 8004824:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004828:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800482a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800482e:	4a37      	ldr	r2, [pc, #220]	; (800490c <RCC_SetFlashLatency+0xf4>)
 8004830:	f107 031c 	add.w	r3, r7, #28
 8004834:	ca07      	ldmia	r2, {r0, r1, r2}
 8004836:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800483a:	4b35      	ldr	r3, [pc, #212]	; (8004910 <RCC_SetFlashLatency+0xf8>)
 800483c:	f107 040c 	add.w	r4, r7, #12
 8004840:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004842:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004846:	2300      	movs	r3, #0
 8004848:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004850:	d11c      	bne.n	800488c <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004852:	2300      	movs	r3, #0
 8004854:	643b      	str	r3, [r7, #64]	; 0x40
 8004856:	e015      	b.n	8004884 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004860:	4413      	add	r3, r2
 8004862:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	429a      	cmp	r2, r3
 800486a:	d808      	bhi.n	800487e <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800486c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004874:	4413      	add	r3, r2
 8004876:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800487a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800487c:	e022      	b.n	80048c4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800487e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004880:	3301      	adds	r3, #1
 8004882:	643b      	str	r3, [r7, #64]	; 0x40
 8004884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004886:	2b03      	cmp	r3, #3
 8004888:	d9e6      	bls.n	8004858 <RCC_SetFlashLatency+0x40>
 800488a:	e01b      	b.n	80048c4 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800488c:	2300      	movs	r3, #0
 800488e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004890:	e015      	b.n	80048be <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800489a:	4413      	add	r3, r2
 800489c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d808      	bhi.n	80048b8 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80048a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80048ae:	4413      	add	r3, r2
 80048b0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80048b4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80048b6:	e005      	b.n	80048c4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80048b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ba:	3301      	adds	r3, #1
 80048bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d9e6      	bls.n	8004892 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80048c4:	4b13      	ldr	r3, [pc, #76]	; (8004914 <RCC_SetFlashLatency+0xfc>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f023 0207 	bic.w	r2, r3, #7
 80048cc:	4911      	ldr	r1, [pc, #68]	; (8004914 <RCC_SetFlashLatency+0xfc>)
 80048ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048d0:	4313      	orrs	r3, r2
 80048d2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80048d4:	f7fd fee8 	bl	80026a8 <HAL_GetTick>
 80048d8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80048da:	e008      	b.n	80048ee <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80048dc:	f7fd fee4 	bl	80026a8 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e007      	b.n	80048fe <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80048ee:	4b09      	ldr	r3, [pc, #36]	; (8004914 <RCC_SetFlashLatency+0xfc>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0307 	and.w	r3, r3, #7
 80048f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d1ef      	bne.n	80048dc <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	374c      	adds	r7, #76	; 0x4c
 8004902:	46bd      	mov	sp, r7
 8004904:	bd90      	pop	{r4, r7, pc}
 8004906:	bf00      	nop
 8004908:	0800b6d0 	.word	0x0800b6d0
 800490c:	0800b6e0 	.word	0x0800b6e0
 8004910:	0800b6ec 	.word	0x0800b6ec
 8004914:	58004000 	.word	0x58004000

08004918 <LL_RCC_LSE_IsEnabled>:
{
 8004918:	b480      	push	{r7}
 800491a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800491c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004924:	f003 0301 	and.w	r3, r3, #1
 8004928:	2b01      	cmp	r3, #1
 800492a:	d101      	bne.n	8004930 <LL_RCC_LSE_IsEnabled+0x18>
 800492c:	2301      	movs	r3, #1
 800492e:	e000      	b.n	8004932 <LL_RCC_LSE_IsEnabled+0x1a>
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <LL_RCC_LSE_IsReady>:
{
 800493c:	b480      	push	{r7}
 800493e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b02      	cmp	r3, #2
 800494e:	d101      	bne.n	8004954 <LL_RCC_LSE_IsReady+0x18>
 8004950:	2301      	movs	r3, #1
 8004952:	e000      	b.n	8004956 <LL_RCC_LSE_IsReady+0x1a>
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <LL_RCC_SetRFWKPClockSource>:
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800496c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004970:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004974:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4313      	orrs	r3, r2
 800497c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <LL_RCC_SetSMPSClockSource>:
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	f023 0203 	bic.w	r2, r3, #3
 800499e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <LL_RCC_SetSMPSPrescaler>:
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80049bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80049c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	624b      	str	r3, [r1, #36]	; 0x24
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <LL_RCC_SetUSARTClockSource>:
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80049e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ec:	f023 0203 	bic.w	r2, r3, #3
 80049f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <LL_RCC_SetLPUARTClockSource>:
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a18:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <LL_RCC_SetI2CClockSource>:
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a40:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	091b      	lsrs	r3, r3, #4
 8004a48:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004a4c:	43db      	mvns	r3, r3
 8004a4e:	401a      	ands	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	011b      	lsls	r3, r3, #4
 8004a54:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004a58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <LL_RCC_SetLPTIMClockSource>:
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b083      	sub	sp, #12
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a7a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	0c1b      	lsrs	r3, r3, #16
 8004a82:	041b      	lsls	r3, r3, #16
 8004a84:	43db      	mvns	r3, r3
 8004a86:	401a      	ands	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	041b      	lsls	r3, r3, #16
 8004a8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a90:	4313      	orrs	r3, r2
 8004a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <LL_RCC_SetSAIClockSource>:
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b083      	sub	sp, #12
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ab6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004ac2:	bf00      	nop
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <LL_RCC_SetRNGClockSource>:
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b083      	sub	sp, #12
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ade:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004ae2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004aee:	bf00      	nop
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <LL_RCC_SetCLK48ClockSource>:
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b1a:	bf00      	nop
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <LL_RCC_SetUSBClockSource>:
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b082      	sub	sp, #8
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7ff ffe3 	bl	8004afa <LL_RCC_SetCLK48ClockSource>
}
 8004b34:	bf00      	nop
 8004b36:	3708      	adds	r7, #8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <LL_RCC_SetADCClockSource>:
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <LL_RCC_SetRTCClockSource>:
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <LL_RCC_GetRTCClockSource>:
{
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba0:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <LL_RCC_ForceBackupDomainReset>:
{
 8004bae:	b480      	push	{r7}
 8004bb0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004bc6:	bf00      	nop
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004be4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004be8:	bf00      	nop
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <LL_RCC_PLLSAI1_Enable>:
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c04:	6013      	str	r3, [r2, #0]
}
 8004c06:	bf00      	nop
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <LL_RCC_PLLSAI1_Disable>:
{
 8004c10:	b480      	push	{r7}
 8004c12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c22:	6013      	str	r3, [r2, #0]
}
 8004c24:	bf00      	nop
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <LL_RCC_PLLSAI1_IsReady>:
{
 8004c2e:	b480      	push	{r7}
 8004c30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c40:	d101      	bne.n	8004c46 <LL_RCC_PLLSAI1_IsReady+0x18>
 8004c42:	2301      	movs	r3, #1
 8004c44:	e000      	b.n	8004c48 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b088      	sub	sp, #32
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004c5e:	2300      	movs	r3, #0
 8004c60:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d034      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c72:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c76:	d021      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004c78:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c7c:	d81b      	bhi.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004c7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c82:	d01d      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004c84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c88:	d815      	bhi.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00b      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004c8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c92:	d110      	bne.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ca2:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004ca4:	e00d      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	3304      	adds	r3, #4
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 f947 	bl	8004f3e <RCCEx_PLLSAI1_ConfigNP>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004cb4:	e005      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	77fb      	strb	r3, [r7, #31]
        break;
 8004cba:	e002      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004cbc:	bf00      	nop
 8004cbe:	e000      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004cc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cc2:	7ffb      	ldrb	r3, [r7, #31]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d105      	bne.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7ff fee8 	bl	8004aa2 <LL_RCC_SetSAIClockSource>
 8004cd2:	e001      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd4:	7ffb      	ldrb	r3, [r7, #31]
 8004cd6:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d046      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004ce4:	f7ff ff56 	bl	8004b94 <LL_RCC_GetRTCClockSource>
 8004ce8:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d03c      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004cf4:	f7fe fc4c 	bl	8003590 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d105      	bne.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7ff ff30 	bl	8004b68 <LL_RCC_SetRTCClockSource>
 8004d08:	e02e      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d12:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004d14:	f7ff ff4b 	bl	8004bae <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004d18:	f7ff ff5a 	bl	8004bd0 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	4313      	orrs	r3, r2
 8004d28:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004d2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004d34:	f7ff fdf0 	bl	8004918 <LL_RCC_LSE_IsEnabled>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d114      	bne.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d3e:	f7fd fcb3 	bl	80026a8 <HAL_GetTick>
 8004d42:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004d44:	e00b      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d46:	f7fd fcaf 	bl	80026a8 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d902      	bls.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	77fb      	strb	r3, [r7, #31]
              break;
 8004d5c:	e004      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004d5e:	f7ff fded 	bl	800493c <LL_RCC_LSE_IsReady>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d1ee      	bne.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004d68:	7ffb      	ldrb	r3, [r7, #31]
 8004d6a:	77bb      	strb	r3, [r7, #30]
 8004d6c:	e001      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d6e:	7ffb      	ldrb	r3, [r7, #31]
 8004d70:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d004      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7ff fe2a 	bl	80049dc <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0302 	and.w	r3, r3, #2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d004      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	69db      	ldr	r3, [r3, #28]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7ff fe35 	bl	8004a08 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0310 	and.w	r3, r3, #16
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d004      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7ff fe5d 	bl	8004a6e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0320 	and.w	r3, r3, #32
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d004      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7ff fe52 	bl	8004a6e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0304 	and.w	r3, r3, #4
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d004      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7ff fe2a 	bl	8004a34 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0308 	and.w	r3, r3, #8
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d004      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7ff fe1f 	bl	8004a34 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d022      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7ff fe8d 	bl	8004b26 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e14:	d107      	bne.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004e16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e24:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e2e:	d10b      	bne.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	3304      	adds	r3, #4
 8004e34:	4618      	mov	r0, r3
 8004e36:	f000 f8dd 	bl	8004ff4 <RCCEx_PLLSAI1_ConfigNQ>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004e3e:	7ffb      	ldrb	r3, [r7, #31]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d001      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8004e44:	7ffb      	ldrb	r3, [r7, #31]
 8004e46:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d02b      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e5c:	d008      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e66:	d003      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d105      	bne.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7ff fe2a 	bl	8004ace <LL_RCC_SetRNGClockSource>
 8004e7a:	e00a      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e84:	60fb      	str	r3, [r7, #12]
 8004e86:	2000      	movs	r0, #0
 8004e88:	f7ff fe21 	bl	8004ace <LL_RCC_SetRNGClockSource>
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f7ff fe34 	bl	8004afa <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e96:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004e9a:	d107      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004eaa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d022      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7ff fe3d 	bl	8004b3c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004eca:	d107      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ed6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eda:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ee4:	d10b      	bne.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	3304      	adds	r3, #4
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 f8dd 	bl	80050aa <RCCEx_PLLSAI1_ConfigNR>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004ef4:	7ffb      	ldrb	r3, [r7, #31]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8004efa:	7ffb      	ldrb	r3, [r7, #31]
 8004efc:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d004      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7ff fd26 	bl	8004960 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d009      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7ff fd45 	bl	80049b4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7ff fd2c 	bl	800498c <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8004f34:	7fbb      	ldrb	r3, [r7, #30]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3720      	adds	r7, #32
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b084      	sub	sp, #16
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f46:	2300      	movs	r3, #0
 8004f48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004f4a:	f7ff fe61 	bl	8004c10 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004f4e:	f7fd fbab 	bl	80026a8 <HAL_GetTick>
 8004f52:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004f54:	e009      	b.n	8004f6a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f56:	f7fd fba7 	bl	80026a8 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d902      	bls.n	8004f6a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	73fb      	strb	r3, [r7, #15]
      break;
 8004f68:	e004      	b.n	8004f74 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004f6a:	f7ff fe60 	bl	8004c2e <LL_RCC_PLLSAI1_IsReady>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1f0      	bne.n	8004f56 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004f74:	7bfb      	ldrb	r3, [r7, #15]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d137      	bne.n	8004fea <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	021b      	lsls	r3, r3, #8
 8004f8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004fa8:	f7ff fe23 	bl	8004bf2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fac:	f7fd fb7c 	bl	80026a8 <HAL_GetTick>
 8004fb0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004fb2:	e009      	b.n	8004fc8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fb4:	f7fd fb78 	bl	80026a8 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d902      	bls.n	8004fc8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	73fb      	strb	r3, [r7, #15]
        break;
 8004fc6:	e004      	b.n	8004fd2 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004fc8:	f7ff fe31 	bl	8004c2e <LL_RCC_PLLSAI1_IsReady>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d1f0      	bne.n	8004fb4 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004fd2:	7bfb      	ldrb	r3, [r7, #15]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d108      	bne.n	8004fea <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fdc:	691a      	ldr	r2, [r3, #16]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3710      	adds	r7, #16
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005000:	f7ff fe06 	bl	8004c10 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005004:	f7fd fb50 	bl	80026a8 <HAL_GetTick>
 8005008:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800500a:	e009      	b.n	8005020 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800500c:	f7fd fb4c 	bl	80026a8 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d902      	bls.n	8005020 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	73fb      	strb	r3, [r7, #15]
      break;
 800501e:	e004      	b.n	800502a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005020:	f7ff fe05 	bl	8004c2e <LL_RCC_PLLSAI1_IsReady>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1f0      	bne.n	800500c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800502a:	7bfb      	ldrb	r3, [r7, #15]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d137      	bne.n	80050a0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	021b      	lsls	r3, r3, #8
 8005040:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005044:	4313      	orrs	r3, r2
 8005046:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800505a:	4313      	orrs	r3, r2
 800505c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800505e:	f7ff fdc8 	bl	8004bf2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005062:	f7fd fb21 	bl	80026a8 <HAL_GetTick>
 8005066:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005068:	e009      	b.n	800507e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800506a:	f7fd fb1d 	bl	80026a8 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b02      	cmp	r3, #2
 8005076:	d902      	bls.n	800507e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	73fb      	strb	r3, [r7, #15]
        break;
 800507c:	e004      	b.n	8005088 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800507e:	f7ff fdd6 	bl	8004c2e <LL_RCC_PLLSAI1_IsReady>
 8005082:	4603      	mov	r3, r0
 8005084:	2b01      	cmp	r3, #1
 8005086:	d1f0      	bne.n	800506a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005088:	7bfb      	ldrb	r3, [r7, #15]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d108      	bne.n	80050a0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800508e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005092:	691a      	ldr	r2, [r3, #16]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800509c:	4313      	orrs	r3, r2
 800509e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80050a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b084      	sub	sp, #16
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050b2:	2300      	movs	r3, #0
 80050b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80050b6:	f7ff fdab 	bl	8004c10 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80050ba:	f7fd faf5 	bl	80026a8 <HAL_GetTick>
 80050be:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80050c0:	e009      	b.n	80050d6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050c2:	f7fd faf1 	bl	80026a8 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d902      	bls.n	80050d6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	73fb      	strb	r3, [r7, #15]
      break;
 80050d4:	e004      	b.n	80050e0 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80050d6:	f7ff fdaa 	bl	8004c2e <LL_RCC_PLLSAI1_IsReady>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1f0      	bne.n	80050c2 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80050e0:	7bfb      	ldrb	r3, [r7, #15]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d137      	bne.n	8005156 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80050e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	021b      	lsls	r3, r3, #8
 80050f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050fa:	4313      	orrs	r3, r2
 80050fc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80050fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005110:	4313      	orrs	r3, r2
 8005112:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005114:	f7ff fd6d 	bl	8004bf2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005118:	f7fd fac6 	bl	80026a8 <HAL_GetTick>
 800511c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800511e:	e009      	b.n	8005134 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005120:	f7fd fac2 	bl	80026a8 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b02      	cmp	r3, #2
 800512c:	d902      	bls.n	8005134 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	73fb      	strb	r3, [r7, #15]
        break;
 8005132:	e004      	b.n	800513e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005134:	f7ff fd7b 	bl	8004c2e <LL_RCC_PLLSAI1_IsReady>
 8005138:	4603      	mov	r3, r0
 800513a:	2b01      	cmp	r3, #1
 800513c:	d1f0      	bne.n	8005120 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800513e:	7bfb      	ldrb	r3, [r7, #15]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d108      	bne.n	8005156 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005148:	691a      	ldr	r2, [r3, #16]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005152:	4313      	orrs	r3, r2
 8005154:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005156:	7bfb      	ldrb	r3, [r7, #15]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d101      	bne.n	8005172 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e090      	b.n	8005294 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d106      	bne.n	800518c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7fc ffa4 	bl	80020d4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	22ca      	movs	r2, #202	; 0xca
 800519a:	625a      	str	r2, [r3, #36]	; 0x24
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2253      	movs	r2, #83	; 0x53
 80051a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 f89f 	bl	80052e8 <RTC_EnterInitMode>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d009      	beq.n	80051c4 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	22ff      	movs	r2, #255	; 0xff
 80051b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2204      	movs	r2, #4
 80051bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e067      	b.n	8005294 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	6812      	ldr	r2, [r2, #0]
 80051ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80051d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051d6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6899      	ldr	r1, [r3, #8]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	431a      	orrs	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	431a      	orrs	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	68d2      	ldr	r2, [r2, #12]
 80051fe:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6919      	ldr	r1, [r3, #16]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	041a      	lsls	r2, r3, #16
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68da      	ldr	r2, [r3, #12]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005222:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 0203 	bic.w	r2, r2, #3
 8005232:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	69da      	ldr	r2, [r3, #28]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	431a      	orrs	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f003 0320 	and.w	r3, r3, #32
 8005256:	2b00      	cmp	r3, #0
 8005258:	d113      	bne.n	8005282 <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f81e 	bl	800529c <HAL_RTC_WaitForSynchro>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00d      	beq.n	8005282 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	22ff      	movs	r2, #255	; 0xff
 800526c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2204      	movs	r2, #4
 8005272:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e008      	b.n	8005294 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	22ff      	movs	r2, #255	; 0xff
 8005288:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8005292:	2300      	movs	r3, #0
  }
}
 8005294:	4618      	mov	r0, r3
 8005296:	3708      	adds	r7, #8
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68da      	ldr	r2, [r3, #12]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80052b2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80052b4:	f7fd f9f8 	bl	80026a8 <HAL_GetTick>
 80052b8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80052ba:	e009      	b.n	80052d0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80052bc:	f7fd f9f4 	bl	80026a8 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052ca:	d901      	bls.n	80052d0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e007      	b.n	80052e0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	f003 0320 	and.w	r3, r3, #32
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d0ee      	beq.n	80052bc <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d119      	bne.n	8005332 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f04f 32ff 	mov.w	r2, #4294967295
 8005306:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005308:	f7fd f9ce 	bl	80026a8 <HAL_GetTick>
 800530c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800530e:	e009      	b.n	8005324 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005310:	f7fd f9ca 	bl	80026a8 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800531e:	d901      	bls.n	8005324 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e007      	b.n	8005334 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532e:	2b00      	cmp	r3, #0
 8005330:	d0ee      	beq.n	8005310 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3710      	adds	r7, #16
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d101      	bne.n	8005356 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8005352:	2302      	movs	r3, #2
 8005354:	e0a8      	b.n	80054a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2202      	movs	r2, #2
 8005362:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	22ca      	movs	r2, #202	; 0xca
 800536c:	625a      	str	r2, [r3, #36]	; 0x24
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2253      	movs	r2, #83	; 0x53
 8005374:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005380:	2b00      	cmp	r3, #0
 8005382:	d020      	beq.n	80053c6 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8005384:	f7fd f990 	bl	80026a8 <HAL_GetTick>
 8005388:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800538a:	e015      	b.n	80053b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800538c:	f7fd f98c 	bl	80026a8 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800539a:	d90d      	bls.n	80053b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	22ff      	movs	r2, #255	; 0xff
 80053a2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2203      	movs	r2, #3
 80053a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e077      	b.n	80054a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	f003 0304 	and.w	r3, r3, #4
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1e2      	bne.n	800538c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053d4:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	b2da      	uxtb	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80053e6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80053e8:	f7fd f95e 	bl	80026a8 <HAL_GetTick>
 80053ec:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80053ee:	e015      	b.n	800541c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80053f0:	f7fd f95a 	bl	80026a8 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053fe:	d90d      	bls.n	800541c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	22ff      	movs	r2, #255	; 0xff
 8005406:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2203      	movs	r2, #3
 800540c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e045      	b.n	80054a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	f003 0304 	and.w	r3, r3, #4
 8005426:	2b00      	cmp	r3, #0
 8005428:	d0e2      	beq.n	80053f0 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	689a      	ldr	r2, [r3, #8]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 0207 	bic.w	r2, r2, #7
 8005440:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6899      	ldr	r1, [r3, #8]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	430a      	orrs	r2, r1
 8005450:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005452:	4b17      	ldr	r3, [pc, #92]	; (80054b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005454:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005458:	4a15      	ldr	r2, [pc, #84]	; (80054b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800545a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800545e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005462:	4b13      	ldr	r3, [pc, #76]	; (80054b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a12      	ldr	r2, [pc, #72]	; (80054b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005468:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800546c:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	689a      	ldr	r2, [r3, #8]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800547c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800548c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	22ff      	movs	r2, #255	; 0xff
 8005494:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3718      	adds	r7, #24
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	58000800 	.word	0x58000800

080054b4 <LL_RCC_GetUSARTClockSource>:
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80054bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4013      	ands	r3, r2
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <LL_RCC_GetLPUARTClockSource>:
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80054dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4013      	ands	r3, r2
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e042      	b.n	800558c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800550c:	2b00      	cmp	r3, #0
 800550e:	d106      	bne.n	800551e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7fc fe0f 	bl	800213c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2224      	movs	r2, #36	; 0x24
 8005522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f022 0201 	bic.w	r2, r2, #1
 8005534:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 fbf6 	bl	8005d28 <UART_SetConfig>
 800553c:	4603      	mov	r3, r0
 800553e:	2b01      	cmp	r3, #1
 8005540:	d101      	bne.n	8005546 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e022      	b.n	800558c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554a:	2b00      	cmp	r3, #0
 800554c:	d002      	beq.n	8005554 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 fdf0 	bl	8006134 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685a      	ldr	r2, [r3, #4]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005562:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689a      	ldr	r2, [r3, #8]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005572:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f042 0201 	orr.w	r2, r2, #1
 8005582:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 fe77 	bl	8006278 <UART_CheckIdleState>
 800558a:	4603      	mov	r3, r0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b08a      	sub	sp, #40	; 0x28
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	4613      	mov	r3, r2
 80055a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055a8:	2b20      	cmp	r3, #32
 80055aa:	d17a      	bne.n	80056a2 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d002      	beq.n	80055b8 <HAL_UART_Transmit_DMA+0x24>
 80055b2:	88fb      	ldrh	r3, [r7, #6]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d101      	bne.n	80055bc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e073      	b.n	80056a4 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d101      	bne.n	80055ca <HAL_UART_Transmit_DMA+0x36>
 80055c6:	2302      	movs	r3, #2
 80055c8:	e06c      	b.n	80056a4 <HAL_UART_Transmit_DMA+0x110>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	88fa      	ldrh	r2, [r7, #6]
 80055dc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	88fa      	ldrh	r2, [r7, #6]
 80055e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2221      	movs	r2, #33	; 0x21
 80055f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d02c      	beq.n	800565a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005604:	4a29      	ldr	r2, [pc, #164]	; (80056ac <HAL_UART_Transmit_DMA+0x118>)
 8005606:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800560c:	4a28      	ldr	r2, [pc, #160]	; (80056b0 <HAL_UART_Transmit_DMA+0x11c>)
 800560e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005614:	4a27      	ldr	r2, [pc, #156]	; (80056b4 <HAL_UART_Transmit_DMA+0x120>)
 8005616:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800561c:	2200      	movs	r2, #0
 800561e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005628:	4619      	mov	r1, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	3328      	adds	r3, #40	; 0x28
 8005630:	461a      	mov	r2, r3
 8005632:	88fb      	ldrh	r3, [r7, #6]
 8005634:	f7fd fa9e 	bl	8002b74 <HAL_DMA_Start_IT>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00d      	beq.n	800565a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2210      	movs	r2, #16
 8005642:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2220      	movs	r2, #32
 8005652:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e024      	b.n	80056a4 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2240      	movs	r2, #64	; 0x40
 8005660:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	3308      	adds	r3, #8
 8005670:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	e853 3f00 	ldrex	r3, [r3]
 8005678:	613b      	str	r3, [r7, #16]
   return(result);
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005680:	627b      	str	r3, [r7, #36]	; 0x24
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	3308      	adds	r3, #8
 8005688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800568a:	623a      	str	r2, [r7, #32]
 800568c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568e:	69f9      	ldr	r1, [r7, #28]
 8005690:	6a3a      	ldr	r2, [r7, #32]
 8005692:	e841 2300 	strex	r3, r2, [r1]
 8005696:	61bb      	str	r3, [r7, #24]
   return(result);
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1e5      	bne.n	800566a <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800569e:	2300      	movs	r3, #0
 80056a0:	e000      	b.n	80056a4 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80056a2:	2302      	movs	r3, #2
  }
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3728      	adds	r7, #40	; 0x28
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	080065ed 	.word	0x080065ed
 80056b0:	08006687 	.word	0x08006687
 80056b4:	080066a3 	.word	0x080066a3

080056b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b0ba      	sub	sp, #232	; 0xe8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80056de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80056e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80056e6:	4013      	ands	r3, r2
 80056e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80056ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d11b      	bne.n	800572c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80056f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056f8:	f003 0320 	and.w	r3, r3, #32
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d015      	beq.n	800572c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005704:	f003 0320 	and.w	r3, r3, #32
 8005708:	2b00      	cmp	r3, #0
 800570a:	d105      	bne.n	8005718 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800570c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d009      	beq.n	800572c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 82d6 	beq.w	8005cce <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	4798      	blx	r3
      }
      return;
 800572a:	e2d0      	b.n	8005cce <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800572c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 811f 	beq.w	8005974 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005736:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800573a:	4b8b      	ldr	r3, [pc, #556]	; (8005968 <HAL_UART_IRQHandler+0x2b0>)
 800573c:	4013      	ands	r3, r2
 800573e:	2b00      	cmp	r3, #0
 8005740:	d106      	bne.n	8005750 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005742:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005746:	4b89      	ldr	r3, [pc, #548]	; (800596c <HAL_UART_IRQHandler+0x2b4>)
 8005748:	4013      	ands	r3, r2
 800574a:	2b00      	cmp	r3, #0
 800574c:	f000 8112 	beq.w	8005974 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005754:	f003 0301 	and.w	r3, r3, #1
 8005758:	2b00      	cmp	r3, #0
 800575a:	d011      	beq.n	8005780 <HAL_UART_IRQHandler+0xc8>
 800575c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00b      	beq.n	8005780 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2201      	movs	r2, #1
 800576e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005776:	f043 0201 	orr.w	r2, r3, #1
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d011      	beq.n	80057b0 <HAL_UART_IRQHandler+0xf8>
 800578c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00b      	beq.n	80057b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2202      	movs	r2, #2
 800579e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057a6:	f043 0204 	orr.w	r2, r3, #4
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057b4:	f003 0304 	and.w	r3, r3, #4
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d011      	beq.n	80057e0 <HAL_UART_IRQHandler+0x128>
 80057bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057c0:	f003 0301 	and.w	r3, r3, #1
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00b      	beq.n	80057e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2204      	movs	r2, #4
 80057ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057d6:	f043 0202 	orr.w	r2, r3, #2
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80057e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057e4:	f003 0308 	and.w	r3, r3, #8
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d017      	beq.n	800581c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80057ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057f0:	f003 0320 	and.w	r3, r3, #32
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d105      	bne.n	8005804 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80057f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80057fc:	4b5a      	ldr	r3, [pc, #360]	; (8005968 <HAL_UART_IRQHandler+0x2b0>)
 80057fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00b      	beq.n	800581c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2208      	movs	r2, #8
 800580a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005812:	f043 0208 	orr.w	r2, r3, #8
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800581c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005820:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005824:	2b00      	cmp	r3, #0
 8005826:	d012      	beq.n	800584e <HAL_UART_IRQHandler+0x196>
 8005828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800582c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00c      	beq.n	800584e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800583c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005844:	f043 0220 	orr.w	r2, r3, #32
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005854:	2b00      	cmp	r3, #0
 8005856:	f000 823c 	beq.w	8005cd2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800585a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800585e:	f003 0320 	and.w	r3, r3, #32
 8005862:	2b00      	cmp	r3, #0
 8005864:	d013      	beq.n	800588e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800586a:	f003 0320 	and.w	r3, r3, #32
 800586e:	2b00      	cmp	r3, #0
 8005870:	d105      	bne.n	800587e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d007      	beq.n	800588e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005894:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a2:	2b40      	cmp	r3, #64	; 0x40
 80058a4:	d005      	beq.n	80058b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80058a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d04f      	beq.n	8005952 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 fe34 	bl	8006520 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c2:	2b40      	cmp	r3, #64	; 0x40
 80058c4:	d141      	bne.n	800594a <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	3308      	adds	r3, #8
 80058cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058d4:	e853 3f00 	ldrex	r3, [r3]
 80058d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80058dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3308      	adds	r3, #8
 80058ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80058f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80058f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80058fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005902:	e841 2300 	strex	r3, r2, [r1]
 8005906:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800590a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1d9      	bne.n	80058c6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005916:	2b00      	cmp	r3, #0
 8005918:	d013      	beq.n	8005942 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800591e:	4a14      	ldr	r2, [pc, #80]	; (8005970 <HAL_UART_IRQHandler+0x2b8>)
 8005920:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005926:	4618      	mov	r0, r3
 8005928:	f7fd f9fe 	bl	8002d28 <HAL_DMA_Abort_IT>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d017      	beq.n	8005962 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800593c:	4610      	mov	r0, r2
 800593e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005940:	e00f      	b.n	8005962 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f9da 	bl	8005cfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005948:	e00b      	b.n	8005962 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f9d6 	bl	8005cfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005950:	e007      	b.n	8005962 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f9d2 	bl	8005cfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005960:	e1b7      	b.n	8005cd2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005962:	bf00      	nop
    return;
 8005964:	e1b5      	b.n	8005cd2 <HAL_UART_IRQHandler+0x61a>
 8005966:	bf00      	nop
 8005968:	10000001 	.word	0x10000001
 800596c:	04000120 	.word	0x04000120
 8005970:	08006723 	.word	0x08006723

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005978:	2b01      	cmp	r3, #1
 800597a:	f040 814a 	bne.w	8005c12 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800597e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005982:	f003 0310 	and.w	r3, r3, #16
 8005986:	2b00      	cmp	r3, #0
 8005988:	f000 8143 	beq.w	8005c12 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800598c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005990:	f003 0310 	and.w	r3, r3, #16
 8005994:	2b00      	cmp	r3, #0
 8005996:	f000 813c 	beq.w	8005c12 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2210      	movs	r2, #16
 80059a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ac:	2b40      	cmp	r3, #64	; 0x40
 80059ae:	f040 80b5 	bne.w	8005b1c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 80059be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f000 8187 	beq.w	8005cd6 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80059ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059d2:	429a      	cmp	r2, r3
 80059d4:	f080 817f 	bcs.w	8005cd6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0320 	and.w	r3, r3, #32
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f040 8086 	bne.w	8005b00 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a00:	e853 3f00 	ldrex	r3, [r3]
 8005a04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005a08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	461a      	mov	r2, r3
 8005a1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005a22:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a26:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005a2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005a2e:	e841 2300 	strex	r3, r2, [r1]
 8005a32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005a36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1da      	bne.n	80059f4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3308      	adds	r3, #8
 8005a44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a48:	e853 3f00 	ldrex	r3, [r3]
 8005a4c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005a4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a50:	f023 0301 	bic.w	r3, r3, #1
 8005a54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	3308      	adds	r3, #8
 8005a5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005a66:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005a6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a6e:	e841 2300 	strex	r3, r2, [r1]
 8005a72:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005a74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1e1      	bne.n	8005a3e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	3308      	adds	r3, #8
 8005a80:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a84:	e853 3f00 	ldrex	r3, [r3]
 8005a88:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	3308      	adds	r3, #8
 8005a9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005a9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005aa0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005aa4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005aa6:	e841 2300 	strex	r3, r2, [r1]
 8005aaa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005aac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1e3      	bne.n	8005a7a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2220      	movs	r2, #32
 8005ab6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ac8:	e853 3f00 	ldrex	r3, [r3]
 8005acc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ad0:	f023 0310 	bic.w	r3, r3, #16
 8005ad4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	461a      	mov	r2, r3
 8005ade:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ae2:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ae4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ae8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005aea:	e841 2300 	strex	r3, r2, [r1]
 8005aee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1e4      	bne.n	8005ac0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7fd f8b5 	bl	8002c6a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	4619      	mov	r1, r3
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 f8fb 	bl	8005d10 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005b1a:	e0dc      	b.n	8005cd6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 80ce 	beq.w	8005cda <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8005b3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 80c9 	beq.w	8005cda <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b50:	e853 3f00 	ldrex	r3, [r3]
 8005b54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	461a      	mov	r2, r3
 8005b66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b6a:	647b      	str	r3, [r7, #68]	; 0x44
 8005b6c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b72:	e841 2300 	strex	r3, r2, [r1]
 8005b76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1e4      	bne.n	8005b48 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	3308      	adds	r3, #8
 8005b84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	e853 3f00 	ldrex	r3, [r3]
 8005b8c:	623b      	str	r3, [r7, #32]
   return(result);
 8005b8e:	6a3b      	ldr	r3, [r7, #32]
 8005b90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b94:	f023 0301 	bic.w	r3, r3, #1
 8005b98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	3308      	adds	r3, #8
 8005ba2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005ba6:	633a      	str	r2, [r7, #48]	; 0x30
 8005ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005baa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bae:	e841 2300 	strex	r3, r2, [r1]
 8005bb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1e1      	bne.n	8005b7e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	e853 3f00 	ldrex	r3, [r3]
 8005bda:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f023 0310 	bic.w	r3, r3, #16
 8005be2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	461a      	mov	r2, r3
 8005bec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005bf0:	61fb      	str	r3, [r7, #28]
 8005bf2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf4:	69b9      	ldr	r1, [r7, #24]
 8005bf6:	69fa      	ldr	r2, [r7, #28]
 8005bf8:	e841 2300 	strex	r3, r2, [r1]
 8005bfc:	617b      	str	r3, [r7, #20]
   return(result);
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1e4      	bne.n	8005bce <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c08:	4619      	mov	r1, r3
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f880 	bl	8005d10 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005c10:	e063      	b.n	8005cda <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00e      	beq.n	8005c3c <HAL_UART_IRQHandler+0x584>
 8005c1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d008      	beq.n	8005c3c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005c32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 fdb5 	bl	80067a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c3a:	e051      	b.n	8005ce0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d014      	beq.n	8005c72 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d105      	bne.n	8005c60 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005c54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d008      	beq.n	8005c72 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d03a      	beq.n	8005cde <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	4798      	blx	r3
    }
    return;
 8005c70:	e035      	b.n	8005cde <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d009      	beq.n	8005c92 <HAL_UART_IRQHandler+0x5da>
 8005c7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d003      	beq.n	8005c92 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 fd5f 	bl	800674e <UART_EndTransmit_IT>
    return;
 8005c90:	e026      	b.n	8005ce0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d009      	beq.n	8005cb2 <HAL_UART_IRQHandler+0x5fa>
 8005c9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ca2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d003      	beq.n	8005cb2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 fd8e 	bl	80067cc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005cb0:	e016      	b.n	8005ce0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d010      	beq.n	8005ce0 <HAL_UART_IRQHandler+0x628>
 8005cbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	da0c      	bge.n	8005ce0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 fd76 	bl	80067b8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ccc:	e008      	b.n	8005ce0 <HAL_UART_IRQHandler+0x628>
      return;
 8005cce:	bf00      	nop
 8005cd0:	e006      	b.n	8005ce0 <HAL_UART_IRQHandler+0x628>
    return;
 8005cd2:	bf00      	nop
 8005cd4:	e004      	b.n	8005ce0 <HAL_UART_IRQHandler+0x628>
      return;
 8005cd6:	bf00      	nop
 8005cd8:	e002      	b.n	8005ce0 <HAL_UART_IRQHandler+0x628>
      return;
 8005cda:	bf00      	nop
 8005cdc:	e000      	b.n	8005ce0 <HAL_UART_IRQHandler+0x628>
    return;
 8005cde:	bf00      	nop
  }
}
 8005ce0:	37e8      	adds	r7, #232	; 0xe8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop

08005ce8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	460b      	mov	r3, r1
 8005d1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d28:	b5b0      	push	{r4, r5, r7, lr}
 8005d2a:	b088      	sub	sp, #32
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d30:	2300      	movs	r3, #0
 8005d32:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	689a      	ldr	r2, [r3, #8]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	431a      	orrs	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	431a      	orrs	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	69db      	ldr	r3, [r3, #28]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	4ba3      	ldr	r3, [pc, #652]	; (8005fe0 <UART_SetConfig+0x2b8>)
 8005d54:	4013      	ands	r3, r2
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	6812      	ldr	r2, [r2, #0]
 8005d5a:	69f9      	ldr	r1, [r7, #28]
 8005d5c:	430b      	orrs	r3, r1
 8005d5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68da      	ldr	r2, [r3, #12]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	430a      	orrs	r2, r1
 8005d74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a98      	ldr	r2, [pc, #608]	; (8005fe4 <UART_SetConfig+0x2bc>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d004      	beq.n	8005d90 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	69fa      	ldr	r2, [r7, #28]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005d9a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	6812      	ldr	r2, [r2, #0]
 8005da2:	69f9      	ldr	r1, [r7, #28]
 8005da4:	430b      	orrs	r3, r1
 8005da6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dae:	f023 010f 	bic.w	r1, r3, #15
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a89      	ldr	r2, [pc, #548]	; (8005fe8 <UART_SetConfig+0x2c0>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d120      	bne.n	8005e0a <UART_SetConfig+0xe2>
 8005dc8:	2003      	movs	r0, #3
 8005dca:	f7ff fb73 	bl	80054b4 <LL_RCC_GetUSARTClockSource>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b03      	cmp	r3, #3
 8005dd2:	d817      	bhi.n	8005e04 <UART_SetConfig+0xdc>
 8005dd4:	a201      	add	r2, pc, #4	; (adr r2, 8005ddc <UART_SetConfig+0xb4>)
 8005dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dda:	bf00      	nop
 8005ddc:	08005ded 	.word	0x08005ded
 8005de0:	08005df9 	.word	0x08005df9
 8005de4:	08005df3 	.word	0x08005df3
 8005de8:	08005dff 	.word	0x08005dff
 8005dec:	2301      	movs	r3, #1
 8005dee:	76fb      	strb	r3, [r7, #27]
 8005df0:	e038      	b.n	8005e64 <UART_SetConfig+0x13c>
 8005df2:	2302      	movs	r3, #2
 8005df4:	76fb      	strb	r3, [r7, #27]
 8005df6:	e035      	b.n	8005e64 <UART_SetConfig+0x13c>
 8005df8:	2304      	movs	r3, #4
 8005dfa:	76fb      	strb	r3, [r7, #27]
 8005dfc:	e032      	b.n	8005e64 <UART_SetConfig+0x13c>
 8005dfe:	2308      	movs	r3, #8
 8005e00:	76fb      	strb	r3, [r7, #27]
 8005e02:	e02f      	b.n	8005e64 <UART_SetConfig+0x13c>
 8005e04:	2310      	movs	r3, #16
 8005e06:	76fb      	strb	r3, [r7, #27]
 8005e08:	e02c      	b.n	8005e64 <UART_SetConfig+0x13c>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a75      	ldr	r2, [pc, #468]	; (8005fe4 <UART_SetConfig+0x2bc>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d125      	bne.n	8005e60 <UART_SetConfig+0x138>
 8005e14:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005e18:	f7ff fb5c 	bl	80054d4 <LL_RCC_GetLPUARTClockSource>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e22:	d017      	beq.n	8005e54 <UART_SetConfig+0x12c>
 8005e24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e28:	d817      	bhi.n	8005e5a <UART_SetConfig+0x132>
 8005e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e2e:	d00b      	beq.n	8005e48 <UART_SetConfig+0x120>
 8005e30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e34:	d811      	bhi.n	8005e5a <UART_SetConfig+0x132>
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d003      	beq.n	8005e42 <UART_SetConfig+0x11a>
 8005e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e3e:	d006      	beq.n	8005e4e <UART_SetConfig+0x126>
 8005e40:	e00b      	b.n	8005e5a <UART_SetConfig+0x132>
 8005e42:	2300      	movs	r3, #0
 8005e44:	76fb      	strb	r3, [r7, #27]
 8005e46:	e00d      	b.n	8005e64 <UART_SetConfig+0x13c>
 8005e48:	2302      	movs	r3, #2
 8005e4a:	76fb      	strb	r3, [r7, #27]
 8005e4c:	e00a      	b.n	8005e64 <UART_SetConfig+0x13c>
 8005e4e:	2304      	movs	r3, #4
 8005e50:	76fb      	strb	r3, [r7, #27]
 8005e52:	e007      	b.n	8005e64 <UART_SetConfig+0x13c>
 8005e54:	2308      	movs	r3, #8
 8005e56:	76fb      	strb	r3, [r7, #27]
 8005e58:	e004      	b.n	8005e64 <UART_SetConfig+0x13c>
 8005e5a:	2310      	movs	r3, #16
 8005e5c:	76fb      	strb	r3, [r7, #27]
 8005e5e:	e001      	b.n	8005e64 <UART_SetConfig+0x13c>
 8005e60:	2310      	movs	r3, #16
 8005e62:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a5e      	ldr	r2, [pc, #376]	; (8005fe4 <UART_SetConfig+0x2bc>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	f040 808b 	bne.w	8005f86 <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e70:	7efb      	ldrb	r3, [r7, #27]
 8005e72:	2b08      	cmp	r3, #8
 8005e74:	d823      	bhi.n	8005ebe <UART_SetConfig+0x196>
 8005e76:	a201      	add	r2, pc, #4	; (adr r2, 8005e7c <UART_SetConfig+0x154>)
 8005e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e7c:	08005ea1 	.word	0x08005ea1
 8005e80:	08005ebf 	.word	0x08005ebf
 8005e84:	08005ea9 	.word	0x08005ea9
 8005e88:	08005ebf 	.word	0x08005ebf
 8005e8c:	08005eaf 	.word	0x08005eaf
 8005e90:	08005ebf 	.word	0x08005ebf
 8005e94:	08005ebf 	.word	0x08005ebf
 8005e98:	08005ebf 	.word	0x08005ebf
 8005e9c:	08005eb7 	.word	0x08005eb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ea0:	f7fe fc56 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 8005ea4:	6178      	str	r0, [r7, #20]
        break;
 8005ea6:	e00f      	b.n	8005ec8 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ea8:	4b50      	ldr	r3, [pc, #320]	; (8005fec <UART_SetConfig+0x2c4>)
 8005eaa:	617b      	str	r3, [r7, #20]
        break;
 8005eac:	e00c      	b.n	8005ec8 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eae:	f7fe fbcf 	bl	8004650 <HAL_RCC_GetSysClockFreq>
 8005eb2:	6178      	str	r0, [r7, #20]
        break;
 8005eb4:	e008      	b.n	8005ec8 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eba:	617b      	str	r3, [r7, #20]
        break;
 8005ebc:	e004      	b.n	8005ec8 <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	76bb      	strb	r3, [r7, #26]
        break;
 8005ec6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f000 811a 	beq.w	8006104 <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed4:	4a46      	ldr	r2, [pc, #280]	; (8005ff0 <UART_SetConfig+0x2c8>)
 8005ed6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005eda:	461a      	mov	r2, r3
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ee2:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	4613      	mov	r3, r2
 8005eea:	005b      	lsls	r3, r3, #1
 8005eec:	4413      	add	r3, r2
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d305      	bcc.n	8005f00 <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d902      	bls.n	8005f06 <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	76bb      	strb	r3, [r7, #26]
 8005f04:	e0fe      	b.n	8006104 <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f04f 0100 	mov.w	r1, #0
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f12:	4a37      	ldr	r2, [pc, #220]	; (8005ff0 <UART_SetConfig+0x2c8>)
 8005f14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	f04f 0300 	mov.w	r3, #0
 8005f1e:	f7fa f987 	bl	8000230 <__aeabi_uldivmod>
 8005f22:	4602      	mov	r2, r0
 8005f24:	460b      	mov	r3, r1
 8005f26:	4610      	mov	r0, r2
 8005f28:	4619      	mov	r1, r3
 8005f2a:	f04f 0200 	mov.w	r2, #0
 8005f2e:	f04f 0300 	mov.w	r3, #0
 8005f32:	020b      	lsls	r3, r1, #8
 8005f34:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005f38:	0202      	lsls	r2, r0, #8
 8005f3a:	6879      	ldr	r1, [r7, #4]
 8005f3c:	6849      	ldr	r1, [r1, #4]
 8005f3e:	0849      	lsrs	r1, r1, #1
 8005f40:	4608      	mov	r0, r1
 8005f42:	f04f 0100 	mov.w	r1, #0
 8005f46:	1814      	adds	r4, r2, r0
 8005f48:	eb43 0501 	adc.w	r5, r3, r1
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	461a      	mov	r2, r3
 8005f52:	f04f 0300 	mov.w	r3, #0
 8005f56:	4620      	mov	r0, r4
 8005f58:	4629      	mov	r1, r5
 8005f5a:	f7fa f969 	bl	8000230 <__aeabi_uldivmod>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	460b      	mov	r3, r1
 8005f62:	4613      	mov	r3, r2
 8005f64:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f6c:	d308      	bcc.n	8005f80 <UART_SetConfig+0x258>
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f74:	d204      	bcs.n	8005f80 <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	60da      	str	r2, [r3, #12]
 8005f7e:	e0c1      	b.n	8006104 <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	76bb      	strb	r3, [r7, #26]
 8005f84:	e0be      	b.n	8006104 <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f8e:	d16a      	bne.n	8006066 <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005f90:	7efb      	ldrb	r3, [r7, #27]
 8005f92:	3b01      	subs	r3, #1
 8005f94:	2b07      	cmp	r3, #7
 8005f96:	d82d      	bhi.n	8005ff4 <UART_SetConfig+0x2cc>
 8005f98:	a201      	add	r2, pc, #4	; (adr r2, 8005fa0 <UART_SetConfig+0x278>)
 8005f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f9e:	bf00      	nop
 8005fa0:	08005fc1 	.word	0x08005fc1
 8005fa4:	08005fc9 	.word	0x08005fc9
 8005fa8:	08005ff5 	.word	0x08005ff5
 8005fac:	08005fcf 	.word	0x08005fcf
 8005fb0:	08005ff5 	.word	0x08005ff5
 8005fb4:	08005ff5 	.word	0x08005ff5
 8005fb8:	08005ff5 	.word	0x08005ff5
 8005fbc:	08005fd7 	.word	0x08005fd7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fc0:	f7fe fbdc 	bl	800477c <HAL_RCC_GetPCLK2Freq>
 8005fc4:	6178      	str	r0, [r7, #20]
        break;
 8005fc6:	e01a      	b.n	8005ffe <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fc8:	4b08      	ldr	r3, [pc, #32]	; (8005fec <UART_SetConfig+0x2c4>)
 8005fca:	617b      	str	r3, [r7, #20]
        break;
 8005fcc:	e017      	b.n	8005ffe <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fce:	f7fe fb3f 	bl	8004650 <HAL_RCC_GetSysClockFreq>
 8005fd2:	6178      	str	r0, [r7, #20]
        break;
 8005fd4:	e013      	b.n	8005ffe <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fda:	617b      	str	r3, [r7, #20]
        break;
 8005fdc:	e00f      	b.n	8005ffe <UART_SetConfig+0x2d6>
 8005fde:	bf00      	nop
 8005fe0:	cfff69f3 	.word	0xcfff69f3
 8005fe4:	40008000 	.word	0x40008000
 8005fe8:	40013800 	.word	0x40013800
 8005fec:	00f42400 	.word	0x00f42400
 8005ff0:	0800bb14 	.word	0x0800bb14
      default:
        pclk = 0U;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	76bb      	strb	r3, [r7, #26]
        break;
 8005ffc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d07f      	beq.n	8006104 <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006008:	4a48      	ldr	r2, [pc, #288]	; (800612c <UART_SetConfig+0x404>)
 800600a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800600e:	461a      	mov	r2, r3
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	fbb3 f3f2 	udiv	r3, r3, r2
 8006016:	005a      	lsls	r2, r3, #1
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	085b      	lsrs	r3, r3, #1
 800601e:	441a      	add	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	fbb2 f3f3 	udiv	r3, r2, r3
 8006028:	b29b      	uxth	r3, r3
 800602a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	2b0f      	cmp	r3, #15
 8006030:	d916      	bls.n	8006060 <UART_SetConfig+0x338>
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006038:	d212      	bcs.n	8006060 <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	b29b      	uxth	r3, r3
 800603e:	f023 030f 	bic.w	r3, r3, #15
 8006042:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	085b      	lsrs	r3, r3, #1
 8006048:	b29b      	uxth	r3, r3
 800604a:	f003 0307 	and.w	r3, r3, #7
 800604e:	b29a      	uxth	r2, r3
 8006050:	89fb      	ldrh	r3, [r7, #14]
 8006052:	4313      	orrs	r3, r2
 8006054:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	89fa      	ldrh	r2, [r7, #14]
 800605c:	60da      	str	r2, [r3, #12]
 800605e:	e051      	b.n	8006104 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	76bb      	strb	r3, [r7, #26]
 8006064:	e04e      	b.n	8006104 <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006066:	7efb      	ldrb	r3, [r7, #27]
 8006068:	3b01      	subs	r3, #1
 800606a:	2b07      	cmp	r3, #7
 800606c:	d821      	bhi.n	80060b2 <UART_SetConfig+0x38a>
 800606e:	a201      	add	r2, pc, #4	; (adr r2, 8006074 <UART_SetConfig+0x34c>)
 8006070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006074:	08006095 	.word	0x08006095
 8006078:	0800609d 	.word	0x0800609d
 800607c:	080060b3 	.word	0x080060b3
 8006080:	080060a3 	.word	0x080060a3
 8006084:	080060b3 	.word	0x080060b3
 8006088:	080060b3 	.word	0x080060b3
 800608c:	080060b3 	.word	0x080060b3
 8006090:	080060ab 	.word	0x080060ab
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006094:	f7fe fb72 	bl	800477c <HAL_RCC_GetPCLK2Freq>
 8006098:	6178      	str	r0, [r7, #20]
        break;
 800609a:	e00f      	b.n	80060bc <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800609c:	4b24      	ldr	r3, [pc, #144]	; (8006130 <UART_SetConfig+0x408>)
 800609e:	617b      	str	r3, [r7, #20]
        break;
 80060a0:	e00c      	b.n	80060bc <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060a2:	f7fe fad5 	bl	8004650 <HAL_RCC_GetSysClockFreq>
 80060a6:	6178      	str	r0, [r7, #20]
        break;
 80060a8:	e008      	b.n	80060bc <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060ae:	617b      	str	r3, [r7, #20]
        break;
 80060b0:	e004      	b.n	80060bc <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 80060b2:	2300      	movs	r3, #0
 80060b4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	76bb      	strb	r3, [r7, #26]
        break;
 80060ba:	bf00      	nop
    }

    if (pclk != 0U)
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d020      	beq.n	8006104 <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c6:	4a19      	ldr	r2, [pc, #100]	; (800612c <UART_SetConfig+0x404>)
 80060c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060cc:	461a      	mov	r2, r3
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	085b      	lsrs	r3, r3, #1
 80060da:	441a      	add	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	2b0f      	cmp	r3, #15
 80060ec:	d908      	bls.n	8006100 <UART_SetConfig+0x3d8>
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060f4:	d204      	bcs.n	8006100 <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	60da      	str	r2, [r3, #12]
 80060fe:	e001      	b.n	8006104 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006120:	7ebb      	ldrb	r3, [r7, #26]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3720      	adds	r7, #32
 8006126:	46bd      	mov	sp, r7
 8006128:	bdb0      	pop	{r4, r5, r7, pc}
 800612a:	bf00      	nop
 800612c:	0800bb14 	.word	0x0800bb14
 8006130:	00f42400 	.word	0x00f42400

08006134 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00a      	beq.n	800615e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	430a      	orrs	r2, r1
 800615c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006162:	f003 0302 	and.w	r3, r3, #2
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00a      	beq.n	8006180 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	430a      	orrs	r2, r1
 800617e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006184:	f003 0304 	and.w	r3, r3, #4
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00a      	beq.n	80061a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	430a      	orrs	r2, r1
 80061a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a6:	f003 0308 	and.w	r3, r3, #8
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00a      	beq.n	80061c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	430a      	orrs	r2, r1
 80061c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c8:	f003 0310 	and.w	r3, r3, #16
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00a      	beq.n	80061e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ea:	f003 0320 	and.w	r3, r3, #32
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00a      	beq.n	8006208 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	430a      	orrs	r2, r1
 8006206:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006210:	2b00      	cmp	r3, #0
 8006212:	d01a      	beq.n	800624a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800622e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006232:	d10a      	bne.n	800624a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	430a      	orrs	r2, r1
 8006248:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00a      	beq.n	800626c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	605a      	str	r2, [r3, #4]
  }
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af02      	add	r7, sp, #8
 800627e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006288:	f7fc fa0e 	bl	80026a8 <HAL_GetTick>
 800628c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 0308 	and.w	r3, r3, #8
 8006298:	2b08      	cmp	r3, #8
 800629a:	d10e      	bne.n	80062ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800629c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062a0:	9300      	str	r3, [sp, #0]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f82f 	bl	800630e <UART_WaitOnFlagUntilTimeout>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d001      	beq.n	80062ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e025      	b.n	8006306 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0304 	and.w	r3, r3, #4
 80062c4:	2b04      	cmp	r3, #4
 80062c6:	d10e      	bne.n	80062e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f819 	bl	800630e <UART_WaitOnFlagUntilTimeout>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d001      	beq.n	80062e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e00f      	b.n	8006306 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2220      	movs	r2, #32
 80062ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2220      	movs	r2, #32
 80062f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b09c      	sub	sp, #112	; 0x70
 8006312:	af00      	add	r7, sp, #0
 8006314:	60f8      	str	r0, [r7, #12]
 8006316:	60b9      	str	r1, [r7, #8]
 8006318:	603b      	str	r3, [r7, #0]
 800631a:	4613      	mov	r3, r2
 800631c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800631e:	e0a9      	b.n	8006474 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006320:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006326:	f000 80a5 	beq.w	8006474 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800632a:	f7fc f9bd 	bl	80026a8 <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006336:	429a      	cmp	r2, r3
 8006338:	d302      	bcc.n	8006340 <UART_WaitOnFlagUntilTimeout+0x32>
 800633a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800633c:	2b00      	cmp	r3, #0
 800633e:	d140      	bne.n	80063c2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006348:	e853 3f00 	ldrex	r3, [r3]
 800634c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800634e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006350:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006354:	667b      	str	r3, [r7, #100]	; 0x64
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	461a      	mov	r2, r3
 800635c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800635e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006360:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006362:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006364:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006366:	e841 2300 	strex	r3, r2, [r1]
 800636a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800636c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1e6      	bne.n	8006340 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	3308      	adds	r3, #8
 8006378:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800637c:	e853 3f00 	ldrex	r3, [r3]
 8006380:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006384:	f023 0301 	bic.w	r3, r3, #1
 8006388:	663b      	str	r3, [r7, #96]	; 0x60
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	3308      	adds	r3, #8
 8006390:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006392:	64ba      	str	r2, [r7, #72]	; 0x48
 8006394:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006396:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006398:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800639a:	e841 2300 	strex	r3, r2, [r1]
 800639e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80063a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1e5      	bne.n	8006372 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2220      	movs	r2, #32
 80063aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2220      	movs	r2, #32
 80063b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e069      	b.n	8006496 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0304 	and.w	r3, r3, #4
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d051      	beq.n	8006474 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	69db      	ldr	r3, [r3, #28]
 80063d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063de:	d149      	bne.n	8006474 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063e8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f2:	e853 3f00 	ldrex	r3, [r3]
 80063f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	461a      	mov	r2, r3
 8006406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006408:	637b      	str	r3, [r7, #52]	; 0x34
 800640a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800640e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006410:	e841 2300 	strex	r3, r2, [r1]
 8006414:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1e6      	bne.n	80063ea <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	3308      	adds	r3, #8
 8006422:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	e853 3f00 	ldrex	r3, [r3]
 800642a:	613b      	str	r3, [r7, #16]
   return(result);
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	f023 0301 	bic.w	r3, r3, #1
 8006432:	66bb      	str	r3, [r7, #104]	; 0x68
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	3308      	adds	r3, #8
 800643a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800643c:	623a      	str	r2, [r7, #32]
 800643e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006440:	69f9      	ldr	r1, [r7, #28]
 8006442:	6a3a      	ldr	r2, [r7, #32]
 8006444:	e841 2300 	strex	r3, r2, [r1]
 8006448:	61bb      	str	r3, [r7, #24]
   return(result);
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1e5      	bne.n	800641c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2220      	movs	r2, #32
 8006454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2220      	movs	r2, #32
 800645c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2220      	movs	r2, #32
 8006464:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e010      	b.n	8006496 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	69da      	ldr	r2, [r3, #28]
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	4013      	ands	r3, r2
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	429a      	cmp	r2, r3
 8006482:	bf0c      	ite	eq
 8006484:	2301      	moveq	r3, #1
 8006486:	2300      	movne	r3, #0
 8006488:	b2db      	uxtb	r3, r3
 800648a:	461a      	mov	r2, r3
 800648c:	79fb      	ldrb	r3, [r7, #7]
 800648e:	429a      	cmp	r2, r3
 8006490:	f43f af46 	beq.w	8006320 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3770      	adds	r7, #112	; 0x70
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800649e:	b480      	push	{r7}
 80064a0:	b08f      	sub	sp, #60	; 0x3c
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ac:	6a3b      	ldr	r3, [r7, #32]
 80064ae:	e853 3f00 	ldrex	r3, [r3]
 80064b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80064ba:	637b      	str	r3, [r7, #52]	; 0x34
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	461a      	mov	r2, r3
 80064c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064c6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064cc:	e841 2300 	strex	r3, r2, [r1]
 80064d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1e6      	bne.n	80064a6 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	3308      	adds	r3, #8
 80064de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	e853 3f00 	ldrex	r3, [r3]
 80064e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80064ee:	633b      	str	r3, [r7, #48]	; 0x30
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	3308      	adds	r3, #8
 80064f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064f8:	61ba      	str	r2, [r7, #24]
 80064fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fc:	6979      	ldr	r1, [r7, #20]
 80064fe:	69ba      	ldr	r2, [r7, #24]
 8006500:	e841 2300 	strex	r3, r2, [r1]
 8006504:	613b      	str	r3, [r7, #16]
   return(result);
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1e5      	bne.n	80064d8 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2220      	movs	r2, #32
 8006510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8006514:	bf00      	nop
 8006516:	373c      	adds	r7, #60	; 0x3c
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006520:	b480      	push	{r7}
 8006522:	b095      	sub	sp, #84	; 0x54
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006530:	e853 3f00 	ldrex	r3, [r3]
 8006534:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006538:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800653c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	461a      	mov	r2, r3
 8006544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006546:	643b      	str	r3, [r7, #64]	; 0x40
 8006548:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800654c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800654e:	e841 2300 	strex	r3, r2, [r1]
 8006552:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1e6      	bne.n	8006528 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	3308      	adds	r3, #8
 8006560:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006562:	6a3b      	ldr	r3, [r7, #32]
 8006564:	e853 3f00 	ldrex	r3, [r3]
 8006568:	61fb      	str	r3, [r7, #28]
   return(result);
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006570:	f023 0301 	bic.w	r3, r3, #1
 8006574:	64bb      	str	r3, [r7, #72]	; 0x48
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	3308      	adds	r3, #8
 800657c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800657e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006580:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006582:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006586:	e841 2300 	strex	r3, r2, [r1]
 800658a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800658c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1e3      	bne.n	800655a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006596:	2b01      	cmp	r3, #1
 8006598:	d118      	bne.n	80065cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	e853 3f00 	ldrex	r3, [r3]
 80065a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	f023 0310 	bic.w	r3, r3, #16
 80065ae:	647b      	str	r3, [r7, #68]	; 0x44
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	461a      	mov	r2, r3
 80065b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065b8:	61bb      	str	r3, [r7, #24]
 80065ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065bc:	6979      	ldr	r1, [r7, #20]
 80065be:	69ba      	ldr	r2, [r7, #24]
 80065c0:	e841 2300 	strex	r3, r2, [r1]
 80065c4:	613b      	str	r3, [r7, #16]
   return(result);
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d1e6      	bne.n	800659a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2220      	movs	r2, #32
 80065d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	671a      	str	r2, [r3, #112]	; 0x70
}
 80065e0:	bf00      	nop
 80065e2:	3754      	adds	r7, #84	; 0x54
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b090      	sub	sp, #64	; 0x40
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0320 	and.w	r3, r3, #32
 8006604:	2b00      	cmp	r3, #0
 8006606:	d137      	bne.n	8006678 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800660a:	2200      	movs	r2, #0
 800660c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	3308      	adds	r3, #8
 8006616:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	e853 3f00 	ldrex	r3, [r3]
 800661e:	623b      	str	r3, [r7, #32]
   return(result);
 8006620:	6a3b      	ldr	r3, [r7, #32]
 8006622:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006626:	63bb      	str	r3, [r7, #56]	; 0x38
 8006628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	3308      	adds	r3, #8
 800662e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006630:	633a      	str	r2, [r7, #48]	; 0x30
 8006632:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006634:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006638:	e841 2300 	strex	r3, r2, [r1]
 800663c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800663e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1e5      	bne.n	8006610 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	e853 3f00 	ldrex	r3, [r3]
 8006650:	60fb      	str	r3, [r7, #12]
   return(result);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006658:	637b      	str	r3, [r7, #52]	; 0x34
 800665a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	461a      	mov	r2, r3
 8006660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006662:	61fb      	str	r3, [r7, #28]
 8006664:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006666:	69b9      	ldr	r1, [r7, #24]
 8006668:	69fa      	ldr	r2, [r7, #28]
 800666a:	e841 2300 	strex	r3, r2, [r1]
 800666e:	617b      	str	r3, [r7, #20]
   return(result);
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1e6      	bne.n	8006644 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006676:	e002      	b.n	800667e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006678:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800667a:	f7fb fa8b 	bl	8001b94 <HAL_UART_TxCpltCallback>
}
 800667e:	bf00      	nop
 8006680:	3740      	adds	r7, #64	; 0x40
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b084      	sub	sp, #16
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006692:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f7ff fb27 	bl	8005ce8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800669a:	bf00      	nop
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b086      	sub	sp, #24
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ae:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066b6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066be:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ca:	2b80      	cmp	r3, #128	; 0x80
 80066cc:	d109      	bne.n	80066e2 <UART_DMAError+0x40>
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	2b21      	cmp	r3, #33	; 0x21
 80066d2:	d106      	bne.n	80066e2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80066dc:	6978      	ldr	r0, [r7, #20]
 80066de:	f7ff fede 	bl	800649e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ec:	2b40      	cmp	r3, #64	; 0x40
 80066ee:	d109      	bne.n	8006704 <UART_DMAError+0x62>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2b22      	cmp	r3, #34	; 0x22
 80066f4:	d106      	bne.n	8006704 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80066fe:	6978      	ldr	r0, [r7, #20]
 8006700:	f7ff ff0e 	bl	8006520 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800670a:	f043 0210 	orr.w	r2, r3, #16
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006714:	6978      	ldr	r0, [r7, #20]
 8006716:	f7ff faf1 	bl	8005cfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800671a:	bf00      	nop
 800671c:	3718      	adds	r7, #24
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b084      	sub	sp, #16
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	f7ff fadb 	bl	8005cfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006746:	bf00      	nop
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b088      	sub	sp, #32
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	e853 3f00 	ldrex	r3, [r3]
 8006762:	60bb      	str	r3, [r7, #8]
   return(result);
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800676a:	61fb      	str	r3, [r7, #28]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	461a      	mov	r2, r3
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	61bb      	str	r3, [r7, #24]
 8006776:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006778:	6979      	ldr	r1, [r7, #20]
 800677a:	69ba      	ldr	r2, [r7, #24]
 800677c:	e841 2300 	strex	r3, r2, [r1]
 8006780:	613b      	str	r3, [r7, #16]
   return(result);
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d1e6      	bne.n	8006756 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2220      	movs	r2, #32
 800678c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f7fb f9fc 	bl	8001b94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800679c:	bf00      	nop
 800679e:	3720      	adds	r7, #32
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80067ac:	bf00      	nop
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80067c0:	bf00      	nop
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d101      	bne.n	80067f6 <HAL_UARTEx_DisableFifoMode+0x16>
 80067f2:	2302      	movs	r3, #2
 80067f4:	e027      	b.n	8006846 <HAL_UARTEx_DisableFifoMode+0x66>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2224      	movs	r2, #36	; 0x24
 8006802:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f022 0201 	bic.w	r2, r2, #1
 800681c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006824:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2220      	movs	r2, #32
 8006838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3714      	adds	r7, #20
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr

08006852 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006852:	b580      	push	{r7, lr}
 8006854:	b084      	sub	sp, #16
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
 800685a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006862:	2b01      	cmp	r3, #1
 8006864:	d101      	bne.n	800686a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006866:	2302      	movs	r3, #2
 8006868:	e02d      	b.n	80068c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2224      	movs	r2, #36	; 0x24
 8006876:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f022 0201 	bic.w	r2, r2, #1
 8006890:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	683a      	ldr	r2, [r7, #0]
 80068a2:	430a      	orrs	r2, r1
 80068a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f850 	bl	800694c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2220      	movs	r2, #32
 80068b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3710      	adds	r7, #16
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b084      	sub	sp, #16
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d101      	bne.n	80068e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80068e2:	2302      	movs	r3, #2
 80068e4:	e02d      	b.n	8006942 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2201      	movs	r2, #1
 80068ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2224      	movs	r2, #36	; 0x24
 80068f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f022 0201 	bic.w	r2, r2, #1
 800690c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	683a      	ldr	r2, [r7, #0]
 800691e:	430a      	orrs	r2, r1
 8006920:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f812 	bl	800694c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2220      	movs	r2, #32
 8006934:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
	...

0800694c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006958:	2b00      	cmp	r3, #0
 800695a:	d108      	bne.n	800696e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800696c:	e031      	b.n	80069d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800696e:	2308      	movs	r3, #8
 8006970:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006972:	2308      	movs	r3, #8
 8006974:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	0e5b      	lsrs	r3, r3, #25
 800697e:	b2db      	uxtb	r3, r3
 8006980:	f003 0307 	and.w	r3, r3, #7
 8006984:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	0f5b      	lsrs	r3, r3, #29
 800698e:	b2db      	uxtb	r3, r3
 8006990:	f003 0307 	and.w	r3, r3, #7
 8006994:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006996:	7bbb      	ldrb	r3, [r7, #14]
 8006998:	7b3a      	ldrb	r2, [r7, #12]
 800699a:	4911      	ldr	r1, [pc, #68]	; (80069e0 <UARTEx_SetNbDataToProcess+0x94>)
 800699c:	5c8a      	ldrb	r2, [r1, r2]
 800699e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80069a2:	7b3a      	ldrb	r2, [r7, #12]
 80069a4:	490f      	ldr	r1, [pc, #60]	; (80069e4 <UARTEx_SetNbDataToProcess+0x98>)
 80069a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80069a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
 80069b6:	7b7a      	ldrb	r2, [r7, #13]
 80069b8:	4909      	ldr	r1, [pc, #36]	; (80069e0 <UARTEx_SetNbDataToProcess+0x94>)
 80069ba:	5c8a      	ldrb	r2, [r1, r2]
 80069bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80069c0:	7b7a      	ldrb	r2, [r7, #13]
 80069c2:	4908      	ldr	r1, [pc, #32]	; (80069e4 <UARTEx_SetNbDataToProcess+0x98>)
 80069c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80069c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80069d2:	bf00      	nop
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	0800bb2c 	.word	0x0800bb2c
 80069e4:	0800bb34 	.word	0x0800bb34

080069e8 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b088      	sub	sp, #32
 80069ec:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80069ee:	2300      	movs	r3, #0
 80069f0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80069f2:	f107 0308 	add.w	r3, r7, #8
 80069f6:	2218      	movs	r2, #24
 80069f8:	2100      	movs	r1, #0
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 ff8b 	bl	8007916 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006a00:	233f      	movs	r3, #63	; 0x3f
 8006a02:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8006a04:	2381      	movs	r3, #129	; 0x81
 8006a06:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006a08:	1dfb      	adds	r3, r7, #7
 8006a0a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006a10:	f107 0308 	add.w	r3, r7, #8
 8006a14:	2100      	movs	r1, #0
 8006a16:	4618      	mov	r0, r3
 8006a18:	f001 fa06 	bl	8007e28 <hci_send_req>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	da01      	bge.n	8006a26 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006a22:	23ff      	movs	r3, #255	; 0xff
 8006a24:	e000      	b.n	8006a28 <aci_gap_set_non_discoverable+0x40>
  return status;
 8006a26:	79fb      	ldrb	r3, [r7, #7]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3720      	adds	r7, #32
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8006a30:	b5b0      	push	{r4, r5, r7, lr}
 8006a32:	b0ce      	sub	sp, #312	; 0x138
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	4605      	mov	r5, r0
 8006a38:	460c      	mov	r4, r1
 8006a3a:	4610      	mov	r0, r2
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	1dfb      	adds	r3, r7, #7
 8006a40:	462a      	mov	r2, r5
 8006a42:	701a      	strb	r2, [r3, #0]
 8006a44:	1d3b      	adds	r3, r7, #4
 8006a46:	4622      	mov	r2, r4
 8006a48:	801a      	strh	r2, [r3, #0]
 8006a4a:	1cbb      	adds	r3, r7, #2
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	801a      	strh	r2, [r3, #0]
 8006a50:	1dbb      	adds	r3, r7, #6
 8006a52:	460a      	mov	r2, r1
 8006a54:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8006a56:	f107 0310 	add.w	r3, r7, #16
 8006a5a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8006a5e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8006a62:	3308      	adds	r3, #8
 8006a64:	f107 0210 	add.w	r2, r7, #16
 8006a68:	4413      	add	r3, r2
 8006a6a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8006a6e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006a72:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006a76:	4413      	add	r3, r2
 8006a78:	3309      	adds	r3, #9
 8006a7a:	f107 0210 	add.w	r2, r7, #16
 8006a7e:	4413      	add	r3, r2
 8006a80:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006a84:	f107 030f 	add.w	r3, r7, #15
 8006a88:	2200      	movs	r2, #0
 8006a8a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8006a92:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006a96:	1dfa      	adds	r2, r7, #7
 8006a98:	7812      	ldrb	r2, [r2, #0]
 8006a9a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006a9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8006aa6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006aaa:	1d3a      	adds	r2, r7, #4
 8006aac:	8812      	ldrh	r2, [r2, #0]
 8006aae:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8006ab2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ab6:	3302      	adds	r3, #2
 8006ab8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8006abc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006ac0:	1cba      	adds	r2, r7, #2
 8006ac2:	8812      	ldrh	r2, [r2, #0]
 8006ac4:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8006ac8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006acc:	3302      	adds	r3, #2
 8006ace:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8006ad2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006ad6:	1dba      	adds	r2, r7, #6
 8006ad8:	7812      	ldrb	r2, [r2, #0]
 8006ada:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006adc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8006ae6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006aea:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8006aee:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006af0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006af4:	3301      	adds	r3, #1
 8006af6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8006afa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006afe:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006b02:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8006b04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b08:	3301      	adds	r3, #1
 8006b0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8006b0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b12:	3308      	adds	r3, #8
 8006b14:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006b18:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f000 feea 	bl	80078f6 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8006b22:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8006b26:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8006b30:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006b34:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006b38:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8006b3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b3e:	3301      	adds	r3, #1
 8006b40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8006b44:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006b48:	3301      	adds	r3, #1
 8006b4a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006b4e:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8006b52:	4618      	mov	r0, r3
 8006b54:	f000 fecf 	bl	80078f6 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8006b58:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006b5c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006b60:	4413      	add	r3, r2
 8006b62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8006b66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b6a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8006b6e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006b70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b74:	3302      	adds	r3, #2
 8006b76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8006b7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b7e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8006b82:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8006b84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b88:	3302      	adds	r3, #2
 8006b8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006b8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b92:	2218      	movs	r2, #24
 8006b94:	2100      	movs	r1, #0
 8006b96:	4618      	mov	r0, r3
 8006b98:	f000 febd 	bl	8007916 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006b9c:	233f      	movs	r3, #63	; 0x3f
 8006b9e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8006ba2:	2383      	movs	r3, #131	; 0x83
 8006ba4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006ba8:	f107 0310 	add.w	r3, r7, #16
 8006bac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006bb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006bb4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006bb8:	f107 030f 	add.w	r3, r7, #15
 8006bbc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006bc6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006bca:	2100      	movs	r1, #0
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f001 f92b 	bl	8007e28 <hci_send_req>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	da01      	bge.n	8006bdc <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8006bd8:	23ff      	movs	r3, #255	; 0xff
 8006bda:	e002      	b.n	8006be2 <aci_gap_set_discoverable+0x1b2>
  return status;
 8006bdc:	f107 030f 	add.w	r3, r7, #15
 8006be0:	781b      	ldrb	r3, [r3, #0]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bdb0      	pop	{r4, r5, r7, pc}

08006bec <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b0cc      	sub	sp, #304	; 0x130
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	1dfb      	adds	r3, r7, #7
 8006bf6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8006bf8:	f107 0310 	add.w	r3, r7, #16
 8006bfc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006c00:	f107 030f 	add.w	r3, r7, #15
 8006c04:	2200      	movs	r2, #0
 8006c06:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8006c0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c12:	1dfa      	adds	r2, r7, #7
 8006c14:	7812      	ldrb	r2, [r2, #0]
 8006c16:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006c18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006c22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c26:	2218      	movs	r2, #24
 8006c28:	2100      	movs	r1, #0
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f000 fe73 	bl	8007916 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006c30:	233f      	movs	r3, #63	; 0x3f
 8006c32:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8006c36:	2385      	movs	r3, #133	; 0x85
 8006c38:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006c3c:	f107 0310 	add.w	r3, r7, #16
 8006c40:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006c44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c48:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006c4c:	f107 030f 	add.w	r3, r7, #15
 8006c50:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006c54:	2301      	movs	r3, #1
 8006c56:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006c5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c5e:	2100      	movs	r1, #0
 8006c60:	4618      	mov	r0, r3
 8006c62:	f001 f8e1 	bl	8007e28 <hci_send_req>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	da01      	bge.n	8006c70 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 8006c6c:	23ff      	movs	r3, #255	; 0xff
 8006c6e:	e002      	b.n	8006c76 <aci_gap_set_io_capability+0x8a>
  return status;
 8006c70:	f107 030f 	add.w	r3, r7, #15
 8006c74:	781b      	ldrb	r3, [r3, #0]
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8006c80:	b5b0      	push	{r4, r5, r7, lr}
 8006c82:	b0cc      	sub	sp, #304	; 0x130
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	4605      	mov	r5, r0
 8006c88:	460c      	mov	r4, r1
 8006c8a:	4610      	mov	r0, r2
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	1dfb      	adds	r3, r7, #7
 8006c90:	462a      	mov	r2, r5
 8006c92:	701a      	strb	r2, [r3, #0]
 8006c94:	1dbb      	adds	r3, r7, #6
 8006c96:	4622      	mov	r2, r4
 8006c98:	701a      	strb	r2, [r3, #0]
 8006c9a:	1d7b      	adds	r3, r7, #5
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	701a      	strb	r2, [r3, #0]
 8006ca0:	1d3b      	adds	r3, r7, #4
 8006ca2:	460a      	mov	r2, r1
 8006ca4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8006ca6:	f107 0310 	add.w	r3, r7, #16
 8006caa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006cae:	f107 030f 	add.w	r3, r7, #15
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8006cbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cc0:	1dfa      	adds	r2, r7, #7
 8006cc2:	7812      	ldrb	r2, [r2, #0]
 8006cc4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006cc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006cca:	3301      	adds	r3, #1
 8006ccc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8006cd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cd4:	1dba      	adds	r2, r7, #6
 8006cd6:	7812      	ldrb	r2, [r2, #0]
 8006cd8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006cda:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006cde:	3301      	adds	r3, #1
 8006ce0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8006ce4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ce8:	1d7a      	adds	r2, r7, #5
 8006cea:	7812      	ldrb	r2, [r2, #0]
 8006cec:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006cee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8006cf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cfc:	1d3a      	adds	r2, r7, #4
 8006cfe:	7812      	ldrb	r2, [r2, #0]
 8006d00:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8006d02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d06:	3301      	adds	r3, #1
 8006d08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8006d0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d10:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8006d14:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8006d16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8006d20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d24:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8006d28:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006d2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d2e:	3301      	adds	r3, #1
 8006d30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8006d34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d38:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8006d3c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006d3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d42:	3301      	adds	r3, #1
 8006d44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8006d48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d4c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8006d50:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8006d54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d58:	3304      	adds	r3, #4
 8006d5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8006d5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d62:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8006d66:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8006d68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006d72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006d76:	2218      	movs	r2, #24
 8006d78:	2100      	movs	r1, #0
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f000 fdcb 	bl	8007916 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006d80:	233f      	movs	r3, #63	; 0x3f
 8006d82:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8006d86:	2386      	movs	r3, #134	; 0x86
 8006d88:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006d8c:	f107 0310 	add.w	r3, r7, #16
 8006d90:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006d94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d98:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006d9c:	f107 030f 	add.w	r3, r7, #15
 8006da0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006da4:	2301      	movs	r3, #1
 8006da6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006daa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006dae:	2100      	movs	r1, #0
 8006db0:	4618      	mov	r0, r3
 8006db2:	f001 f839 	bl	8007e28 <hci_send_req>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	da01      	bge.n	8006dc0 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 8006dbc:	23ff      	movs	r3, #255	; 0xff
 8006dbe:	e002      	b.n	8006dc6 <aci_gap_set_authentication_requirement+0x146>
  return status;
 8006dc0:	f107 030f 	add.w	r3, r7, #15
 8006dc4:	781b      	ldrb	r3, [r3, #0]
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bdb0      	pop	{r4, r5, r7, pc}

08006dd0 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b0cc      	sub	sp, #304	; 0x130
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	463b      	mov	r3, r7
 8006dda:	6019      	str	r1, [r3, #0]
 8006ddc:	1dbb      	adds	r3, r7, #6
 8006dde:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8006de0:	f107 0310 	add.w	r3, r7, #16
 8006de4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006de8:	f107 030f 	add.w	r3, r7, #15
 8006dec:	2200      	movs	r2, #0
 8006dee:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006df0:	2300      	movs	r3, #0
 8006df2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8006df6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dfa:	1dba      	adds	r2, r7, #6
 8006dfc:	8812      	ldrh	r2, [r2, #0]
 8006dfe:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006e00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e04:	3302      	adds	r3, #2
 8006e06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8006e0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e0e:	463a      	mov	r2, r7
 8006e10:	6812      	ldr	r2, [r2, #0]
 8006e12:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8006e16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e1a:	3304      	adds	r3, #4
 8006e1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006e20:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e24:	2218      	movs	r2, #24
 8006e26:	2100      	movs	r1, #0
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f000 fd74 	bl	8007916 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006e2e:	233f      	movs	r3, #63	; 0x3f
 8006e30:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8006e34:	2388      	movs	r3, #136	; 0x88
 8006e36:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006e3a:	f107 0310 	add.w	r3, r7, #16
 8006e3e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006e42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e46:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006e4a:	f107 030f 	add.w	r3, r7, #15
 8006e4e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006e52:	2301      	movs	r3, #1
 8006e54:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006e58:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 ffe2 	bl	8007e28 <hci_send_req>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	da01      	bge.n	8006e6e <aci_gap_pass_key_resp+0x9e>
    return BLE_STATUS_TIMEOUT;
 8006e6a:	23ff      	movs	r3, #255	; 0xff
 8006e6c:	e002      	b.n	8006e74 <aci_gap_pass_key_resp+0xa4>
  return status;
 8006e6e:	f107 030f 	add.w	r3, r7, #15
 8006e72:	781b      	ldrb	r3, [r3, #0]
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8006e7e:	b590      	push	{r4, r7, lr}
 8006e80:	b0cd      	sub	sp, #308	; 0x134
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	4604      	mov	r4, r0
 8006e86:	4608      	mov	r0, r1
 8006e88:	4611      	mov	r1, r2
 8006e8a:	463a      	mov	r2, r7
 8006e8c:	6013      	str	r3, [r2, #0]
 8006e8e:	1dfb      	adds	r3, r7, #7
 8006e90:	4622      	mov	r2, r4
 8006e92:	701a      	strb	r2, [r3, #0]
 8006e94:	1dbb      	adds	r3, r7, #6
 8006e96:	4602      	mov	r2, r0
 8006e98:	701a      	strb	r2, [r3, #0]
 8006e9a:	1d7b      	adds	r3, r7, #5
 8006e9c:	460a      	mov	r2, r1
 8006e9e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8006ea0:	f107 0310 	add.w	r3, r7, #16
 8006ea4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006ea8:	f107 0308 	add.w	r3, r7, #8
 8006eac:	2207      	movs	r2, #7
 8006eae:	2100      	movs	r1, #0
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f000 fd30 	bl	8007916 <Osal_MemSet>
  int index_input = 0;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8006ebc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ec0:	1dfa      	adds	r2, r7, #7
 8006ec2:	7812      	ldrb	r2, [r2, #0]
 8006ec4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006ec6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006eca:	3301      	adds	r3, #1
 8006ecc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8006ed0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ed4:	1dba      	adds	r2, r7, #6
 8006ed6:	7812      	ldrb	r2, [r2, #0]
 8006ed8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006eda:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ede:	3301      	adds	r3, #1
 8006ee0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8006ee4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ee8:	1d7a      	adds	r2, r7, #5
 8006eea:	7812      	ldrb	r2, [r2, #0]
 8006eec:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006eee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006ef8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006efc:	2218      	movs	r2, #24
 8006efe:	2100      	movs	r1, #0
 8006f00:	4618      	mov	r0, r3
 8006f02:	f000 fd08 	bl	8007916 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006f06:	233f      	movs	r3, #63	; 0x3f
 8006f08:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8006f0c:	238a      	movs	r3, #138	; 0x8a
 8006f0e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006f12:	f107 0310 	add.w	r3, r7, #16
 8006f16:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006f1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f1e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8006f22:	f107 0308 	add.w	r3, r7, #8
 8006f26:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8006f2a:	2307      	movs	r3, #7
 8006f2c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006f30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f34:	2100      	movs	r1, #0
 8006f36:	4618      	mov	r0, r3
 8006f38:	f000 ff76 	bl	8007e28 <hci_send_req>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	da01      	bge.n	8006f46 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8006f42:	23ff      	movs	r3, #255	; 0xff
 8006f44:	e021      	b.n	8006f8a <aci_gap_init+0x10c>
  if ( resp.Status )
 8006f46:	f107 0308 	add.w	r3, r7, #8
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d003      	beq.n	8006f58 <aci_gap_init+0xda>
    return resp.Status;
 8006f50:	f107 0308 	add.w	r3, r7, #8
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	e018      	b.n	8006f8a <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 8006f58:	f107 0308 	add.w	r3, r7, #8
 8006f5c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	463b      	mov	r3, r7
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8006f68:	f107 0308 	add.w	r3, r7, #8
 8006f6c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006f70:	b29a      	uxth	r2, r3
 8006f72:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006f76:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8006f78:	f107 0308 	add.w	r3, r7, #8
 8006f7c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006f86:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd90      	pop	{r4, r7, pc}

08006f94 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b0cc      	sub	sp, #304	; 0x130
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	463b      	mov	r3, r7
 8006f9e:	6019      	str	r1, [r3, #0]
 8006fa0:	1dfb      	adds	r3, r7, #7
 8006fa2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8006fa4:	f107 0310 	add.w	r3, r7, #16
 8006fa8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006fac:	f107 030f 	add.w	r3, r7, #15
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8006fba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fbe:	1dfa      	adds	r2, r7, #7
 8006fc0:	7812      	ldrb	r2, [r2, #0]
 8006fc2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006fc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006fc8:	3301      	adds	r3, #1
 8006fca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8006fce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fd2:	1c58      	adds	r0, r3, #1
 8006fd4:	1dfb      	adds	r3, r7, #7
 8006fd6:	781a      	ldrb	r2, [r3, #0]
 8006fd8:	463b      	mov	r3, r7
 8006fda:	6819      	ldr	r1, [r3, #0]
 8006fdc:	f000 fc8b 	bl	80078f6 <Osal_MemCpy>
  index_input += AdvDataLen;
 8006fe0:	1dfb      	adds	r3, r7, #7
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006fe8:	4413      	add	r3, r2
 8006fea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006fee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ff2:	2218      	movs	r2, #24
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 fc8d 	bl	8007916 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006ffc:	233f      	movs	r3, #63	; 0x3f
 8006ffe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8007002:	238e      	movs	r3, #142	; 0x8e
 8007004:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007008:	f107 0310 	add.w	r3, r7, #16
 800700c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007010:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007014:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007018:	f107 030f 	add.w	r3, r7, #15
 800701c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007020:	2301      	movs	r3, #1
 8007022:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007026:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800702a:	2100      	movs	r1, #0
 800702c:	4618      	mov	r0, r3
 800702e:	f000 fefb 	bl	8007e28 <hci_send_req>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	da01      	bge.n	800703c <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 8007038:	23ff      	movs	r3, #255	; 0xff
 800703a:	e002      	b.n	8007042 <aci_gap_update_adv_data+0xae>
  return status;
 800703c:	f107 030f 	add.w	r3, r7, #15
 8007040:	781b      	ldrb	r3, [r3, #0]
}
 8007042:	4618      	mov	r0, r3
 8007044:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b088      	sub	sp, #32
 8007050:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007052:	2300      	movs	r3, #0
 8007054:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007056:	f107 0308 	add.w	r3, r7, #8
 800705a:	2218      	movs	r2, #24
 800705c:	2100      	movs	r1, #0
 800705e:	4618      	mov	r0, r3
 8007060:	f000 fc59 	bl	8007916 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007064:	233f      	movs	r3, #63	; 0x3f
 8007066:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8007068:	2392      	movs	r3, #146	; 0x92
 800706a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800706c:	1dfb      	adds	r3, r7, #7
 800706e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007070:	2301      	movs	r3, #1
 8007072:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007074:	f107 0308 	add.w	r3, r7, #8
 8007078:	2100      	movs	r1, #0
 800707a:	4618      	mov	r0, r3
 800707c:	f000 fed4 	bl	8007e28 <hci_send_req>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	da01      	bge.n	800708a <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007086:	23ff      	movs	r3, #255	; 0xff
 8007088:	e000      	b.n	800708c <aci_gap_configure_whitelist+0x40>
  return status;
 800708a:	79fb      	ldrb	r3, [r7, #7]
}
 800708c:	4618      	mov	r0, r3
 800708e:	3720      	adds	r7, #32
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b0cc      	sub	sp, #304	; 0x130
 8007098:	af00      	add	r7, sp, #0
 800709a:	4602      	mov	r2, r0
 800709c:	1dbb      	adds	r3, r7, #6
 800709e:	801a      	strh	r2, [r3, #0]
 80070a0:	1d7b      	adds	r3, r7, #5
 80070a2:	460a      	mov	r2, r1
 80070a4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 80070a6:	f107 0310 	add.w	r3, r7, #16
 80070aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80070ae:	f107 030f 	add.w	r3, r7, #15
 80070b2:	2200      	movs	r2, #0
 80070b4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80070b6:	2300      	movs	r3, #0
 80070b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80070bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070c0:	1dba      	adds	r2, r7, #6
 80070c2:	8812      	ldrh	r2, [r2, #0]
 80070c4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80070c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070ca:	3302      	adds	r3, #2
 80070cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 80070d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070d4:	1d7a      	adds	r2, r7, #5
 80070d6:	7812      	ldrb	r2, [r2, #0]
 80070d8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80070da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070de:	3301      	adds	r3, #1
 80070e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80070e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80070e8:	2218      	movs	r2, #24
 80070ea:	2100      	movs	r1, #0
 80070ec:	4618      	mov	r0, r3
 80070ee:	f000 fc12 	bl	8007916 <Osal_MemSet>
  rq.ogf = 0x3f;
 80070f2:	233f      	movs	r3, #63	; 0x3f
 80070f4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 80070f8:	23a5      	movs	r3, #165	; 0xa5
 80070fa:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80070fe:	f107 0310 	add.w	r3, r7, #16
 8007102:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007106:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800710a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800710e:	f107 030f 	add.w	r3, r7, #15
 8007112:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007116:	2301      	movs	r3, #1
 8007118:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800711c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007120:	2100      	movs	r1, #0
 8007122:	4618      	mov	r0, r3
 8007124:	f000 fe80 	bl	8007e28 <hci_send_req>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	da01      	bge.n	8007132 <aci_gap_numeric_comparison_value_confirm_yesno+0x9e>
    return BLE_STATUS_TIMEOUT;
 800712e:	23ff      	movs	r3, #255	; 0xff
 8007130:	e002      	b.n	8007138 <aci_gap_numeric_comparison_value_confirm_yesno+0xa4>
  return status;
 8007132:	f107 030f 	add.w	r3, r7, #15
 8007136:	781b      	ldrb	r3, [r3, #0]
}
 8007138:	4618      	mov	r0, r3
 800713a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b088      	sub	sp, #32
 8007146:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007148:	2300      	movs	r3, #0
 800714a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800714c:	f107 0308 	add.w	r3, r7, #8
 8007150:	2218      	movs	r2, #24
 8007152:	2100      	movs	r1, #0
 8007154:	4618      	mov	r0, r3
 8007156:	f000 fbde 	bl	8007916 <Osal_MemSet>
  rq.ogf = 0x3f;
 800715a:	233f      	movs	r3, #63	; 0x3f
 800715c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800715e:	f240 1301 	movw	r3, #257	; 0x101
 8007162:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007164:	1dfb      	adds	r3, r7, #7
 8007166:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007168:	2301      	movs	r3, #1
 800716a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800716c:	f107 0308 	add.w	r3, r7, #8
 8007170:	2100      	movs	r1, #0
 8007172:	4618      	mov	r0, r3
 8007174:	f000 fe58 	bl	8007e28 <hci_send_req>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	da01      	bge.n	8007182 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800717e:	23ff      	movs	r3, #255	; 0xff
 8007180:	e000      	b.n	8007184 <aci_gatt_init+0x42>
  return status;
 8007182:	79fb      	ldrb	r3, [r7, #7]
}
 8007184:	4618      	mov	r0, r3
 8007186:	3720      	adds	r7, #32
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800718c:	b590      	push	{r4, r7, lr}
 800718e:	b0cf      	sub	sp, #316	; 0x13c
 8007190:	af00      	add	r7, sp, #0
 8007192:	4604      	mov	r4, r0
 8007194:	4638      	mov	r0, r7
 8007196:	6001      	str	r1, [r0, #0]
 8007198:	4610      	mov	r0, r2
 800719a:	4619      	mov	r1, r3
 800719c:	1dfb      	adds	r3, r7, #7
 800719e:	4622      	mov	r2, r4
 80071a0:	701a      	strb	r2, [r3, #0]
 80071a2:	1dbb      	adds	r3, r7, #6
 80071a4:	4602      	mov	r2, r0
 80071a6:	701a      	strb	r2, [r3, #0]
 80071a8:	1d7b      	adds	r3, r7, #5
 80071aa:	460a      	mov	r2, r1
 80071ac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80071ae:	f107 0310 	add.w	r3, r7, #16
 80071b2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80071b6:	1dfb      	adds	r3, r7, #7
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d007      	beq.n	80071ce <aci_gatt_add_service+0x42>
 80071be:	1dfb      	adds	r3, r7, #7
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d101      	bne.n	80071ca <aci_gatt_add_service+0x3e>
 80071c6:	2311      	movs	r3, #17
 80071c8:	e002      	b.n	80071d0 <aci_gatt_add_service+0x44>
 80071ca:	2301      	movs	r3, #1
 80071cc:	e000      	b.n	80071d0 <aci_gatt_add_service+0x44>
 80071ce:	2303      	movs	r3, #3
 80071d0:	f107 0210 	add.w	r2, r7, #16
 80071d4:	4413      	add	r3, r2
 80071d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80071da:	f107 030c 	add.w	r3, r7, #12
 80071de:	2203      	movs	r2, #3
 80071e0:	2100      	movs	r1, #0
 80071e2:	4618      	mov	r0, r3
 80071e4:	f000 fb97 	bl	8007916 <Osal_MemSet>
  int index_input = 0;
 80071e8:	2300      	movs	r3, #0
 80071ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80071ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80071f2:	1dfa      	adds	r2, r7, #7
 80071f4:	7812      	ldrb	r2, [r2, #0]
 80071f6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80071f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071fc:	3301      	adds	r3, #1
 80071fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8007202:	1dfb      	adds	r3, r7, #7
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d002      	beq.n	8007210 <aci_gatt_add_service+0x84>
 800720a:	2b02      	cmp	r3, #2
 800720c:	d004      	beq.n	8007218 <aci_gatt_add_service+0x8c>
 800720e:	e007      	b.n	8007220 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 8007210:	2302      	movs	r3, #2
 8007212:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8007216:	e005      	b.n	8007224 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 8007218:	2310      	movs	r3, #16
 800721a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800721e:	e001      	b.n	8007224 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 8007220:	2397      	movs	r3, #151	; 0x97
 8007222:	e05d      	b.n	80072e0 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8007224:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007228:	1c58      	adds	r0, r3, #1
 800722a:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800722e:	463b      	mov	r3, r7
 8007230:	6819      	ldr	r1, [r3, #0]
 8007232:	f000 fb60 	bl	80078f6 <Osal_MemCpy>
    index_input += size;
 8007236:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800723a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800723e:	4413      	add	r3, r2
 8007240:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8007244:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007248:	1dba      	adds	r2, r7, #6
 800724a:	7812      	ldrb	r2, [r2, #0]
 800724c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800724e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007252:	3301      	adds	r3, #1
 8007254:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8007258:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800725c:	1d7a      	adds	r2, r7, #5
 800725e:	7812      	ldrb	r2, [r2, #0]
 8007260:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8007262:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007266:	3301      	adds	r3, #1
 8007268:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800726c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007270:	2218      	movs	r2, #24
 8007272:	2100      	movs	r1, #0
 8007274:	4618      	mov	r0, r3
 8007276:	f000 fb4e 	bl	8007916 <Osal_MemSet>
  rq.ogf = 0x3f;
 800727a:	233f      	movs	r3, #63	; 0x3f
 800727c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8007280:	f44f 7381 	mov.w	r3, #258	; 0x102
 8007284:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007288:	f107 0310 	add.w	r3, r7, #16
 800728c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007290:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007294:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007298:	f107 030c 	add.w	r3, r7, #12
 800729c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80072a0:	2303      	movs	r3, #3
 80072a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80072a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80072aa:	2100      	movs	r1, #0
 80072ac:	4618      	mov	r0, r3
 80072ae:	f000 fdbb 	bl	8007e28 <hci_send_req>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	da01      	bge.n	80072bc <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 80072b8:	23ff      	movs	r3, #255	; 0xff
 80072ba:	e011      	b.n	80072e0 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 80072bc:	f107 030c 	add.w	r3, r7, #12
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d003      	beq.n	80072ce <aci_gatt_add_service+0x142>
    return resp.Status;
 80072c6:	f107 030c 	add.w	r3, r7, #12
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	e008      	b.n	80072e0 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 80072ce:	f107 030c 	add.w	r3, r7, #12
 80072d2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80072dc:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd90      	pop	{r4, r7, pc}

080072ea <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80072ea:	b590      	push	{r4, r7, lr}
 80072ec:	b0d1      	sub	sp, #324	; 0x144
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	4604      	mov	r4, r0
 80072f2:	4608      	mov	r0, r1
 80072f4:	f107 0108 	add.w	r1, r7, #8
 80072f8:	600a      	str	r2, [r1, #0]
 80072fa:	4619      	mov	r1, r3
 80072fc:	f107 030e 	add.w	r3, r7, #14
 8007300:	4622      	mov	r2, r4
 8007302:	801a      	strh	r2, [r3, #0]
 8007304:	f107 030d 	add.w	r3, r7, #13
 8007308:	4602      	mov	r2, r0
 800730a:	701a      	strb	r2, [r3, #0]
 800730c:	1dbb      	adds	r3, r7, #6
 800730e:	460a      	mov	r2, r1
 8007310:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8007312:	f107 0318 	add.w	r3, r7, #24
 8007316:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800731a:	f107 030d 	add.w	r3, r7, #13
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d008      	beq.n	8007336 <aci_gatt_add_char+0x4c>
 8007324:	f107 030d 	add.w	r3, r7, #13
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	2b02      	cmp	r3, #2
 800732c:	d101      	bne.n	8007332 <aci_gatt_add_char+0x48>
 800732e:	2313      	movs	r3, #19
 8007330:	e002      	b.n	8007338 <aci_gatt_add_char+0x4e>
 8007332:	2303      	movs	r3, #3
 8007334:	e000      	b.n	8007338 <aci_gatt_add_char+0x4e>
 8007336:	2305      	movs	r3, #5
 8007338:	f107 0218 	add.w	r2, r7, #24
 800733c:	4413      	add	r3, r2
 800733e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007342:	f107 0314 	add.w	r3, r7, #20
 8007346:	2203      	movs	r2, #3
 8007348:	2100      	movs	r1, #0
 800734a:	4618      	mov	r0, r3
 800734c:	f000 fae3 	bl	8007916 <Osal_MemSet>
  int index_input = 0;
 8007350:	2300      	movs	r3, #0
 8007352:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8007356:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800735a:	f107 020e 	add.w	r2, r7, #14
 800735e:	8812      	ldrh	r2, [r2, #0]
 8007360:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007362:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007366:	3302      	adds	r3, #2
 8007368:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800736c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007370:	f107 020d 	add.w	r2, r7, #13
 8007374:	7812      	ldrb	r2, [r2, #0]
 8007376:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007378:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800737c:	3301      	adds	r3, #1
 800737e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8007382:	f107 030d 	add.w	r3, r7, #13
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	2b01      	cmp	r3, #1
 800738a:	d002      	beq.n	8007392 <aci_gatt_add_char+0xa8>
 800738c:	2b02      	cmp	r3, #2
 800738e:	d004      	beq.n	800739a <aci_gatt_add_char+0xb0>
 8007390:	e007      	b.n	80073a2 <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 8007392:	2302      	movs	r3, #2
 8007394:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007398:	e005      	b.n	80073a6 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 800739a:	2310      	movs	r3, #16
 800739c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80073a0:	e001      	b.n	80073a6 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 80073a2:	2397      	movs	r3, #151	; 0x97
 80073a4:	e086      	b.n	80074b4 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80073a6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80073aa:	1cd8      	adds	r0, r3, #3
 80073ac:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80073b0:	f107 0308 	add.w	r3, r7, #8
 80073b4:	6819      	ldr	r1, [r3, #0]
 80073b6:	f000 fa9e 	bl	80078f6 <Osal_MemCpy>
    index_input += size;
 80073ba:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80073be:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80073c2:	4413      	add	r3, r2
 80073c4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80073c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80073cc:	1dba      	adds	r2, r7, #6
 80073ce:	8812      	ldrh	r2, [r2, #0]
 80073d0:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80073d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80073d6:	3302      	adds	r3, #2
 80073d8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80073dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80073e0:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80073e4:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 80073e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80073ea:	3301      	adds	r3, #1
 80073ec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 80073f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80073f4:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80073f8:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80073fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80073fe:	3301      	adds	r3, #1
 8007400:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8007404:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007408:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800740c:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800740e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007412:	3301      	adds	r3, #1
 8007414:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8007418:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800741c:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8007420:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8007422:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007426:	3301      	adds	r3, #1
 8007428:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800742c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007430:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8007434:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8007436:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800743a:	3301      	adds	r3, #1
 800743c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007440:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007444:	2218      	movs	r2, #24
 8007446:	2100      	movs	r1, #0
 8007448:	4618      	mov	r0, r3
 800744a:	f000 fa64 	bl	8007916 <Osal_MemSet>
  rq.ogf = 0x3f;
 800744e:	233f      	movs	r3, #63	; 0x3f
 8007450:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8007454:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007458:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800745c:	f107 0318 	add.w	r3, r7, #24
 8007460:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8007464:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007468:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800746c:	f107 0314 	add.w	r3, r7, #20
 8007470:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8007474:	2303      	movs	r3, #3
 8007476:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800747a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800747e:	2100      	movs	r1, #0
 8007480:	4618      	mov	r0, r3
 8007482:	f000 fcd1 	bl	8007e28 <hci_send_req>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	da01      	bge.n	8007490 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 800748c:	23ff      	movs	r3, #255	; 0xff
 800748e:	e011      	b.n	80074b4 <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 8007490:	f107 0314 	add.w	r3, r7, #20
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d003      	beq.n	80074a2 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 800749a:	f107 0314 	add.w	r3, r7, #20
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	e008      	b.n	80074b4 <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 80074a2:	f107 0314 	add.w	r3, r7, #20
 80074a6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80074b0:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd90      	pop	{r4, r7, pc}

080074be <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80074be:	b5b0      	push	{r4, r5, r7, lr}
 80074c0:	b0cc      	sub	sp, #304	; 0x130
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	4605      	mov	r5, r0
 80074c6:	460c      	mov	r4, r1
 80074c8:	4610      	mov	r0, r2
 80074ca:	4619      	mov	r1, r3
 80074cc:	1dbb      	adds	r3, r7, #6
 80074ce:	462a      	mov	r2, r5
 80074d0:	801a      	strh	r2, [r3, #0]
 80074d2:	1d3b      	adds	r3, r7, #4
 80074d4:	4622      	mov	r2, r4
 80074d6:	801a      	strh	r2, [r3, #0]
 80074d8:	1cfb      	adds	r3, r7, #3
 80074da:	4602      	mov	r2, r0
 80074dc:	701a      	strb	r2, [r3, #0]
 80074de:	1cbb      	adds	r3, r7, #2
 80074e0:	460a      	mov	r2, r1
 80074e2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80074e4:	f107 0310 	add.w	r3, r7, #16
 80074e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80074ec:	f107 030f 	add.w	r3, r7, #15
 80074f0:	2200      	movs	r2, #0
 80074f2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80074f4:	2300      	movs	r3, #0
 80074f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 80074fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074fe:	1dba      	adds	r2, r7, #6
 8007500:	8812      	ldrh	r2, [r2, #0]
 8007502:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007504:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007508:	3302      	adds	r3, #2
 800750a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800750e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007512:	1d3a      	adds	r2, r7, #4
 8007514:	8812      	ldrh	r2, [r2, #0]
 8007516:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007518:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800751c:	3302      	adds	r3, #2
 800751e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8007522:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007526:	1cfa      	adds	r2, r7, #3
 8007528:	7812      	ldrb	r2, [r2, #0]
 800752a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800752c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007530:	3301      	adds	r3, #1
 8007532:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8007536:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800753a:	1cba      	adds	r2, r7, #2
 800753c:	7812      	ldrb	r2, [r2, #0]
 800753e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007540:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007544:	3301      	adds	r3, #1
 8007546:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800754a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800754e:	1d98      	adds	r0, r3, #6
 8007550:	1cbb      	adds	r3, r7, #2
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	461a      	mov	r2, r3
 8007556:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800755a:	f000 f9cc 	bl	80078f6 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800755e:	1cbb      	adds	r3, r7, #2
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007566:	4413      	add	r3, r2
 8007568:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800756c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007570:	2218      	movs	r2, #24
 8007572:	2100      	movs	r1, #0
 8007574:	4618      	mov	r0, r3
 8007576:	f000 f9ce 	bl	8007916 <Osal_MemSet>
  rq.ogf = 0x3f;
 800757a:	233f      	movs	r3, #63	; 0x3f
 800757c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8007580:	f44f 7383 	mov.w	r3, #262	; 0x106
 8007584:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007588:	f107 0310 	add.w	r3, r7, #16
 800758c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007590:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007594:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007598:	f107 030f 	add.w	r3, r7, #15
 800759c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80075a0:	2301      	movs	r3, #1
 80075a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80075a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80075aa:	2100      	movs	r1, #0
 80075ac:	4618      	mov	r0, r3
 80075ae:	f000 fc3b 	bl	8007e28 <hci_send_req>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	da01      	bge.n	80075bc <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 80075b8:	23ff      	movs	r3, #255	; 0xff
 80075ba:	e002      	b.n	80075c2 <aci_gatt_update_char_value+0x104>
  return status;
 80075bc:	f107 030f 	add.w	r3, r7, #15
 80075c0:	781b      	ldrb	r3, [r3, #0]
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bdb0      	pop	{r4, r5, r7, pc}

080075cc <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b0cc      	sub	sp, #304	; 0x130
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	463b      	mov	r3, r7
 80075d4:	601a      	str	r2, [r3, #0]
 80075d6:	1dfb      	adds	r3, r7, #7
 80075d8:	4602      	mov	r2, r0
 80075da:	701a      	strb	r2, [r3, #0]
 80075dc:	1dbb      	adds	r3, r7, #6
 80075de:	460a      	mov	r2, r1
 80075e0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80075e2:	f107 0310 	add.w	r3, r7, #16
 80075e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80075ea:	f107 030f 	add.w	r3, r7, #15
 80075ee:	2200      	movs	r2, #0
 80075f0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80075f2:	2300      	movs	r3, #0
 80075f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 80075f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075fc:	1dfa      	adds	r2, r7, #7
 80075fe:	7812      	ldrb	r2, [r2, #0]
 8007600:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007602:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007606:	3301      	adds	r3, #1
 8007608:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800760c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007610:	1dba      	adds	r2, r7, #6
 8007612:	7812      	ldrb	r2, [r2, #0]
 8007614:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007616:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800761a:	3301      	adds	r3, #1
 800761c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8007620:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007624:	1c98      	adds	r0, r3, #2
 8007626:	1dbb      	adds	r3, r7, #6
 8007628:	781a      	ldrb	r2, [r3, #0]
 800762a:	463b      	mov	r3, r7
 800762c:	6819      	ldr	r1, [r3, #0]
 800762e:	f000 f962 	bl	80078f6 <Osal_MemCpy>
  index_input += Length;
 8007632:	1dbb      	adds	r3, r7, #6
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800763a:	4413      	add	r3, r2
 800763c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007640:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007644:	2218      	movs	r2, #24
 8007646:	2100      	movs	r1, #0
 8007648:	4618      	mov	r0, r3
 800764a:	f000 f964 	bl	8007916 <Osal_MemSet>
  rq.ogf = 0x3f;
 800764e:	233f      	movs	r3, #63	; 0x3f
 8007650:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8007654:	230c      	movs	r3, #12
 8007656:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800765a:	f107 0310 	add.w	r3, r7, #16
 800765e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007662:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007666:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800766a:	f107 030f 	add.w	r3, r7, #15
 800766e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007672:	2301      	movs	r3, #1
 8007674:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007678:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800767c:	2100      	movs	r1, #0
 800767e:	4618      	mov	r0, r3
 8007680:	f000 fbd2 	bl	8007e28 <hci_send_req>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	da01      	bge.n	800768e <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 800768a:	23ff      	movs	r3, #255	; 0xff
 800768c:	e002      	b.n	8007694 <aci_hal_write_config_data+0xc8>
  return status;
 800768e:	f107 030f 	add.w	r3, r7, #15
 8007692:	781b      	ldrb	r3, [r3, #0]
}
 8007694:	4618      	mov	r0, r3
 8007696:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b0cc      	sub	sp, #304	; 0x130
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	4602      	mov	r2, r0
 80076a6:	1dfb      	adds	r3, r7, #7
 80076a8:	701a      	strb	r2, [r3, #0]
 80076aa:	1dbb      	adds	r3, r7, #6
 80076ac:	460a      	mov	r2, r1
 80076ae:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80076b0:	f107 0310 	add.w	r3, r7, #16
 80076b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80076b8:	f107 030f 	add.w	r3, r7, #15
 80076bc:	2200      	movs	r2, #0
 80076be:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80076c0:	2300      	movs	r3, #0
 80076c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 80076c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076ca:	1dfa      	adds	r2, r7, #7
 80076cc:	7812      	ldrb	r2, [r2, #0]
 80076ce:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80076d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076d4:	3301      	adds	r3, #1
 80076d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 80076da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076de:	1dba      	adds	r2, r7, #6
 80076e0:	7812      	ldrb	r2, [r2, #0]
 80076e2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80076e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076e8:	3301      	adds	r3, #1
 80076ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80076ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80076f2:	2218      	movs	r2, #24
 80076f4:	2100      	movs	r1, #0
 80076f6:	4618      	mov	r0, r3
 80076f8:	f000 f90d 	bl	8007916 <Osal_MemSet>
  rq.ogf = 0x3f;
 80076fc:	233f      	movs	r3, #63	; 0x3f
 80076fe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8007702:	230f      	movs	r3, #15
 8007704:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007708:	f107 0310 	add.w	r3, r7, #16
 800770c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007710:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007714:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007718:	f107 030f 	add.w	r3, r7, #15
 800771c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007720:	2301      	movs	r3, #1
 8007722:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007726:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800772a:	2100      	movs	r1, #0
 800772c:	4618      	mov	r0, r3
 800772e:	f000 fb7b 	bl	8007e28 <hci_send_req>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	da01      	bge.n	800773c <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 8007738:	23ff      	movs	r3, #255	; 0xff
 800773a:	e002      	b.n	8007742 <aci_hal_set_tx_power_level+0xa4>
  return status;
 800773c:	f107 030f 	add.w	r3, r7, #15
 8007740:	781b      	ldrb	r3, [r3, #0]
}
 8007742:	4618      	mov	r0, r3
 8007744:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b0cc      	sub	sp, #304	; 0x130
 8007750:	af00      	add	r7, sp, #0
 8007752:	4602      	mov	r2, r0
 8007754:	1dbb      	adds	r3, r7, #6
 8007756:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8007758:	f107 0310 	add.w	r3, r7, #16
 800775c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007760:	f107 030f 	add.w	r3, r7, #15
 8007764:	2200      	movs	r2, #0
 8007766:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007768:	2300      	movs	r3, #0
 800776a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800776e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007772:	1dba      	adds	r2, r7, #6
 8007774:	8812      	ldrh	r2, [r2, #0]
 8007776:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007778:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800777c:	3302      	adds	r3, #2
 800777e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007782:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007786:	2218      	movs	r2, #24
 8007788:	2100      	movs	r1, #0
 800778a:	4618      	mov	r0, r3
 800778c:	f000 f8c3 	bl	8007916 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007790:	233f      	movs	r3, #63	; 0x3f
 8007792:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8007796:	2318      	movs	r3, #24
 8007798:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800779c:	f107 0310 	add.w	r3, r7, #16
 80077a0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80077a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80077ac:	f107 030f 	add.w	r3, r7, #15
 80077b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80077b4:	2301      	movs	r3, #1
 80077b6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80077ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80077be:	2100      	movs	r1, #0
 80077c0:	4618      	mov	r0, r3
 80077c2:	f000 fb31 	bl	8007e28 <hci_send_req>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	da01      	bge.n	80077d0 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 80077cc:	23ff      	movs	r3, #255	; 0xff
 80077ce:	e002      	b.n	80077d6 <aci_hal_set_radio_activity_mask+0x8a>
  return status;
 80077d0:	f107 030f 	add.w	r3, r7, #15
 80077d4:	781b      	ldrb	r3, [r3, #0]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b088      	sub	sp, #32
 80077e4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80077e6:	2300      	movs	r3, #0
 80077e8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80077ea:	f107 0308 	add.w	r3, r7, #8
 80077ee:	2218      	movs	r2, #24
 80077f0:	2100      	movs	r1, #0
 80077f2:	4618      	mov	r0, r3
 80077f4:	f000 f88f 	bl	8007916 <Osal_MemSet>
  rq.ogf = 0x03;
 80077f8:	2303      	movs	r3, #3
 80077fa:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80077fc:	2303      	movs	r3, #3
 80077fe:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007800:	1dfb      	adds	r3, r7, #7
 8007802:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007804:	2301      	movs	r3, #1
 8007806:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007808:	f107 0308 	add.w	r3, r7, #8
 800780c:	2100      	movs	r1, #0
 800780e:	4618      	mov	r0, r3
 8007810:	f000 fb0a 	bl	8007e28 <hci_send_req>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	da01      	bge.n	800781e <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800781a:	23ff      	movs	r3, #255	; 0xff
 800781c:	e000      	b.n	8007820 <hci_reset+0x40>
  return status;
 800781e:	79fb      	ldrb	r3, [r7, #7]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3720      	adds	r7, #32
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8007828:	b590      	push	{r4, r7, lr}
 800782a:	b0cd      	sub	sp, #308	; 0x134
 800782c:	af00      	add	r7, sp, #0
 800782e:	4604      	mov	r4, r0
 8007830:	4608      	mov	r0, r1
 8007832:	4611      	mov	r1, r2
 8007834:	1dfb      	adds	r3, r7, #7
 8007836:	4622      	mov	r2, r4
 8007838:	701a      	strb	r2, [r3, #0]
 800783a:	1dbb      	adds	r3, r7, #6
 800783c:	4602      	mov	r2, r0
 800783e:	701a      	strb	r2, [r3, #0]
 8007840:	1d7b      	adds	r3, r7, #5
 8007842:	460a      	mov	r2, r1
 8007844:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8007846:	f107 0310 	add.w	r3, r7, #16
 800784a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800784e:	f107 030f 	add.w	r3, r7, #15
 8007852:	2200      	movs	r2, #0
 8007854:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007856:	2300      	movs	r3, #0
 8007858:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800785c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007860:	1dfa      	adds	r2, r7, #7
 8007862:	7812      	ldrb	r2, [r2, #0]
 8007864:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007866:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800786a:	3301      	adds	r3, #1
 800786c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8007870:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007874:	1dba      	adds	r2, r7, #6
 8007876:	7812      	ldrb	r2, [r2, #0]
 8007878:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800787a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800787e:	3301      	adds	r3, #1
 8007880:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8007884:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007888:	1d7a      	adds	r2, r7, #5
 800788a:	7812      	ldrb	r2, [r2, #0]
 800788c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800788e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007892:	3301      	adds	r3, #1
 8007894:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007898:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800789c:	2218      	movs	r2, #24
 800789e:	2100      	movs	r1, #0
 80078a0:	4618      	mov	r0, r3
 80078a2:	f000 f838 	bl	8007916 <Osal_MemSet>
  rq.ogf = 0x08;
 80078a6:	2308      	movs	r3, #8
 80078a8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 80078ac:	2331      	movs	r3, #49	; 0x31
 80078ae:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80078b2:	f107 0310 	add.w	r3, r7, #16
 80078b6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80078ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80078c2:	f107 030f 	add.w	r3, r7, #15
 80078c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80078ca:	2301      	movs	r3, #1
 80078cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80078d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80078d4:	2100      	movs	r1, #0
 80078d6:	4618      	mov	r0, r3
 80078d8:	f000 faa6 	bl	8007e28 <hci_send_req>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	da01      	bge.n	80078e6 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 80078e2:	23ff      	movs	r3, #255	; 0xff
 80078e4:	e002      	b.n	80078ec <hci_le_set_default_phy+0xc4>
  return status;
 80078e6:	f107 030f 	add.w	r3, r7, #15
 80078ea:	781b      	ldrb	r3, [r3, #0]
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd90      	pop	{r4, r7, pc}

080078f6 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b084      	sub	sp, #16
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	60f8      	str	r0, [r7, #12]
 80078fe:	60b9      	str	r1, [r7, #8]
 8007900:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	68b9      	ldr	r1, [r7, #8]
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f002 fd90 	bl	800a42c <memcpy>
 800790c:	4603      	mov	r3, r0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b084      	sub	sp, #16
 800791a:	af00      	add	r7, sp, #0
 800791c:	60f8      	str	r0, [r7, #12]
 800791e:	60b9      	str	r1, [r7, #8]
 8007920:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	68b9      	ldr	r1, [r7, #8]
 8007926:	68f8      	ldr	r0, [r7, #12]
 8007928:	f002 fd8e 	bl	800a448 <memset>
 800792c:	4603      	mov	r3, r0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8007936:	b480      	push	{r7}
 8007938:	af00      	add	r7, sp, #0
  return;
 800793a:	bf00      	nop
}
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8007944:	b480      	push	{r7}
 8007946:	af00      	add	r7, sp, #0
  return;
 8007948:	bf00      	nop
}
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr

08007952 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8007952:	b480      	push	{r7}
 8007954:	af00      	add	r7, sp, #0
  return;
 8007956:	bf00      	nop
}
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8007960:	b480      	push	{r7}
 8007962:	af00      	add	r7, sp, #0
  return;
 8007964:	bf00      	nop
}
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr

0800796e <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800796e:	b480      	push	{r7}
 8007970:	af00      	add	r7, sp, #0
  return;
 8007972:	bf00      	nop
}
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800797c:	b480      	push	{r7}
 800797e:	af00      	add	r7, sp, #0
  return;
 8007980:	bf00      	nop
}
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr

0800798a <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800798a:	b480      	push	{r7}
 800798c:	af00      	add	r7, sp, #0
  return;
 800798e:	bf00      	nop
}
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8007998:	b480      	push	{r7}
 800799a:	af00      	add	r7, sp, #0
  return;
 800799c:	bf00      	nop
}
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr

080079a6 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 80079a6:	b480      	push	{r7}
 80079a8:	af00      	add	r7, sp, #0
  return;
 80079aa:	bf00      	nop
}
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 80079b4:	b480      	push	{r7}
 80079b6:	af00      	add	r7, sp, #0
  return;
 80079b8:	bf00      	nop
}
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr

080079c2 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 80079c2:	b480      	push	{r7}
 80079c4:	af00      	add	r7, sp, #0
  return;
 80079c6:	bf00      	nop
}
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 80079d0:	b480      	push	{r7}
 80079d2:	af00      	add	r7, sp, #0
  return;
 80079d4:	bf00      	nop
}
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 80079de:	b480      	push	{r7}
 80079e0:	af00      	add	r7, sp, #0
  return;
 80079e2:	bf00      	nop
}
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 80079ec:	b480      	push	{r7}
 80079ee:	af00      	add	r7, sp, #0
  return;
 80079f0:	bf00      	nop
}
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 80079fa:	b480      	push	{r7}
 80079fc:	af00      	add	r7, sp, #0
  return;
 80079fe:	bf00      	nop
}
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8007a08:	b480      	push	{r7}
 8007a0a:	af00      	add	r7, sp, #0
  return;
 8007a0c:	bf00      	nop
}
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr

08007a16 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8007a16:	b480      	push	{r7}
 8007a18:	af00      	add	r7, sp, #0
  return;
 8007a1a:	bf00      	nop
}
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8007a28:	4b04      	ldr	r3, [pc, #16]	; (8007a3c <SVCCTL_Init+0x18>)
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8007a2e:	4b04      	ldr	r3, [pc, #16]	; (8007a40 <SVCCTL_Init+0x1c>)
 8007a30:	2200      	movs	r2, #0
 8007a32:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8007a34:	f000 f806 	bl	8007a44 <SVCCTL_SvcInit>

  return;
 8007a38:	bf00      	nop
}
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	20000124 	.word	0x20000124
 8007a40:	20000144 	.word	0x20000144

08007a44 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	af00      	add	r7, sp, #0
  BAS_Init();
 8007a48:	f7ff ff75 	bl	8007936 <BAS_Init>

  BLS_Init();
 8007a4c:	f7ff ff7a 	bl	8007944 <BLS_Init>

  CRS_STM_Init();
 8007a50:	f7ff ff7f 	bl	8007952 <CRS_STM_Init>

  DIS_Init();
 8007a54:	f7ff ff84 	bl	8007960 <DIS_Init>

  EDS_STM_Init();
 8007a58:	f7ff ff89 	bl	800796e <EDS_STM_Init>

  HIDS_Init();
 8007a5c:	f7ff ff8e 	bl	800797c <HIDS_Init>

  HRS_Init();
 8007a60:	f7ff ff93 	bl	800798a <HRS_Init>

  HTS_Init();
 8007a64:	f7ff ff98 	bl	8007998 <HTS_Init>

  IAS_Init();
 8007a68:	f7ff ff9d 	bl	80079a6 <IAS_Init>

  LLS_Init();
 8007a6c:	f7ff ffa2 	bl	80079b4 <LLS_Init>

  TPS_Init();
 8007a70:	f7ff ffa7 	bl	80079c2 <TPS_Init>

  MOTENV_STM_Init();
 8007a74:	f7ff ffac 	bl	80079d0 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8007a78:	f7ff ffb1 	bl	80079de <P2PS_STM_Init>

  ZDD_STM_Init();
 8007a7c:	f7ff ffb6 	bl	80079ec <ZDD_STM_Init>

  OTAS_STM_Init();
 8007a80:	f7ff ffbb 	bl	80079fa <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8007a84:	f7ff ffc7 	bl	8007a16 <BVOPUS_STM_Init>

  MESH_Init();
 8007a88:	f7ff ffbe 	bl	8007a08 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8007a8c:	f001 ff7a 	bl	8009984 <SVCCTL_InitCustomSvc>
  
  return;
 8007a90:	bf00      	nop
}
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8007a9c:	4b09      	ldr	r3, [pc, #36]	; (8007ac4 <SVCCTL_RegisterSvcHandler+0x30>)
 8007a9e:	7f1b      	ldrb	r3, [r3, #28]
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	4a08      	ldr	r2, [pc, #32]	; (8007ac4 <SVCCTL_RegisterSvcHandler+0x30>)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8007aaa:	4b06      	ldr	r3, [pc, #24]	; (8007ac4 <SVCCTL_RegisterSvcHandler+0x30>)
 8007aac:	7f1b      	ldrb	r3, [r3, #28]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	b2da      	uxtb	r2, r3
 8007ab2:	4b04      	ldr	r3, [pc, #16]	; (8007ac4 <SVCCTL_RegisterSvcHandler+0x30>)
 8007ab4:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8007ab6:	bf00      	nop
}
 8007ab8:	370c      	adds	r7, #12
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	20000124 	.word	0x20000124

08007ac8 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b086      	sub	sp, #24
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	2bff      	cmp	r3, #255	; 0xff
 8007ae0:	d125      	bne.n	8007b2e <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	3302      	adds	r3, #2
 8007ae6:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	881b      	ldrh	r3, [r3, #0]
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007af2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007af6:	d118      	bne.n	8007b2a <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007af8:	2300      	movs	r3, #0
 8007afa:	757b      	strb	r3, [r7, #21]
 8007afc:	e00d      	b.n	8007b1a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8007afe:	7d7b      	ldrb	r3, [r7, #21]
 8007b00:	4a1a      	ldr	r2, [pc, #104]	; (8007b6c <SVCCTL_UserEvtRx+0xa4>)
 8007b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	4798      	blx	r3
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8007b0e:	7dfb      	ldrb	r3, [r7, #23]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d108      	bne.n	8007b26 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007b14:	7d7b      	ldrb	r3, [r7, #21]
 8007b16:	3301      	adds	r3, #1
 8007b18:	757b      	strb	r3, [r7, #21]
 8007b1a:	4b14      	ldr	r3, [pc, #80]	; (8007b6c <SVCCTL_UserEvtRx+0xa4>)
 8007b1c:	7f1b      	ldrb	r3, [r3, #28]
 8007b1e:	7d7a      	ldrb	r2, [r7, #21]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d3ec      	bcc.n	8007afe <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8007b24:	e002      	b.n	8007b2c <SVCCTL_UserEvtRx+0x64>
              break;
 8007b26:	bf00      	nop
          break;
 8007b28:	e000      	b.n	8007b2c <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8007b2a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8007b2c:	e000      	b.n	8007b30 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8007b2e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8007b30:	7dfb      	ldrb	r3, [r7, #23]
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d00f      	beq.n	8007b56 <SVCCTL_UserEvtRx+0x8e>
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	dc10      	bgt.n	8007b5c <SVCCTL_UserEvtRx+0x94>
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d002      	beq.n	8007b44 <SVCCTL_UserEvtRx+0x7c>
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d006      	beq.n	8007b50 <SVCCTL_UserEvtRx+0x88>
 8007b42:	e00b      	b.n	8007b5c <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f001 fc27 	bl	8009398 <SVCCTL_App_Notification>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	75bb      	strb	r3, [r7, #22]
      break;
 8007b4e:	e008      	b.n	8007b62 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007b50:	2301      	movs	r3, #1
 8007b52:	75bb      	strb	r3, [r7, #22]
      break;
 8007b54:	e005      	b.n	8007b62 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8007b56:	2300      	movs	r3, #0
 8007b58:	75bb      	strb	r3, [r7, #22]
      break;
 8007b5a:	e002      	b.n	8007b62 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	75bb      	strb	r3, [r7, #22]
      break;
 8007b60:	bf00      	nop
  }

  return (return_status);
 8007b62:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3718      	adds	r7, #24
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	20000124 	.word	0x20000124

08007b70 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b088      	sub	sp, #32
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007b78:	f107 030c 	add.w	r3, r7, #12
 8007b7c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	2125      	movs	r1, #37	; 0x25
 8007b88:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8007b8c:	f000 fae2 	bl	8008154 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	330b      	adds	r3, #11
 8007b94:	78db      	ldrb	r3, [r3, #3]
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3720      	adds	r7, #32
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b088      	sub	sp, #32
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007ba6:	f107 030c 	add.w	r3, r7, #12
 8007baa:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	210f      	movs	r1, #15
 8007bb6:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8007bba:	f000 facb 	bl	8008154 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	330b      	adds	r3, #11
 8007bc2:	78db      	ldrb	r3, [r3, #3]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3720      	adds	r7, #32
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b088      	sub	sp, #32
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007bd4:	f107 030c 	add.w	r3, r7, #12
 8007bd8:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	210e      	movs	r1, #14
 8007be0:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8007be4:	f000 fab6 	bl	8008154 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	330b      	adds	r3, #11
 8007bec:	78db      	ldrb	r3, [r3, #3]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3720      	adds	r7, #32
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
	...

08007bf8 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b08b      	sub	sp, #44	; 0x2c
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8007c00:	2300      	movs	r3, #0
 8007c02:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8007c04:	2300      	movs	r3, #0
 8007c06:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8007c10:	2300      	movs	r3, #0
 8007c12:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8007c14:	2300      	movs	r3, #0
 8007c16:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8007c20:	4b4a      	ldr	r3, [pc, #296]	; (8007d4c <SHCI_GetWirelessFwInfo+0x154>)
 8007c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c24:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007c28:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007c32:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a44      	ldr	r2, [pc, #272]	; (8007d50 <SHCI_GetWirelessFwInfo+0x158>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d10f      	bne.n	8007c64 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	695b      	ldr	r3, [r3, #20]
 8007c48:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	699b      	ldr	r3, [r3, #24]
 8007c4e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	69db      	ldr	r3, [r3, #28]
 8007c54:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	617b      	str	r3, [r7, #20]
 8007c62:	e01a      	b.n	8007c9a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007c6c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8007c70:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	695b      	ldr	r3, [r3, #20]
 8007c80:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	699b      	ldr	r3, [r3, #24]
 8007c88:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8007c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9c:	0e1b      	lsrs	r3, r3, #24
 8007c9e:	b2da      	uxtb	r2, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8007ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca6:	0c1b      	lsrs	r3, r3, #16
 8007ca8:	b2da      	uxtb	r2, r3
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8007cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb0:	0a1b      	lsrs	r3, r3, #8
 8007cb2:	b2da      	uxtb	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8007cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cba:	091b      	lsrs	r3, r3, #4
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	f003 030f 	and.w	r3, r3, #15
 8007cc2:	b2da      	uxtb	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8007cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	f003 030f 	and.w	r3, r3, #15
 8007cd0:	b2da      	uxtb	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8007cd6:	6a3b      	ldr	r3, [r7, #32]
 8007cd8:	0e1b      	lsrs	r3, r3, #24
 8007cda:	b2da      	uxtb	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007ce0:	6a3b      	ldr	r3, [r7, #32]
 8007ce2:	0c1b      	lsrs	r3, r3, #16
 8007ce4:	b2da      	uxtb	r2, r3
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8007cea:	6a3b      	ldr	r3, [r7, #32]
 8007cec:	0a1b      	lsrs	r3, r3, #8
 8007cee:	b2da      	uxtb	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8007cf4:	6a3b      	ldr	r3, [r7, #32]
 8007cf6:	b2da      	uxtb	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	b2da      	uxtb	r2, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	0e1b      	lsrs	r3, r3, #24
 8007d08:	b2da      	uxtb	r2, r3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	0c1b      	lsrs	r3, r3, #16
 8007d12:	b2da      	uxtb	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	0a1b      	lsrs	r3, r3, #8
 8007d1c:	b2da      	uxtb	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	0e1b      	lsrs	r3, r3, #24
 8007d26:	b2da      	uxtb	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	0c1b      	lsrs	r3, r3, #16
 8007d30:	b2da      	uxtb	r2, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	b2da      	uxtb	r2, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	372c      	adds	r7, #44	; 0x2c
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr
 8007d4c:	58004000 	.word	0x58004000
 8007d50:	a94656b9 	.word	0xa94656b9

08007d54 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	4a08      	ldr	r2, [pc, #32]	; (8007d84 <hci_init+0x30>)
 8007d64:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8007d66:	4a08      	ldr	r2, [pc, #32]	; (8007d88 <hci_init+0x34>)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8007d6c:	4806      	ldr	r0, [pc, #24]	; (8007d88 <hci_init+0x34>)
 8007d6e:	f000 f973 	bl	8008058 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4618      	mov	r0, r3
 8007d78:	f000 f8d4 	bl	8007f24 <TlInit>

  return;
 8007d7c:	bf00      	nop
}
 8007d7e:	3708      	adds	r7, #8
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	2000024c 	.word	0x2000024c
 8007d88:	20000224 	.word	0x20000224

08007d8c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8007d92:	4822      	ldr	r0, [pc, #136]	; (8007e1c <hci_user_evt_proc+0x90>)
 8007d94:	f000 fdde 	bl	8008954 <LST_is_empty>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d12b      	bne.n	8007df6 <hci_user_evt_proc+0x6a>
 8007d9e:	4b20      	ldr	r3, [pc, #128]	; (8007e20 <hci_user_evt_proc+0x94>)
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d027      	beq.n	8007df6 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8007da6:	f107 030c 	add.w	r3, r7, #12
 8007daa:	4619      	mov	r1, r3
 8007dac:	481b      	ldr	r0, [pc, #108]	; (8007e1c <hci_user_evt_proc+0x90>)
 8007dae:	f000 fe60 	bl	8008a72 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8007db2:	4b1c      	ldr	r3, [pc, #112]	; (8007e24 <hci_user_evt_proc+0x98>)
 8007db4:	69db      	ldr	r3, [r3, #28]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00c      	beq.n	8007dd4 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8007dc2:	4b18      	ldr	r3, [pc, #96]	; (8007e24 <hci_user_evt_proc+0x98>)
 8007dc4:	69db      	ldr	r3, [r3, #28]
 8007dc6:	1d3a      	adds	r2, r7, #4
 8007dc8:	4610      	mov	r0, r2
 8007dca:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8007dcc:	793a      	ldrb	r2, [r7, #4]
 8007dce:	4b14      	ldr	r3, [pc, #80]	; (8007e20 <hci_user_evt_proc+0x94>)
 8007dd0:	701a      	strb	r2, [r3, #0]
 8007dd2:	e002      	b.n	8007dda <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007dd4:	4b12      	ldr	r3, [pc, #72]	; (8007e20 <hci_user_evt_proc+0x94>)
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8007dda:	4b11      	ldr	r3, [pc, #68]	; (8007e20 <hci_user_evt_proc+0x94>)
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d004      	beq.n	8007dec <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	4618      	mov	r0, r3
 8007de6:	f000 fc03 	bl	80085f0 <TL_MM_EvtDone>
 8007dea:	e004      	b.n	8007df6 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	4619      	mov	r1, r3
 8007df0:	480a      	ldr	r0, [pc, #40]	; (8007e1c <hci_user_evt_proc+0x90>)
 8007df2:	f000 fdd1 	bl	8008998 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8007df6:	4809      	ldr	r0, [pc, #36]	; (8007e1c <hci_user_evt_proc+0x90>)
 8007df8:	f000 fdac 	bl	8008954 <LST_is_empty>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d107      	bne.n	8007e12 <hci_user_evt_proc+0x86>
 8007e02:	4b07      	ldr	r3, [pc, #28]	; (8007e20 <hci_user_evt_proc+0x94>)
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d003      	beq.n	8007e12 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8007e0a:	4804      	ldr	r0, [pc, #16]	; (8007e1c <hci_user_evt_proc+0x90>)
 8007e0c:	f001 fd12 	bl	8009834 <hci_notify_asynch_evt>
  }


  return;
 8007e10:	bf00      	nop
 8007e12:	bf00      	nop
}
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	2000014c 	.word	0x2000014c
 8007e20:	20000158 	.word	0x20000158
 8007e24:	20000224 	.word	0x20000224

08007e28 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b088      	sub	sp, #32
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	460b      	mov	r3, r1
 8007e32:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8007e34:	2000      	movs	r0, #0
 8007e36:	f000 f8cb 	bl	8007fd0 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	885b      	ldrh	r3, [r3, #2]
 8007e42:	b21b      	sxth	r3, r3
 8007e44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e48:	b21a      	sxth	r2, r3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	881b      	ldrh	r3, [r3, #0]
 8007e4e:	029b      	lsls	r3, r3, #10
 8007e50:	b21b      	sxth	r3, r3
 8007e52:	4313      	orrs	r3, r2
 8007e54:	b21b      	sxth	r3, r3
 8007e56:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	b2d9      	uxtb	r1, r3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	689a      	ldr	r2, [r3, #8]
 8007e62:	8bbb      	ldrh	r3, [r7, #28]
 8007e64:	4618      	mov	r0, r3
 8007e66:	f000 f88d 	bl	8007f84 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8007e6a:	e04e      	b.n	8007f0a <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8007e6c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007e70:	f001 fcf7 	bl	8009862 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007e74:	e043      	b.n	8007efe <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8007e76:	f107 030c 	add.w	r3, r7, #12
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	4828      	ldr	r0, [pc, #160]	; (8007f20 <hci_send_req+0xf8>)
 8007e7e:	f000 fdf8 	bl	8008a72 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	7a5b      	ldrb	r3, [r3, #9]
 8007e86:	2b0f      	cmp	r3, #15
 8007e88:	d114      	bne.n	8007eb4 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	330b      	adds	r3, #11
 8007e8e:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	885b      	ldrh	r3, [r3, #2]
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	8bba      	ldrh	r2, [r7, #28]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d104      	bne.n	8007ea6 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	693a      	ldr	r2, [r7, #16]
 8007ea2:	7812      	ldrb	r2, [r2, #0]
 8007ea4:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	785b      	ldrb	r3, [r3, #1]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d027      	beq.n	8007efe <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	77fb      	strb	r3, [r7, #31]
 8007eb2:	e024      	b.n	8007efe <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	330b      	adds	r3, #11
 8007eb8:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	8bba      	ldrh	r2, [r7, #28]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d114      	bne.n	8007ef2 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	7a9b      	ldrb	r3, [r3, #10]
 8007ecc:	3b03      	subs	r3, #3
 8007ece:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	695a      	ldr	r2, [r3, #20]
 8007ed4:	7dfb      	ldrb	r3, [r7, #23]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	bfa8      	it	ge
 8007eda:	461a      	movge	r2, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6918      	ldr	r0, [r3, #16]
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	1cd9      	adds	r1, r3, #3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	695b      	ldr	r3, [r3, #20]
 8007eec:	461a      	mov	r2, r3
 8007eee:	f002 fa9d 	bl	800a42c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d001      	beq.n	8007efe <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8007efa:	2301      	movs	r3, #1
 8007efc:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007efe:	4808      	ldr	r0, [pc, #32]	; (8007f20 <hci_send_req+0xf8>)
 8007f00:	f000 fd28 	bl	8008954 <LST_is_empty>
 8007f04:	4603      	mov	r3, r0
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d0b5      	beq.n	8007e76 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8007f0a:	7ffb      	ldrb	r3, [r7, #31]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d0ad      	beq.n	8007e6c <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8007f10:	2001      	movs	r0, #1
 8007f12:	f000 f85d 	bl	8007fd0 <NotifyCmdStatus>

  return 0;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3720      	adds	r7, #32
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	20000244 	.word	0x20000244

08007f24 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b086      	sub	sp, #24
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8007f2c:	480f      	ldr	r0, [pc, #60]	; (8007f6c <TlInit+0x48>)
 8007f2e:	f000 fd01 	bl	8008934 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8007f32:	4a0f      	ldr	r2, [pc, #60]	; (8007f70 <TlInit+0x4c>)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8007f38:	480e      	ldr	r0, [pc, #56]	; (8007f74 <TlInit+0x50>)
 8007f3a:	f000 fcfb 	bl	8008934 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007f3e:	4b0e      	ldr	r3, [pc, #56]	; (8007f78 <TlInit+0x54>)
 8007f40:	2201      	movs	r2, #1
 8007f42:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8007f44:	4b0d      	ldr	r3, [pc, #52]	; (8007f7c <TlInit+0x58>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00a      	beq.n	8007f62 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8007f50:	4b0b      	ldr	r3, [pc, #44]	; (8007f80 <TlInit+0x5c>)
 8007f52:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8007f54:	4b09      	ldr	r3, [pc, #36]	; (8007f7c <TlInit+0x58>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f107 0208 	add.w	r2, r7, #8
 8007f5c:	4610      	mov	r0, r2
 8007f5e:	4798      	blx	r3
  }

  return;
 8007f60:	bf00      	nop
 8007f62:	bf00      	nop
}
 8007f64:	3718      	adds	r7, #24
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	20000244 	.word	0x20000244
 8007f70:	20000154 	.word	0x20000154
 8007f74:	2000014c 	.word	0x2000014c
 8007f78:	20000158 	.word	0x20000158
 8007f7c:	20000224 	.word	0x20000224
 8007f80:	08008011 	.word	0x08008011

08007f84 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	603a      	str	r2, [r7, #0]
 8007f8e:	80fb      	strh	r3, [r7, #6]
 8007f90:	460b      	mov	r3, r1
 8007f92:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8007f94:	4b0c      	ldr	r3, [pc, #48]	; (8007fc8 <SendCmd+0x44>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	88fa      	ldrh	r2, [r7, #6]
 8007f9a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8007f9e:	4b0a      	ldr	r3, [pc, #40]	; (8007fc8 <SendCmd+0x44>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	797a      	ldrb	r2, [r7, #5]
 8007fa4:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8007fa6:	4b08      	ldr	r3, [pc, #32]	; (8007fc8 <SendCmd+0x44>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	330c      	adds	r3, #12
 8007fac:	797a      	ldrb	r2, [r7, #5]
 8007fae:	6839      	ldr	r1, [r7, #0]
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f002 fa3b 	bl	800a42c <memcpy>

  hciContext.io.Send(0,0);
 8007fb6:	4b05      	ldr	r3, [pc, #20]	; (8007fcc <SendCmd+0x48>)
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	2100      	movs	r1, #0
 8007fbc:	2000      	movs	r0, #0
 8007fbe:	4798      	blx	r3

  return;
 8007fc0:	bf00      	nop
}
 8007fc2:	3708      	adds	r7, #8
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	20000154 	.word	0x20000154
 8007fcc:	20000224 	.word	0x20000224

08007fd0 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8007fda:	79fb      	ldrb	r3, [r7, #7]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d108      	bne.n	8007ff2 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8007fe0:	4b0a      	ldr	r3, [pc, #40]	; (800800c <NotifyCmdStatus+0x3c>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00d      	beq.n	8008004 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8007fe8:	4b08      	ldr	r3, [pc, #32]	; (800800c <NotifyCmdStatus+0x3c>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2000      	movs	r0, #0
 8007fee:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8007ff0:	e008      	b.n	8008004 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8007ff2:	4b06      	ldr	r3, [pc, #24]	; (800800c <NotifyCmdStatus+0x3c>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d004      	beq.n	8008004 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8007ffa:	4b04      	ldr	r3, [pc, #16]	; (800800c <NotifyCmdStatus+0x3c>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2001      	movs	r0, #1
 8008000:	4798      	blx	r3
  return;
 8008002:	bf00      	nop
 8008004:	bf00      	nop
}
 8008006:	3708      	adds	r7, #8
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	2000024c 	.word	0x2000024c

08008010 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	7a5b      	ldrb	r3, [r3, #9]
 800801c:	2b0f      	cmp	r3, #15
 800801e:	d003      	beq.n	8008028 <TlEvtReceived+0x18>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	7a5b      	ldrb	r3, [r3, #9]
 8008024:	2b0e      	cmp	r3, #14
 8008026:	d107      	bne.n	8008038 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8008028:	6879      	ldr	r1, [r7, #4]
 800802a:	4809      	ldr	r0, [pc, #36]	; (8008050 <TlEvtReceived+0x40>)
 800802c:	f000 fcda 	bl	80089e4 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8008030:	2000      	movs	r0, #0
 8008032:	f001 fc0b 	bl	800984c <hci_cmd_resp_release>
 8008036:	e006      	b.n	8008046 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8008038:	6879      	ldr	r1, [r7, #4]
 800803a:	4806      	ldr	r0, [pc, #24]	; (8008054 <TlEvtReceived+0x44>)
 800803c:	f000 fcd2 	bl	80089e4 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008040:	4804      	ldr	r0, [pc, #16]	; (8008054 <TlEvtReceived+0x44>)
 8008042:	f001 fbf7 	bl	8009834 <hci_notify_asynch_evt>
  }

  return;
 8008046:	bf00      	nop
}
 8008048:	3708      	adds	r7, #8
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	20000244 	.word	0x20000244
 8008054:	2000014c 	.word	0x2000014c

08008058 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a05      	ldr	r2, [pc, #20]	; (8008078 <hci_register_io_bus+0x20>)
 8008064:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a04      	ldr	r2, [pc, #16]	; (800807c <hci_register_io_bus+0x24>)
 800806a:	611a      	str	r2, [r3, #16]

  return;
 800806c:	bf00      	nop
}
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr
 8008078:	08008369 	.word	0x08008369
 800807c:	080083d1 	.word	0x080083d1

08008080 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	4a08      	ldr	r2, [pc, #32]	; (80080b0 <shci_init+0x30>)
 8008090:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8008092:	4a08      	ldr	r2, [pc, #32]	; (80080b4 <shci_init+0x34>)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8008098:	4806      	ldr	r0, [pc, #24]	; (80080b4 <shci_init+0x34>)
 800809a:	f000 f911 	bl	80082c0 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4618      	mov	r0, r3
 80080a4:	f000 f894 	bl	80081d0 <TlInit>

  return;
 80080a8:	bf00      	nop
}
 80080aa:	3708      	adds	r7, #8
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	20000270 	.word	0x20000270
 80080b4:	20000250 	.word	0x20000250

080080b8 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80080be:	4822      	ldr	r0, [pc, #136]	; (8008148 <shci_user_evt_proc+0x90>)
 80080c0:	f000 fc48 	bl	8008954 <LST_is_empty>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d12b      	bne.n	8008122 <shci_user_evt_proc+0x6a>
 80080ca:	4b20      	ldr	r3, [pc, #128]	; (800814c <shci_user_evt_proc+0x94>)
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d027      	beq.n	8008122 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80080d2:	f107 030c 	add.w	r3, r7, #12
 80080d6:	4619      	mov	r1, r3
 80080d8:	481b      	ldr	r0, [pc, #108]	; (8008148 <shci_user_evt_proc+0x90>)
 80080da:	f000 fcca 	bl	8008a72 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80080de:	4b1c      	ldr	r3, [pc, #112]	; (8008150 <shci_user_evt_proc+0x98>)
 80080e0:	69db      	ldr	r3, [r3, #28]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00c      	beq.n	8008100 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80080ea:	2301      	movs	r3, #1
 80080ec:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80080ee:	4b18      	ldr	r3, [pc, #96]	; (8008150 <shci_user_evt_proc+0x98>)
 80080f0:	69db      	ldr	r3, [r3, #28]
 80080f2:	1d3a      	adds	r2, r7, #4
 80080f4:	4610      	mov	r0, r2
 80080f6:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80080f8:	793a      	ldrb	r2, [r7, #4]
 80080fa:	4b14      	ldr	r3, [pc, #80]	; (800814c <shci_user_evt_proc+0x94>)
 80080fc:	701a      	strb	r2, [r3, #0]
 80080fe:	e002      	b.n	8008106 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8008100:	4b12      	ldr	r3, [pc, #72]	; (800814c <shci_user_evt_proc+0x94>)
 8008102:	2201      	movs	r2, #1
 8008104:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8008106:	4b11      	ldr	r3, [pc, #68]	; (800814c <shci_user_evt_proc+0x94>)
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d004      	beq.n	8008118 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	4618      	mov	r0, r3
 8008112:	f000 fa6d 	bl	80085f0 <TL_MM_EvtDone>
 8008116:	e004      	b.n	8008122 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	4619      	mov	r1, r3
 800811c:	480a      	ldr	r0, [pc, #40]	; (8008148 <shci_user_evt_proc+0x90>)
 800811e:	f000 fc3b 	bl	8008998 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8008122:	4809      	ldr	r0, [pc, #36]	; (8008148 <shci_user_evt_proc+0x90>)
 8008124:	f000 fc16 	bl	8008954 <LST_is_empty>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d107      	bne.n	800813e <shci_user_evt_proc+0x86>
 800812e:	4b07      	ldr	r3, [pc, #28]	; (800814c <shci_user_evt_proc+0x94>)
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d003      	beq.n	800813e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8008136:	4804      	ldr	r0, [pc, #16]	; (8008148 <shci_user_evt_proc+0x90>)
 8008138:	f7f8 fe92 	bl	8000e60 <shci_notify_asynch_evt>
  }


  return;
 800813c:	bf00      	nop
 800813e:	bf00      	nop
}
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	20000160 	.word	0x20000160
 800814c:	20000170 	.word	0x20000170
 8008150:	20000250 	.word	0x20000250

08008154 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	60ba      	str	r2, [r7, #8]
 800815c:	607b      	str	r3, [r7, #4]
 800815e:	4603      	mov	r3, r0
 8008160:	81fb      	strh	r3, [r7, #14]
 8008162:	460b      	mov	r3, r1
 8008164:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8008166:	2000      	movs	r0, #0
 8008168:	f000 f864 	bl	8008234 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800816c:	4b16      	ldr	r3, [pc, #88]	; (80081c8 <shci_send+0x74>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	89fa      	ldrh	r2, [r7, #14]
 8008172:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8008176:	4b14      	ldr	r3, [pc, #80]	; (80081c8 <shci_send+0x74>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	7b7a      	ldrb	r2, [r7, #13]
 800817c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800817e:	4b12      	ldr	r3, [pc, #72]	; (80081c8 <shci_send+0x74>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	330c      	adds	r3, #12
 8008184:	7b7a      	ldrb	r2, [r7, #13]
 8008186:	68b9      	ldr	r1, [r7, #8]
 8008188:	4618      	mov	r0, r3
 800818a:	f002 f94f 	bl	800a42c <memcpy>

  shciContext.io.Send(0,0);
 800818e:	4b0f      	ldr	r3, [pc, #60]	; (80081cc <shci_send+0x78>)
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	2100      	movs	r1, #0
 8008194:	2000      	movs	r0, #0
 8008196:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8008198:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800819c:	f7f8 fe77 	bl	8000e8e <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f103 0008 	add.w	r0, r3, #8
 80081a6:	4b08      	ldr	r3, [pc, #32]	; (80081c8 <shci_send+0x74>)
 80081a8:	6819      	ldr	r1, [r3, #0]
 80081aa:	4b07      	ldr	r3, [pc, #28]	; (80081c8 <shci_send+0x74>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	789b      	ldrb	r3, [r3, #2]
 80081b0:	3303      	adds	r3, #3
 80081b2:	461a      	mov	r2, r3
 80081b4:	f002 f93a 	bl	800a42c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80081b8:	2001      	movs	r0, #1
 80081ba:	f000 f83b 	bl	8008234 <Cmd_SetStatus>

  return;
 80081be:	bf00      	nop
}
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	2000016c 	.word	0x2000016c
 80081cc:	20000250 	.word	0x20000250

080081d0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80081d8:	4a10      	ldr	r2, [pc, #64]	; (800821c <TlInit+0x4c>)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80081de:	4810      	ldr	r0, [pc, #64]	; (8008220 <TlInit+0x50>)
 80081e0:	f000 fba8 	bl	8008934 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80081e4:	2001      	movs	r0, #1
 80081e6:	f000 f825 	bl	8008234 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80081ea:	4b0e      	ldr	r3, [pc, #56]	; (8008224 <TlInit+0x54>)
 80081ec:	2201      	movs	r2, #1
 80081ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80081f0:	4b0d      	ldr	r3, [pc, #52]	; (8008228 <TlInit+0x58>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d00c      	beq.n	8008212 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80081fc:	4b0b      	ldr	r3, [pc, #44]	; (800822c <TlInit+0x5c>)
 80081fe:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8008200:	4b0b      	ldr	r3, [pc, #44]	; (8008230 <TlInit+0x60>)
 8008202:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8008204:	4b08      	ldr	r3, [pc, #32]	; (8008228 <TlInit+0x58>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f107 020c 	add.w	r2, r7, #12
 800820c:	4610      	mov	r0, r2
 800820e:	4798      	blx	r3
  }

  return;
 8008210:	bf00      	nop
 8008212:	bf00      	nop
}
 8008214:	3718      	adds	r7, #24
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	2000016c 	.word	0x2000016c
 8008220:	20000160 	.word	0x20000160
 8008224:	20000170 	.word	0x20000170
 8008228:	20000250 	.word	0x20000250
 800822c:	08008285 	.word	0x08008285
 8008230:	0800829d 	.word	0x0800829d

08008234 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
 800823a:	4603      	mov	r3, r0
 800823c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800823e:	79fb      	ldrb	r3, [r7, #7]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d10b      	bne.n	800825c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8008244:	4b0d      	ldr	r3, [pc, #52]	; (800827c <Cmd_SetStatus+0x48>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d003      	beq.n	8008254 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800824c:	4b0b      	ldr	r3, [pc, #44]	; (800827c <Cmd_SetStatus+0x48>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2000      	movs	r0, #0
 8008252:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8008254:	4b0a      	ldr	r3, [pc, #40]	; (8008280 <Cmd_SetStatus+0x4c>)
 8008256:	2200      	movs	r2, #0
 8008258:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800825a:	e00b      	b.n	8008274 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800825c:	4b08      	ldr	r3, [pc, #32]	; (8008280 <Cmd_SetStatus+0x4c>)
 800825e:	2201      	movs	r2, #1
 8008260:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8008262:	4b06      	ldr	r3, [pc, #24]	; (800827c <Cmd_SetStatus+0x48>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d004      	beq.n	8008274 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800826a:	4b04      	ldr	r3, [pc, #16]	; (800827c <Cmd_SetStatus+0x48>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2001      	movs	r0, #1
 8008270:	4798      	blx	r3
  return;
 8008272:	bf00      	nop
 8008274:	bf00      	nop
}
 8008276:	3708      	adds	r7, #8
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}
 800827c:	20000270 	.word	0x20000270
 8008280:	20000168 	.word	0x20000168

08008284 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800828c:	2000      	movs	r0, #0
 800828e:	f7f8 fdf3 	bl	8000e78 <shci_cmd_resp_release>

  return;
 8008292:	bf00      	nop
}
 8008294:	3708      	adds	r7, #8
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
	...

0800829c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80082a4:	6879      	ldr	r1, [r7, #4]
 80082a6:	4805      	ldr	r0, [pc, #20]	; (80082bc <TlUserEvtReceived+0x20>)
 80082a8:	f000 fb9c 	bl	80089e4 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80082ac:	4803      	ldr	r0, [pc, #12]	; (80082bc <TlUserEvtReceived+0x20>)
 80082ae:	f7f8 fdd7 	bl	8000e60 <shci_notify_asynch_evt>

  return;
 80082b2:	bf00      	nop
}
 80082b4:	3708      	adds	r7, #8
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	20000160 	.word	0x20000160

080082c0 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4a05      	ldr	r2, [pc, #20]	; (80082e0 <shci_register_io_bus+0x20>)
 80082cc:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4a04      	ldr	r2, [pc, #16]	; (80082e4 <shci_register_io_bus+0x24>)
 80082d2:	611a      	str	r2, [r3, #16]

  return;
 80082d4:	bf00      	nop
}
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr
 80082e0:	0800847d 	.word	0x0800847d
 80082e4:	080084d1 	.word	0x080084d1

080082e8 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80082ec:	f001 fd32 	bl	8009d54 <HW_IPCC_Enable>

  return;
 80082f0:	bf00      	nop
}
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <TL_Init>:


void TL_Init( void )
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80082f8:	4b10      	ldr	r3, [pc, #64]	; (800833c <TL_Init+0x48>)
 80082fa:	4a11      	ldr	r2, [pc, #68]	; (8008340 <TL_Init+0x4c>)
 80082fc:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80082fe:	4b0f      	ldr	r3, [pc, #60]	; (800833c <TL_Init+0x48>)
 8008300:	4a10      	ldr	r2, [pc, #64]	; (8008344 <TL_Init+0x50>)
 8008302:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8008304:	4b0d      	ldr	r3, [pc, #52]	; (800833c <TL_Init+0x48>)
 8008306:	4a10      	ldr	r2, [pc, #64]	; (8008348 <TL_Init+0x54>)
 8008308:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800830a:	4b0c      	ldr	r3, [pc, #48]	; (800833c <TL_Init+0x48>)
 800830c:	4a0f      	ldr	r2, [pc, #60]	; (800834c <TL_Init+0x58>)
 800830e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8008310:	4b0a      	ldr	r3, [pc, #40]	; (800833c <TL_Init+0x48>)
 8008312:	4a0f      	ldr	r2, [pc, #60]	; (8008350 <TL_Init+0x5c>)
 8008314:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8008316:	4b09      	ldr	r3, [pc, #36]	; (800833c <TL_Init+0x48>)
 8008318:	4a0e      	ldr	r2, [pc, #56]	; (8008354 <TL_Init+0x60>)
 800831a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800831c:	4b07      	ldr	r3, [pc, #28]	; (800833c <TL_Init+0x48>)
 800831e:	4a0e      	ldr	r2, [pc, #56]	; (8008358 <TL_Init+0x64>)
 8008320:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8008322:	4b06      	ldr	r3, [pc, #24]	; (800833c <TL_Init+0x48>)
 8008324:	4a0d      	ldr	r2, [pc, #52]	; (800835c <TL_Init+0x68>)
 8008326:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8008328:	4b04      	ldr	r3, [pc, #16]	; (800833c <TL_Init+0x48>)
 800832a:	4a0d      	ldr	r2, [pc, #52]	; (8008360 <TL_Init+0x6c>)
 800832c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800832e:	4b03      	ldr	r3, [pc, #12]	; (800833c <TL_Init+0x48>)
 8008330:	4a0c      	ldr	r2, [pc, #48]	; (8008364 <TL_Init+0x70>)
 8008332:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8008334:	f001 fd22 	bl	8009d7c <HW_IPCC_Init>

  return;
 8008338:	bf00      	nop
}
 800833a:	bd80      	pop	{r7, pc}
 800833c:	20030000 	.word	0x20030000
 8008340:	20030028 	.word	0x20030028
 8008344:	20030048 	.word	0x20030048
 8008348:	20030058 	.word	0x20030058
 800834c:	20030064 	.word	0x20030064
 8008350:	2003006c 	.word	0x2003006c
 8008354:	20030074 	.word	0x20030074
 8008358:	2003007c 	.word	0x2003007c
 800835c:	20030098 	.word	0x20030098
 8008360:	2003009c 	.word	0x2003009c
 8008364:	200300a8 	.word	0x200300a8

08008368 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8008374:	4811      	ldr	r0, [pc, #68]	; (80083bc <TL_BLE_Init+0x54>)
 8008376:	f000 fadd 	bl	8008934 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800837a:	4b11      	ldr	r3, [pc, #68]	; (80083c0 <TL_BLE_Init+0x58>)
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	689a      	ldr	r2, [r3, #8]
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	68da      	ldr	r2, [r3, #12]
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	4a0c      	ldr	r2, [pc, #48]	; (80083c4 <TL_BLE_Init+0x5c>)
 8008394:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	4a08      	ldr	r2, [pc, #32]	; (80083bc <TL_BLE_Init+0x54>)
 800839a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800839c:	f001 fd04 	bl	8009da8 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a08      	ldr	r2, [pc, #32]	; (80083c8 <TL_BLE_Init+0x60>)
 80083a6:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	4a07      	ldr	r2, [pc, #28]	; (80083cc <TL_BLE_Init+0x64>)
 80083ae:	6013      	str	r3, [r2, #0]

  return 0;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	200300c4 	.word	0x200300c4
 80083c0:	20030000 	.word	0x20030000
 80083c4:	20030a48 	.word	0x20030a48
 80083c8:	2000027c 	.word	0x2000027c
 80083cc:	20000280 	.word	0x20000280

080083d0 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	460b      	mov	r3, r1
 80083da:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80083dc:	4b09      	ldr	r3, [pc, #36]	; (8008404 <TL_BLE_SendCmd+0x34>)
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2201      	movs	r2, #1
 80083e4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80083e6:	4b07      	ldr	r3, [pc, #28]	; (8008404 <TL_BLE_SendCmd+0x34>)
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4619      	mov	r1, r3
 80083ee:	2001      	movs	r0, #1
 80083f0:	f000 f96c 	bl	80086cc <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80083f4:	f001 fce2 	bl	8009dbc <HW_IPCC_BLE_SendCmd>

  return 0;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3708      	adds	r7, #8
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	20030000 	.word	0x20030000

08008408 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800840e:	e01c      	b.n	800844a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8008410:	1d3b      	adds	r3, r7, #4
 8008412:	4619      	mov	r1, r3
 8008414:	4812      	ldr	r0, [pc, #72]	; (8008460 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008416:	f000 fb2c 	bl	8008a72 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	7a5b      	ldrb	r3, [r3, #9]
 800841e:	2b0f      	cmp	r3, #15
 8008420:	d003      	beq.n	800842a <HW_IPCC_BLE_RxEvtNot+0x22>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	7a5b      	ldrb	r3, [r3, #9]
 8008426:	2b0e      	cmp	r3, #14
 8008428:	d105      	bne.n	8008436 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4619      	mov	r1, r3
 800842e:	2002      	movs	r0, #2
 8008430:	f000 f94c 	bl	80086cc <OutputDbgTrace>
 8008434:	e004      	b.n	8008440 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4619      	mov	r1, r3
 800843a:	2003      	movs	r0, #3
 800843c:	f000 f946 	bl	80086cc <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8008440:	4b08      	ldr	r3, [pc, #32]	; (8008464 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	4610      	mov	r0, r2
 8008448:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800844a:	4805      	ldr	r0, [pc, #20]	; (8008460 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800844c:	f000 fa82 	bl	8008954 <LST_is_empty>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d0dc      	beq.n	8008410 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8008456:	bf00      	nop
}
 8008458:	3708      	adds	r7, #8
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	200300c4 	.word	0x200300c4
 8008464:	2000027c 	.word	0x2000027c

08008468 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800846c:	4b02      	ldr	r3, [pc, #8]	; (8008478 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4798      	blx	r3

  return;
 8008472:	bf00      	nop
}
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	20000280 	.word	0x20000280

0800847c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8008488:	480d      	ldr	r0, [pc, #52]	; (80084c0 <TL_SYS_Init+0x44>)
 800848a:	f000 fa53 	bl	8008934 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800848e:	4b0d      	ldr	r3, [pc, #52]	; (80084c4 <TL_SYS_Init+0x48>)
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	689a      	ldr	r2, [r3, #8]
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	4a08      	ldr	r2, [pc, #32]	; (80084c0 <TL_SYS_Init+0x44>)
 80084a0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80084a2:	f001 fcad 	bl	8009e00 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a07      	ldr	r2, [pc, #28]	; (80084c8 <TL_SYS_Init+0x4c>)
 80084ac:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	4a06      	ldr	r2, [pc, #24]	; (80084cc <TL_SYS_Init+0x50>)
 80084b4:	6013      	str	r3, [r2, #0]

  return 0;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3710      	adds	r7, #16
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	200300cc 	.word	0x200300cc
 80084c4:	20030000 	.word	0x20030000
 80084c8:	20000284 	.word	0x20000284
 80084cc:	20000288 	.word	0x20000288

080084d0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	460b      	mov	r3, r1
 80084da:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80084dc:	4b09      	ldr	r3, [pc, #36]	; (8008504 <TL_SYS_SendCmd+0x34>)
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2210      	movs	r2, #16
 80084e4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80084e6:	4b07      	ldr	r3, [pc, #28]	; (8008504 <TL_SYS_SendCmd+0x34>)
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4619      	mov	r1, r3
 80084ee:	2004      	movs	r0, #4
 80084f0:	f000 f8ec 	bl	80086cc <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80084f4:	f001 fc8e 	bl	8009e14 <HW_IPCC_SYS_SendCmd>

  return 0;
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3708      	adds	r7, #8
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	20030000 	.word	0x20030000

08008508 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800850c:	4b07      	ldr	r3, [pc, #28]	; (800852c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4619      	mov	r1, r3
 8008514:	2005      	movs	r0, #5
 8008516:	f000 f8d9 	bl	80086cc <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800851a:	4b05      	ldr	r3, [pc, #20]	; (8008530 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a03      	ldr	r2, [pc, #12]	; (800852c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008520:	68d2      	ldr	r2, [r2, #12]
 8008522:	6812      	ldr	r2, [r2, #0]
 8008524:	4610      	mov	r0, r2
 8008526:	4798      	blx	r3

  return;
 8008528:	bf00      	nop
}
 800852a:	bd80      	pop	{r7, pc}
 800852c:	20030000 	.word	0x20030000
 8008530:	20000284 	.word	0x20000284

08008534 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800853a:	e00e      	b.n	800855a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800853c:	1d3b      	adds	r3, r7, #4
 800853e:	4619      	mov	r1, r3
 8008540:	480b      	ldr	r0, [pc, #44]	; (8008570 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008542:	f000 fa96 	bl	8008a72 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4619      	mov	r1, r3
 800854a:	2006      	movs	r0, #6
 800854c:	f000 f8be 	bl	80086cc <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8008550:	4b08      	ldr	r3, [pc, #32]	; (8008574 <HW_IPCC_SYS_EvtNot+0x40>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	4610      	mov	r0, r2
 8008558:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800855a:	4805      	ldr	r0, [pc, #20]	; (8008570 <HW_IPCC_SYS_EvtNot+0x3c>)
 800855c:	f000 f9fa 	bl	8008954 <LST_is_empty>
 8008560:	4603      	mov	r3, r0
 8008562:	2b00      	cmp	r3, #0
 8008564:	d0ea      	beq.n	800853c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8008566:	bf00      	nop
}
 8008568:	3708      	adds	r7, #8
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	200300cc 	.word	0x200300cc
 8008574:	20000288 	.word	0x20000288

08008578 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8008580:	4817      	ldr	r0, [pc, #92]	; (80085e0 <TL_MM_Init+0x68>)
 8008582:	f000 f9d7 	bl	8008934 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8008586:	4817      	ldr	r0, [pc, #92]	; (80085e4 <TL_MM_Init+0x6c>)
 8008588:	f000 f9d4 	bl	8008934 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800858c:	4b16      	ldr	r3, [pc, #88]	; (80085e8 <TL_MM_Init+0x70>)
 800858e:	691b      	ldr	r3, [r3, #16]
 8008590:	4a16      	ldr	r2, [pc, #88]	; (80085ec <TL_MM_Init+0x74>)
 8008592:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8008594:	4b15      	ldr	r3, [pc, #84]	; (80085ec <TL_MM_Init+0x74>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	6892      	ldr	r2, [r2, #8]
 800859c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800859e:	4b13      	ldr	r3, [pc, #76]	; (80085ec <TL_MM_Init+0x74>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	68d2      	ldr	r2, [r2, #12]
 80085a6:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80085a8:	4b10      	ldr	r3, [pc, #64]	; (80085ec <TL_MM_Init+0x74>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a0c      	ldr	r2, [pc, #48]	; (80085e0 <TL_MM_Init+0x68>)
 80085ae:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80085b0:	4b0e      	ldr	r3, [pc, #56]	; (80085ec <TL_MM_Init+0x74>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	6812      	ldr	r2, [r2, #0]
 80085b8:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80085ba:	4b0c      	ldr	r3, [pc, #48]	; (80085ec <TL_MM_Init+0x74>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	6852      	ldr	r2, [r2, #4]
 80085c2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80085c4:	4b09      	ldr	r3, [pc, #36]	; (80085ec <TL_MM_Init+0x74>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	6912      	ldr	r2, [r2, #16]
 80085cc:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80085ce:	4b07      	ldr	r3, [pc, #28]	; (80085ec <TL_MM_Init+0x74>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	6952      	ldr	r2, [r2, #20]
 80085d6:	619a      	str	r2, [r3, #24]

  return;
 80085d8:	bf00      	nop
}
 80085da:	3708      	adds	r7, #8
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	200300b4 	.word	0x200300b4
 80085e4:	20000274 	.word	0x20000274
 80085e8:	20030000 	.word	0x20030000
 80085ec:	2000028c 	.word	0x2000028c

080085f0 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80085f8:	6879      	ldr	r1, [r7, #4]
 80085fa:	4807      	ldr	r0, [pc, #28]	; (8008618 <TL_MM_EvtDone+0x28>)
 80085fc:	f000 f9f2 	bl	80089e4 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8008600:	6879      	ldr	r1, [r7, #4]
 8008602:	2000      	movs	r0, #0
 8008604:	f000 f862 	bl	80086cc <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8008608:	4804      	ldr	r0, [pc, #16]	; (800861c <TL_MM_EvtDone+0x2c>)
 800860a:	f001 fc29 	bl	8009e60 <HW_IPCC_MM_SendFreeBuf>

  return;
 800860e:	bf00      	nop
}
 8008610:	3708      	adds	r7, #8
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	20000274 	.word	0x20000274
 800861c:	08008621 	.word	0x08008621

08008620 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008626:	e00c      	b.n	8008642 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8008628:	1d3b      	adds	r3, r7, #4
 800862a:	4619      	mov	r1, r3
 800862c:	480a      	ldr	r0, [pc, #40]	; (8008658 <SendFreeBuf+0x38>)
 800862e:	f000 fa20 	bl	8008a72 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8008632:	4b0a      	ldr	r3, [pc, #40]	; (800865c <SendFreeBuf+0x3c>)
 8008634:	691b      	ldr	r3, [r3, #16]
 8008636:	691b      	ldr	r3, [r3, #16]
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	4611      	mov	r1, r2
 800863c:	4618      	mov	r0, r3
 800863e:	f000 f9d1 	bl	80089e4 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008642:	4805      	ldr	r0, [pc, #20]	; (8008658 <SendFreeBuf+0x38>)
 8008644:	f000 f986 	bl	8008954 <LST_is_empty>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d0ec      	beq.n	8008628 <SendFreeBuf+0x8>
  }

  return;
 800864e:	bf00      	nop
}
 8008650:	3708      	adds	r7, #8
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	20000274 	.word	0x20000274
 800865c:	20030000 	.word	0x20030000

08008660 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8008660:	b580      	push	{r7, lr}
 8008662:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8008664:	4805      	ldr	r0, [pc, #20]	; (800867c <TL_TRACES_Init+0x1c>)
 8008666:	f000 f965 	bl	8008934 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800866a:	4b05      	ldr	r3, [pc, #20]	; (8008680 <TL_TRACES_Init+0x20>)
 800866c:	695b      	ldr	r3, [r3, #20]
 800866e:	4a03      	ldr	r2, [pc, #12]	; (800867c <TL_TRACES_Init+0x1c>)
 8008670:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8008672:	f001 fc2b 	bl	8009ecc <HW_IPCC_TRACES_Init>

  return;
 8008676:	bf00      	nop
}
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	200300bc 	.word	0x200300bc
 8008680:	20030000 	.word	0x20030000

08008684 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b082      	sub	sp, #8
 8008688:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800868a:	e008      	b.n	800869e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800868c:	1d3b      	adds	r3, r7, #4
 800868e:	4619      	mov	r1, r3
 8008690:	4808      	ldr	r0, [pc, #32]	; (80086b4 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008692:	f000 f9ee 	bl	8008a72 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	4618      	mov	r0, r3
 800869a:	f000 f80d 	bl	80086b8 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800869e:	4805      	ldr	r0, [pc, #20]	; (80086b4 <HW_IPCC_TRACES_EvtNot+0x30>)
 80086a0:	f000 f958 	bl	8008954 <LST_is_empty>
 80086a4:	4603      	mov	r3, r0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d0f0      	beq.n	800868c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80086aa:	bf00      	nop
}
 80086ac:	3708      	adds	r7, #8
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	200300bc 	.word	0x200300bc

080086b8 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80086c0:	bf00      	nop
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	4603      	mov	r3, r0
 80086d4:	6039      	str	r1, [r7, #0]
 80086d6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 80086d8:	79fb      	ldrb	r3, [r7, #7]
 80086da:	2b06      	cmp	r3, #6
 80086dc:	d845      	bhi.n	800876a <OutputDbgTrace+0x9e>
 80086de:	a201      	add	r2, pc, #4	; (adr r2, 80086e4 <OutputDbgTrace+0x18>)
 80086e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e4:	08008701 	.word	0x08008701
 80086e8:	08008725 	.word	0x08008725
 80086ec:	0800872b 	.word	0x0800872b
 80086f0:	0800873f 	.word	0x0800873f
 80086f4:	0800874b 	.word	0x0800874b
 80086f8:	08008751 	.word	0x08008751
 80086fc:	0800875f 	.word	0x0800875f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	7a5b      	ldrb	r3, [r3, #9]
 8008708:	2bff      	cmp	r3, #255	; 0xff
 800870a:	d005      	beq.n	8008718 <OutputDbgTrace+0x4c>
 800870c:	2bff      	cmp	r3, #255	; 0xff
 800870e:	dc05      	bgt.n	800871c <OutputDbgTrace+0x50>
 8008710:	2b0e      	cmp	r3, #14
 8008712:	d005      	beq.n	8008720 <OutputDbgTrace+0x54>
 8008714:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8008716:	e001      	b.n	800871c <OutputDbgTrace+0x50>
          break;
 8008718:	bf00      	nop
 800871a:	e027      	b.n	800876c <OutputDbgTrace+0xa0>
          break;
 800871c:	bf00      	nop
 800871e:	e025      	b.n	800876c <OutputDbgTrace+0xa0>
          break;
 8008720:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8008722:	e023      	b.n	800876c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008728:	e020      	b.n	800876c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	7a5b      	ldrb	r3, [r3, #9]
 8008732:	2b0e      	cmp	r3, #14
 8008734:	d001      	beq.n	800873a <OutputDbgTrace+0x6e>
 8008736:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008738:	e000      	b.n	800873c <OutputDbgTrace+0x70>
          break;
 800873a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800873c:	e016      	b.n	800876c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	7a5b      	ldrb	r3, [r3, #9]
 8008746:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008748:	e010      	b.n	800876c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800874e:	e00d      	b.n	800876c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	7a5b      	ldrb	r3, [r3, #9]
 8008758:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800875a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800875c:	e006      	b.n	800876c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	7a5b      	ldrb	r3, [r3, #9]
 8008766:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008768:	e000      	b.n	800876c <OutputDbgTrace+0xa0>

    default:
      break;
 800876a:	bf00      	nop
  }

  return;
 800876c:	bf00      	nop
}
 800876e:	3714      	adds	r7, #20
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b086      	sub	sp, #24
 800877c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800877e:	f3ef 8310 	mrs	r3, PRIMASK
 8008782:	60fb      	str	r3, [r7, #12]
  return(result);
 8008784:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 8008786:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008788:	b672      	cpsid	i
}
 800878a:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800878c:	1cbb      	adds	r3, r7, #2
 800878e:	4619      	mov	r1, r3
 8008790:	4812      	ldr	r0, [pc, #72]	; (80087dc <DbgTrace_TxCpltCallback+0x64>)
 8008792:	f000 fbe6 	bl	8008f62 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8008796:	1cbb      	adds	r3, r7, #2
 8008798:	4619      	mov	r1, r3
 800879a:	4810      	ldr	r0, [pc, #64]	; (80087dc <DbgTrace_TxCpltCallback+0x64>)
 800879c:	f000 fcd2 	bl	8009144 <CircularQueue_Sense>
 80087a0:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d00c      	beq.n	80087c2 <DbgTrace_TxCpltCallback+0x4a>
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	f383 8810 	msr	PRIMASK, r3
}
 80087b2:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 80087b4:	887b      	ldrh	r3, [r7, #2]
 80087b6:	4a0a      	ldr	r2, [pc, #40]	; (80087e0 <DbgTrace_TxCpltCallback+0x68>)
 80087b8:	4619      	mov	r1, r3
 80087ba:	6938      	ldr	r0, [r7, #16]
 80087bc:	f7f7 ffdd 	bl	800077a <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 80087c0:	e008      	b.n	80087d4 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 80087c2:	4b08      	ldr	r3, [pc, #32]	; (80087e4 <DbgTrace_TxCpltCallback+0x6c>)
 80087c4:	2201      	movs	r2, #1
 80087c6:	701a      	strb	r2, [r3, #0]
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f383 8810 	msr	PRIMASK, r3
}
 80087d2:	bf00      	nop
}
 80087d4:	bf00      	nop
 80087d6:	3718      	adds	r7, #24
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	20000290 	.word	0x20000290
 80087e0:	08008779 	.word	0x08008779
 80087e4:	2000000d 	.word	0x2000000d

080087e8 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 80087ee:	f7f7 ffbe 	bl	800076e <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 80087f2:	2302      	movs	r3, #2
 80087f4:	9300      	str	r3, [sp, #0]
 80087f6:	2300      	movs	r3, #0
 80087f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80087fc:	4903      	ldr	r1, [pc, #12]	; (800880c <DbgTraceInit+0x24>)
 80087fe:	4804      	ldr	r0, [pc, #16]	; (8008810 <DbgTraceInit+0x28>)
 8008800:	f000 f956 	bl	8008ab0 <CircularQueue_Init>
#endif 
#endif
  return;
 8008804:	bf00      	nop
}
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	200002b0 	.word	0x200002b0
 8008810:	20000290 	.word	0x20000290

08008814 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	68b9      	ldr	r1, [r7, #8]
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f000 f805 	bl	8008834 <DbgTraceWrite>
 800882a:	4603      	mov	r3, r0
}
 800882c:	4618      	mov	r0, r3
 800882e:	3710      	adds	r7, #16
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b08a      	sub	sp, #40	; 0x28
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 8008840:	2300      	movs	r3, #0
 8008842:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008844:	f3ef 8310 	mrs	r3, PRIMASK
 8008848:	61bb      	str	r3, [r7, #24]
  return(result);
 800884a:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800884c:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008854:	d102      	bne.n	800885c <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 8008856:	2300      	movs	r3, #0
 8008858:	627b      	str	r3, [r7, #36]	; 0x24
 800885a:	e037      	b.n	80088cc <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2b01      	cmp	r3, #1
 8008860:	d006      	beq.n	8008870 <DbgTraceWrite+0x3c>
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2b02      	cmp	r3, #2
 8008866:	d003      	beq.n	8008870 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8008868:	f04f 33ff 	mov.w	r3, #4294967295
 800886c:	627b      	str	r3, [r7, #36]	; 0x24
 800886e:	e02d      	b.n	80088cc <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d02a      	beq.n	80088cc <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800887a:	b672      	cpsid	i
}
 800887c:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	b29a      	uxth	r2, r3
 8008882:	2301      	movs	r3, #1
 8008884:	68b9      	ldr	r1, [r7, #8]
 8008886:	4814      	ldr	r0, [pc, #80]	; (80088d8 <DbgTraceWrite+0xa4>)
 8008888:	f000 f944 	bl	8008b14 <CircularQueue_Add>
 800888c:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d015      	beq.n	80088c0 <DbgTraceWrite+0x8c>
 8008894:	4b11      	ldr	r3, [pc, #68]	; (80088dc <DbgTraceWrite+0xa8>)
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	b2db      	uxtb	r3, r3
 800889a:	2b00      	cmp	r3, #0
 800889c:	d010      	beq.n	80088c0 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800889e:	4b0f      	ldr	r3, [pc, #60]	; (80088dc <DbgTraceWrite+0xa8>)
 80088a0:	2200      	movs	r2, #0
 80088a2:	701a      	strb	r2, [r3, #0]
 80088a4:	6a3b      	ldr	r3, [r7, #32]
 80088a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	f383 8810 	msr	PRIMASK, r3
}
 80088ae:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	4a0a      	ldr	r2, [pc, #40]	; (80088e0 <DbgTraceWrite+0xac>)
 80088b6:	4619      	mov	r1, r3
 80088b8:	69f8      	ldr	r0, [r7, #28]
 80088ba:	f7f7 ff5e 	bl	800077a <DbgOutputTraces>
 80088be:	e005      	b.n	80088cc <DbgTraceWrite+0x98>
 80088c0:	6a3b      	ldr	r3, [r7, #32]
 80088c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	f383 8810 	msr	PRIMASK, r3
}
 80088ca:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 80088cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3728      	adds	r7, #40	; 0x28
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	20000290 	.word	0x20000290
 80088dc:	2000000d 	.word	0x2000000d
 80088e0:	08008779 	.word	0x08008779

080088e4 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80088e4:	b480      	push	{r7}
 80088e6:	b085      	sub	sp, #20
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	4603      	mov	r3, r0
 80088ec:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80088ee:	4b0f      	ldr	r3, [pc, #60]	; (800892c <OTP_Read+0x48>)
 80088f0:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80088f2:	e002      	b.n	80088fa <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	3b08      	subs	r3, #8
 80088f8:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	3307      	adds	r3, #7
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	79fa      	ldrb	r2, [r7, #7]
 8008902:	429a      	cmp	r2, r3
 8008904:	d003      	beq.n	800890e <OTP_Read+0x2a>
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	4a09      	ldr	r2, [pc, #36]	; (8008930 <OTP_Read+0x4c>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d1f2      	bne.n	80088f4 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	3307      	adds	r3, #7
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	79fa      	ldrb	r2, [r7, #7]
 8008916:	429a      	cmp	r2, r3
 8008918:	d001      	beq.n	800891e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800891a:	2300      	movs	r3, #0
 800891c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800891e:	68fb      	ldr	r3, [r7, #12]
}
 8008920:	4618      	mov	r0, r3
 8008922:	3714      	adds	r7, #20
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr
 800892c:	1fff73f8 	.word	0x1fff73f8
 8008930:	1fff7000 	.word	0x1fff7000

08008934 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	605a      	str	r2, [r3, #4]
}
 8008948:	bf00      	nop
 800894a:	370c      	adds	r7, #12
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8008954:	b480      	push	{r7}
 8008956:	b087      	sub	sp, #28
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800895c:	f3ef 8310 	mrs	r3, PRIMASK
 8008960:	60fb      	str	r3, [r7, #12]
  return(result);
 8008962:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008964:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008966:	b672      	cpsid	i
}
 8008968:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	429a      	cmp	r2, r3
 8008972:	d102      	bne.n	800897a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8008974:	2301      	movs	r3, #1
 8008976:	75fb      	strb	r3, [r7, #23]
 8008978:	e001      	b.n	800897e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800897a:	2300      	movs	r3, #0
 800897c:	75fb      	strb	r3, [r7, #23]
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	f383 8810 	msr	PRIMASK, r3
}
 8008988:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800898a:	7dfb      	ldrb	r3, [r7, #23]
}
 800898c:	4618      	mov	r0, r3
 800898e:	371c      	adds	r7, #28
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8008998:	b480      	push	{r7}
 800899a:	b087      	sub	sp, #28
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089a2:	f3ef 8310 	mrs	r3, PRIMASK
 80089a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80089a8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80089aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80089ac:	b672      	cpsid	i
}
 80089ae:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	683a      	ldr	r2, [r7, #0]
 80089c2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	683a      	ldr	r2, [r7, #0]
 80089ca:	605a      	str	r2, [r3, #4]
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	f383 8810 	msr	PRIMASK, r3
}
 80089d6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80089d8:	bf00      	nop
 80089da:	371c      	adds	r7, #28
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b087      	sub	sp, #28
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089ee:	f3ef 8310 	mrs	r3, PRIMASK
 80089f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80089f4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80089f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80089f8:	b672      	cpsid	i
}
 80089fa:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	685a      	ldr	r2, [r3, #4]
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	683a      	ldr	r2, [r7, #0]
 8008a0e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	683a      	ldr	r2, [r7, #0]
 8008a16:	601a      	str	r2, [r3, #0]
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	f383 8810 	msr	PRIMASK, r3
}
 8008a22:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008a24:	bf00      	nop
 8008a26:	371c      	adds	r7, #28
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b087      	sub	sp, #28
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a38:	f3ef 8310 	mrs	r3, PRIMASK
 8008a3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008a40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008a42:	b672      	cpsid	i
}
 8008a44:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	6812      	ldr	r2, [r2, #0]
 8008a4e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	6852      	ldr	r2, [r2, #4]
 8008a58:	605a      	str	r2, [r3, #4]
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	f383 8810 	msr	PRIMASK, r3
}
 8008a64:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008a66:	bf00      	nop
 8008a68:	371c      	adds	r7, #28
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr

08008a72 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b086      	sub	sp, #24
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
 8008a7a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a7c:	f3ef 8310 	mrs	r3, PRIMASK
 8008a80:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a82:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008a84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008a86:	b672      	cpsid	i
}
 8008a88:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7ff ffca 	bl	8008a30 <LST_remove_node>
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	f383 8810 	msr	PRIMASK, r3
}
 8008aa6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008aa8:	bf00      	nop
 8008aaa:	3718      	adds	r7, #24
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	607a      	str	r2, [r7, #4]
 8008abc:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	68ba      	ldr	r2, [r7, #8]
 8008ac2:	601a      	str	r2, [r3, #0]
  q->first = 0;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2200      	movs	r2, #0
 8008ace:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	887a      	ldrh	r2, [r7, #2]
 8008ae6:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	7e3a      	ldrb	r2, [r7, #24]
 8008aec:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 8008aee:	7e3b      	ldrb	r3, [r7, #24]
 8008af0:	f003 0302 	and.w	r3, r3, #2
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d006      	beq.n	8008b06 <CircularQueue_Init+0x56>
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	891b      	ldrh	r3, [r3, #8]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d002      	beq.n	8008b06 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 8008b00:	f04f 33ff 	mov.w	r3, #4294967295
 8008b04:	e000      	b.n	8008b08 <CircularQueue_Init+0x58>
  }
  return 0;
 8008b06:	2300      	movs	r3, #0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3714      	adds	r7, #20
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b08e      	sub	sp, #56	; 0x38
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	603b      	str	r3, [r7, #0]
 8008b20:	4613      	mov	r3, r2
 8008b22:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 8008b24:	2300      	movs	r3, #0
 8008b26:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8008b28:	2300      	movs	r3, #0
 8008b2a:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 8008b30:	2300      	movs	r3, #0
 8008b32:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b34:	2300      	movs	r3, #0
 8008b36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 8008b38:	2300      	movs	r3, #0
 8008b3a:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	891b      	ldrh	r3, [r3, #8]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d101      	bne.n	8008b4c <CircularQueue_Add+0x38>
 8008b48:	2302      	movs	r3, #2
 8008b4a:	e000      	b.n	8008b4e <CircularQueue_Add+0x3a>
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	695b      	ldr	r3, [r3, #20]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d02a      	beq.n	8008bae <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	891b      	ldrh	r3, [r3, #8]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d123      	bne.n	8008ba8 <CircularQueue_Add+0x94>
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	691b      	ldr	r3, [r3, #16]
 8008b68:	4413      	add	r3, r2
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	b29a      	uxth	r2, r3
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	6819      	ldr	r1, [r3, #0]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	691b      	ldr	r3, [r3, #16]
 8008b76:	1c58      	adds	r0, r3, #1
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	4298      	cmp	r0, r3
 8008b7e:	d306      	bcc.n	8008b8e <CircularQueue_Add+0x7a>
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6918      	ldr	r0, [r3, #16]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	1ac3      	subs	r3, r0, r3
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	e002      	b.n	8008b94 <CircularQueue_Add+0x80>
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	691b      	ldr	r3, [r3, #16]
 8008b92:	3301      	adds	r3, #1
 8008b94:	440b      	add	r3, r1
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	021b      	lsls	r3, r3, #8
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	4413      	add	r3, r2
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	3302      	adds	r3, #2
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	e001      	b.n	8008bac <CircularQueue_Add+0x98>
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	891b      	ldrh	r3, [r3, #8]
 8008bac:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	891b      	ldrh	r3, [r3, #8]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d002      	beq.n	8008bbc <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	891b      	ldrh	r3, [r3, #8]
 8008bba:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	691a      	ldr	r2, [r3, #16]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d307      	bcc.n	8008bd8 <CircularQueue_Add+0xc4>
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	685a      	ldr	r2, [r3, #4]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6919      	ldr	r1, [r3, #16]
 8008bd0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008bd2:	440b      	add	r3, r1
 8008bd4:	1ad3      	subs	r3, r2, r3
 8008bd6:	e000      	b.n	8008bda <CircularQueue_Add+0xc6>
 8008bd8:	2300      	movs	r3, #0
 8008bda:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8008bdc:	88fa      	ldrh	r2, [r7, #6]
 8008bde:	7ffb      	ldrb	r3, [r7, #31]
 8008be0:	4413      	add	r3, r2
 8008be2:	461a      	mov	r2, r3
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	fb03 f302 	mul.w	r3, r3, r2
 8008bea:	69ba      	ldr	r2, [r7, #24]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d80b      	bhi.n	8008c08 <CircularQueue_Add+0xf4>
 8008bf0:	88fa      	ldrh	r2, [r7, #6]
 8008bf2:	7ffb      	ldrb	r3, [r7, #31]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	fbb3 f1f2 	udiv	r1, r3, r2
 8008bfe:	fb02 f201 	mul.w	r2, r2, r1
 8008c02:	1a9b      	subs	r3, r3, r2
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	e000      	b.n	8008c0a <CircularQueue_Add+0xf6>
 8008c08:	2300      	movs	r3, #0
 8008c0a:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 8008c0c:	7dfa      	ldrb	r2, [r7, #23]
 8008c0e:	7ffb      	ldrb	r3, [r7, #31]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	bf8c      	ite	hi
 8008c14:	2301      	movhi	r3, #1
 8008c16:	2300      	movls	r3, #0
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8008c1c:	7fbb      	ldrb	r3, [r7, #30]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d008      	beq.n	8008c34 <CircularQueue_Add+0x120>
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	7f1b      	ldrb	r3, [r3, #28]
 8008c26:	f003 0301 	and.w	r3, r3, #1
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d002      	beq.n	8008c34 <CircularQueue_Add+0x120>
 8008c2e:	7dfb      	ldrb	r3, [r7, #23]
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	e000      	b.n	8008c36 <CircularQueue_Add+0x122>
 8008c34:	8bbb      	ldrh	r3, [r7, #28]
 8008c36:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 8008c38:	7fbb      	ldrb	r3, [r7, #30]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d008      	beq.n	8008c50 <CircularQueue_Add+0x13c>
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	7f1b      	ldrb	r3, [r3, #28]
 8008c42:	f003 0302 	and.w	r3, r3, #2
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d002      	beq.n	8008c50 <CircularQueue_Add+0x13c>
 8008c4a:	7ffb      	ldrb	r3, [r7, #31]
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	e000      	b.n	8008c52 <CircularQueue_Add+0x13e>
 8008c50:	8bbb      	ldrh	r3, [r7, #28]
 8008c52:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8008c54:	88fb      	ldrh	r3, [r7, #6]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	f000 817e 	beq.w	8008f58 <CircularQueue_Add+0x444>
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	695a      	ldr	r2, [r3, #20]
 8008c60:	88f9      	ldrh	r1, [r7, #6]
 8008c62:	7ffb      	ldrb	r3, [r7, #31]
 8008c64:	440b      	add	r3, r1
 8008c66:	4619      	mov	r1, r3
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	fb03 f301 	mul.w	r3, r3, r1
 8008c6e:	441a      	add	r2, r3
 8008c70:	8bbb      	ldrh	r3, [r7, #28]
 8008c72:	441a      	add	r2, r3
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	f200 816d 	bhi.w	8008f58 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 8008c7e:	2300      	movs	r3, #0
 8008c80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c82:	e14a      	b.n	8008f1a <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	691a      	ldr	r2, [r3, #16]
 8008c88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008c8a:	441a      	add	r2, r3
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d307      	bcc.n	8008ca4 <CircularQueue_Add+0x190>
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	691a      	ldr	r2, [r3, #16]
 8008c98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008c9a:	441a      	add	r2, r3
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	e003      	b.n	8008cac <CircularQueue_Add+0x198>
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	691a      	ldr	r2, [r3, #16]
 8008ca8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008caa:	4413      	add	r3, r2
 8008cac:	68fa      	ldr	r2, [r7, #12]
 8008cae:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	891b      	ldrh	r3, [r3, #8]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d130      	bne.n	8008d20 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc4:	1c59      	adds	r1, r3, #1
 8008cc6:	6339      	str	r1, [r7, #48]	; 0x30
 8008cc8:	4413      	add	r3, r2
 8008cca:	88fa      	ldrh	r2, [r7, #6]
 8008ccc:	b2d2      	uxtb	r2, r2
 8008cce:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d304      	bcc.n	8008ce4 <CircularQueue_Add+0x1d0>
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ce0:	1ad3      	subs	r3, r2, r3
 8008ce2:	e000      	b.n	8008ce6 <CircularQueue_Add+0x1d2>
 8008ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce6:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8008ce8:	88fb      	ldrh	r3, [r7, #6]
 8008cea:	0a1b      	lsrs	r3, r3, #8
 8008cec:	b298      	uxth	r0, r3
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf4:	1c59      	adds	r1, r3, #1
 8008cf6:	6339      	str	r1, [r7, #48]	; 0x30
 8008cf8:	4413      	add	r3, r2
 8008cfa:	b2c2      	uxtb	r2, r0
 8008cfc:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d304      	bcc.n	8008d12 <CircularQueue_Add+0x1fe>
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d0e:	1ad3      	subs	r3, r2, r3
 8008d10:	e000      	b.n	8008d14 <CircularQueue_Add+0x200>
 8008d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d14:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	695b      	ldr	r3, [r3, #20]
 8008d1a:	1c9a      	adds	r2, r3, #2
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8008d20:	88fa      	ldrh	r2, [r7, #6]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6859      	ldr	r1, [r3, #4]
 8008d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d28:	1acb      	subs	r3, r1, r3
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	bf28      	it	cs
 8008d2e:	4613      	movcs	r3, r2
 8008d30:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 8008d32:	88fb      	ldrh	r3, [r7, #6]
 8008d34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d007      	beq.n	8008d4a <CircularQueue_Add+0x236>
 8008d3a:	88fb      	ldrh	r3, [r7, #6]
 8008d3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d225      	bcs.n	8008d8e <CircularQueue_Add+0x27a>
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	7f1b      	ldrb	r3, [r3, #28]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d121      	bne.n	8008d8e <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d50:	18d0      	adds	r0, r2, r3
 8008d52:	88fb      	ldrh	r3, [r7, #6]
 8008d54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d56:	fb02 f303 	mul.w	r3, r2, r3
 8008d5a:	68ba      	ldr	r2, [r7, #8]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d60:	4619      	mov	r1, r3
 8008d62:	f001 fb63 	bl	800a42c <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	695a      	ldr	r2, [r3, #20]
 8008d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6c:	441a      	add	r2, r3
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 8008d72:	2300      	movs	r3, #0
 8008d74:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 8008d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d78:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 8008d7a:	88fa      	ldrh	r2, [r7, #6]
 8008d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7e:	1ad3      	subs	r3, r2, r3
 8008d80:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8008d82:	7ffb      	ldrb	r3, [r7, #31]
 8008d84:	b29a      	uxth	r2, r3
 8008d86:	88fb      	ldrh	r3, [r7, #6]
 8008d88:	4413      	add	r3, r2
 8008d8a:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008d8c:	e0a4      	b.n	8008ed8 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8008d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	f000 80a1 	beq.w	8008ed8 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	7f1b      	ldrb	r3, [r3, #28]
 8008d9a:	f003 0301 	and.w	r3, r3, #1
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d03a      	beq.n	8008e18 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	891b      	ldrh	r3, [r3, #8]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d10d      	bne.n	8008dc6 <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db0:	3b02      	subs	r3, #2
 8008db2:	4413      	add	r3, r2
 8008db4:	22ff      	movs	r2, #255	; 0xff
 8008db6:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	4413      	add	r3, r2
 8008dc2:	22ff      	movs	r2, #255	; 0xff
 8008dc4:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	695a      	ldr	r2, [r3, #20]
 8008dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dcc:	441a      	add	r2, r3
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 8008dd6:	88fb      	ldrh	r3, [r7, #6]
 8008dd8:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 8008dda:	2300      	movs	r3, #0
 8008ddc:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	891b      	ldrh	r3, [r3, #8]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d16f      	bne.n	8008ec6 <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dec:	1c59      	adds	r1, r3, #1
 8008dee:	6339      	str	r1, [r7, #48]	; 0x30
 8008df0:	4413      	add	r3, r2
 8008df2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008df4:	b2d2      	uxtb	r2, r2
 8008df6:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8008df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfa:	0a18      	lsrs	r0, r3, #8
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e02:	1c59      	adds	r1, r3, #1
 8008e04:	6339      	str	r1, [r7, #48]	; 0x30
 8008e06:	4413      	add	r3, r2
 8008e08:	b2c2      	uxtb	r2, r0
 8008e0a:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	695b      	ldr	r3, [r3, #20]
 8008e10:	1c9a      	adds	r2, r3, #2
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	615a      	str	r2, [r3, #20]
 8008e16:	e056      	b.n	8008ec6 <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	7f1b      	ldrb	r3, [r3, #28]
 8008e1c:	f003 0302 	and.w	r3, r3, #2
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d050      	beq.n	8008ec6 <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	891b      	ldrh	r3, [r3, #8]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d14a      	bne.n	8008ec2 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e32:	3b02      	subs	r3, #2
 8008e34:	4413      	add	r3, r2
 8008e36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e38:	b2d2      	uxtb	r2, r2
 8008e3a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8008e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e3e:	0a19      	lsrs	r1, r3, #8
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e46:	3b01      	subs	r3, #1
 8008e48:	4413      	add	r3, r2
 8008e4a:	b2ca      	uxtb	r2, r1
 8008e4c:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e54:	18d0      	adds	r0, r2, r3
 8008e56:	88fb      	ldrh	r3, [r7, #6]
 8008e58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e5a:	fb02 f303 	mul.w	r3, r2, r3
 8008e5e:	68ba      	ldr	r2, [r7, #8]
 8008e60:	4413      	add	r3, r2
 8008e62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e64:	4619      	mov	r1, r3
 8008e66:	f001 fae1 	bl	800a42c <memcpy>
             q->byteCount += NbBytesToCopy; 
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	695a      	ldr	r2, [r3, #20]
 8008e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e70:	441a      	add	r2, r3
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 8008e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e78:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8008e7a:	88fa      	ldrh	r2, [r7, #6]
 8008e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7e:	1ad3      	subs	r3, r2, r3
 8008e80:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	699b      	ldr	r3, [r3, #24]
 8008e86:	1c5a      	adds	r2, r3, #1
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e96:	1c59      	adds	r1, r3, #1
 8008e98:	6339      	str	r1, [r7, #48]	; 0x30
 8008e9a:	4413      	add	r3, r2
 8008e9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e9e:	b2d2      	uxtb	r2, r2
 8008ea0:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8008ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea4:	0a18      	lsrs	r0, r3, #8
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eac:	1c59      	adds	r1, r3, #1
 8008eae:	6339      	str	r1, [r7, #48]	; 0x30
 8008eb0:	4413      	add	r3, r2
 8008eb2:	b2c2      	uxtb	r2, r0
 8008eb4:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	695b      	ldr	r3, [r3, #20]
 8008eba:	1c9a      	adds	r2, r3, #2
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	615a      	str	r2, [r3, #20]
 8008ec0:	e001      	b.n	8008ec6 <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	e049      	b.n	8008f5a <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8008ec6:	7ffb      	ldrb	r3, [r7, #31]
 8008ec8:	b29a      	uxth	r2, r3
 8008eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	4413      	add	r3, r2
 8008ed0:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 8008ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d015      	beq.n	8008f0a <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee4:	18d0      	adds	r0, r2, r3
 8008ee6:	88fb      	ldrh	r3, [r7, #6]
 8008ee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eea:	fb02 f203 	mul.w	r2, r2, r3
 8008eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef0:	4413      	add	r3, r2
 8008ef2:	68ba      	ldr	r2, [r7, #8]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ef8:	4619      	mov	r1, r3
 8008efa:	f001 fa97 	bl	800a42c <memcpy>
        q->byteCount += NbBytesToCopy;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	695a      	ldr	r2, [r3, #20]
 8008f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f04:	441a      	add	r2, r3
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	699b      	ldr	r3, [r3, #24]
 8008f0e:	1c5a      	adds	r2, r3, #1
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 8008f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f16:	3301      	adds	r3, #1
 8008f18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	f4ff aeb0 	bcc.w	8008c84 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6919      	ldr	r1, [r3, #16]
 8008f2c:	7ffb      	ldrb	r3, [r7, #31]
 8008f2e:	4419      	add	r1, r3
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	4299      	cmp	r1, r3
 8008f36:	d307      	bcc.n	8008f48 <CircularQueue_Add+0x434>
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	6919      	ldr	r1, [r3, #16]
 8008f3c:	7ffb      	ldrb	r3, [r7, #31]
 8008f3e:	4419      	add	r1, r3
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	1acb      	subs	r3, r1, r3
 8008f46:	e003      	b.n	8008f50 <CircularQueue_Add+0x43c>
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6919      	ldr	r1, [r3, #16]
 8008f4c:	7ffb      	ldrb	r3, [r7, #31]
 8008f4e:	440b      	add	r3, r1
 8008f50:	4413      	add	r3, r2
 8008f52:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 8008f54:	6a3b      	ldr	r3, [r7, #32]
 8008f56:	e000      	b.n	8008f5a <CircularQueue_Add+0x446>
    return NULL;
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3738      	adds	r7, #56	; 0x38
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 8008f62:	b480      	push	{r7}
 8008f64:	b085      	sub	sp, #20
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
 8008f6a:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 8008f70:	2300      	movs	r3, #0
 8008f72:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	891b      	ldrh	r3, [r3, #8]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d101      	bne.n	8008f80 <CircularQueue_Remove+0x1e>
 8008f7c:	2302      	movs	r3, #2
 8008f7e:	e000      	b.n	8008f82 <CircularQueue_Remove+0x20>
 8008f80:	2300      	movs	r3, #0
 8008f82:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 8008f84:	2300      	movs	r3, #0
 8008f86:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	695b      	ldr	r3, [r3, #20]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f000 80cc 	beq.w	800912a <CircularQueue_Remove+0x1c8>
  {
    /* retreive element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	891b      	ldrh	r3, [r3, #8]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d121      	bne.n	8008fde <CircularQueue_Remove+0x7c>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	4413      	add	r3, r2
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	b29a      	uxth	r2, r3
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6819      	ldr	r1, [r3, #0]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	1c58      	adds	r0, r3, #1
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	4298      	cmp	r0, r3
 8008fb8:	d306      	bcc.n	8008fc8 <CircularQueue_Remove+0x66>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	68d8      	ldr	r0, [r3, #12]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	1ac3      	subs	r3, r0, r3
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	e002      	b.n	8008fce <CircularQueue_Remove+0x6c>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	3301      	adds	r3, #1
 8008fce:	440b      	add	r3, r1
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	021b      	lsls	r3, r3, #8
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	4413      	add	r3, r2
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	e001      	b.n	8008fe2 <CircularQueue_Remove+0x80>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	891b      	ldrh	r3, [r3, #8]
 8008fe2:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	7f1b      	ldrb	r3, [r3, #28]
 8008fe8:	f003 0301 	and.w	r3, r3, #1
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d057      	beq.n	80090a0 <CircularQueue_Remove+0x13e>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	7f1b      	ldrb	r3, [r3, #28]
 8008ff4:	f003 0302 	and.w	r3, r3, #2
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d151      	bne.n	80090a0 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8008ffc:	897b      	ldrh	r3, [r7, #10]
 8008ffe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009002:	4293      	cmp	r3, r2
 8009004:	d103      	bne.n	800900e <CircularQueue_Remove+0xac>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	891b      	ldrh	r3, [r3, #8]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d012      	beq.n	8009034 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	68da      	ldr	r2, [r3, #12]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8009016:	429a      	cmp	r2, r3
 8009018:	d942      	bls.n	80090a0 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	891b      	ldrh	r3, [r3, #8]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d03e      	beq.n	80090a0 <CircularQueue_Remove+0x13e>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	685a      	ldr	r2, [r3, #4]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	1ad3      	subs	r3, r2, r3
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	8912      	ldrh	r2, [r2, #8]
 8009030:	4293      	cmp	r3, r2
 8009032:	d235      	bcs.n	80090a0 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	695a      	ldr	r2, [r3, #20]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	68d9      	ldr	r1, [r3, #12]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	1acb      	subs	r3, r1, r3
 8009042:	441a      	add	r2, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	891b      	ldrh	r3, [r3, #8]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d121      	bne.n	800909a <CircularQueue_Remove+0x138>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	4413      	add	r3, r2
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	b29a      	uxth	r2, r3
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6819      	ldr	r1, [r3, #0]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	1c58      	adds	r0, r3, #1
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	4298      	cmp	r0, r3
 8009074:	d306      	bcc.n	8009084 <CircularQueue_Remove+0x122>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	68d8      	ldr	r0, [r3, #12]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	1ac3      	subs	r3, r0, r3
 8009080:	3301      	adds	r3, #1
 8009082:	e002      	b.n	800908a <CircularQueue_Remove+0x128>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	3301      	adds	r3, #1
 800908a:	440b      	add	r3, r1
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	b29b      	uxth	r3, r3
 8009090:	021b      	lsls	r3, r3, #8
 8009092:	b29b      	uxth	r3, r3
 8009094:	4413      	add	r3, r2
 8009096:	b29b      	uxth	r3, r3
 8009098:	e001      	b.n	800909e <CircularQueue_Remove+0x13c>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	891b      	ldrh	r3, [r3, #8]
 800909e:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	68d9      	ldr	r1, [r3, #12]
 80090a8:	7a7b      	ldrb	r3, [r7, #9]
 80090aa:	4419      	add	r1, r3
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	4299      	cmp	r1, r3
 80090b2:	d307      	bcc.n	80090c4 <CircularQueue_Remove+0x162>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	68d9      	ldr	r1, [r3, #12]
 80090b8:	7a7b      	ldrb	r3, [r7, #9]
 80090ba:	4419      	add	r1, r3
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	1acb      	subs	r3, r1, r3
 80090c2:	e003      	b.n	80090cc <CircularQueue_Remove+0x16a>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	68d9      	ldr	r1, [r3, #12]
 80090c8:	7a7b      	ldrb	r3, [r7, #9]
 80090ca:	440b      	add	r3, r1
 80090cc:	4413      	add	r3, r2
 80090ce:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	695b      	ldr	r3, [r3, #20]
 80090d4:	8979      	ldrh	r1, [r7, #10]
 80090d6:	7a7a      	ldrb	r2, [r7, #9]
 80090d8:	440a      	add	r2, r1
 80090da:	1a9a      	subs	r2, r3, r2
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	695b      	ldr	r3, [r3, #20]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d01b      	beq.n	8009120 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	68da      	ldr	r2, [r3, #12]
 80090ec:	897b      	ldrh	r3, [r7, #10]
 80090ee:	441a      	add	r2, r3
 80090f0:	7a7b      	ldrb	r3, [r7, #9]
 80090f2:	441a      	add	r2, r3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d309      	bcc.n	8009110 <CircularQueue_Remove+0x1ae>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	68da      	ldr	r2, [r3, #12]
 8009100:	897b      	ldrh	r3, [r7, #10]
 8009102:	441a      	add	r2, r3
 8009104:	7a7b      	ldrb	r3, [r7, #9]
 8009106:	441a      	add	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	1ad3      	subs	r3, r2, r3
 800910e:	e005      	b.n	800911c <CircularQueue_Remove+0x1ba>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	68da      	ldr	r2, [r3, #12]
 8009114:	897b      	ldrh	r3, [r7, #10]
 8009116:	441a      	add	r2, r3
 8009118:	7a7b      	ldrb	r3, [r7, #9]
 800911a:	4413      	add	r3, r2
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	699b      	ldr	r3, [r3, #24]
 8009124:	1e5a      	subs	r2, r3, #1
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d002      	beq.n	8009136 <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	897a      	ldrh	r2, [r7, #10]
 8009134:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 8009136:	68fb      	ldr	r3, [r7, #12]
}
 8009138:	4618      	mov	r0, r3
 800913a:	3714      	adds	r7, #20
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 8009144:	b480      	push	{r7}
 8009146:	b087      	sub	sp, #28
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800914e:	2300      	movs	r3, #0
 8009150:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 8009152:	2300      	movs	r3, #0
 8009154:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	891b      	ldrh	r3, [r3, #8]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d101      	bne.n	8009162 <CircularQueue_Sense+0x1e>
 800915e:	2302      	movs	r3, #2
 8009160:	e000      	b.n	8009164 <CircularQueue_Sense+0x20>
 8009162:	2300      	movs	r3, #0
 8009164:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 8009166:	2300      	movs	r3, #0
 8009168:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800916a:	2300      	movs	r3, #0
 800916c:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	695b      	ldr	r3, [r3, #20]
 8009172:	2b00      	cmp	r3, #0
 8009174:	f000 8090 	beq.w	8009298 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	891b      	ldrh	r3, [r3, #8]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d121      	bne.n	80091ca <CircularQueue_Sense+0x86>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	4413      	add	r3, r2
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	b29a      	uxth	r2, r3
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6819      	ldr	r1, [r3, #0]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	68db      	ldr	r3, [r3, #12]
 800919c:	1c58      	adds	r0, r3, #1
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	4298      	cmp	r0, r3
 80091a4:	d306      	bcc.n	80091b4 <CircularQueue_Sense+0x70>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	68d8      	ldr	r0, [r3, #12]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	1ac3      	subs	r3, r0, r3
 80091b0:	3301      	adds	r3, #1
 80091b2:	e002      	b.n	80091ba <CircularQueue_Sense+0x76>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	3301      	adds	r3, #1
 80091ba:	440b      	add	r3, r1
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	b29b      	uxth	r3, r3
 80091c0:	021b      	lsls	r3, r3, #8
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	4413      	add	r3, r2
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	e001      	b.n	80091ce <CircularQueue_Sense+0x8a>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	891b      	ldrh	r3, [r3, #8]
 80091ce:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	7f1b      	ldrb	r3, [r3, #28]
 80091d4:	f003 0301 	and.w	r3, r3, #1
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d048      	beq.n	800926e <CircularQueue_Sense+0x12a>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	7f1b      	ldrb	r3, [r3, #28]
 80091e0:	f003 0302 	and.w	r3, r3, #2
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d142      	bne.n	800926e <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 80091e8:	8a7b      	ldrh	r3, [r7, #18]
 80091ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d103      	bne.n	80091fa <CircularQueue_Sense+0xb6>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	891b      	ldrh	r3, [r3, #8]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d012      	beq.n	8009220 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	68da      	ldr	r2, [r3, #12]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8009202:	429a      	cmp	r2, r3
 8009204:	d933      	bls.n	800926e <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	891b      	ldrh	r3, [r3, #8]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d02f      	beq.n	800926e <CircularQueue_Sense+0x12a>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	685a      	ldr	r2, [r3, #4]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	68db      	ldr	r3, [r3, #12]
 8009216:	1ad3      	subs	r3, r2, r3
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	8912      	ldrh	r2, [r2, #8]
 800921c:	4293      	cmp	r3, r2
 800921e:	d226      	bcs.n	800926e <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 8009220:	2300      	movs	r3, #0
 8009222:	60fb      	str	r3, [r7, #12]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	891b      	ldrh	r3, [r3, #8]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d11d      	bne.n	8009268 <CircularQueue_Sense+0x124>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	4413      	add	r3, r2
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	b29a      	uxth	r2, r3
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6819      	ldr	r1, [r3, #0]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	1c58      	adds	r0, r3, #1
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	4298      	cmp	r0, r3
 8009246:	d305      	bcc.n	8009254 <CircularQueue_Sense+0x110>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	1ac3      	subs	r3, r0, r3
 8009250:	3301      	adds	r3, #1
 8009252:	e001      	b.n	8009258 <CircularQueue_Sense+0x114>
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	3301      	adds	r3, #1
 8009258:	440b      	add	r3, r1
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	b29b      	uxth	r3, r3
 800925e:	021b      	lsls	r3, r3, #8
 8009260:	b29b      	uxth	r3, r3
 8009262:	4413      	add	r3, r2
 8009264:	b29b      	uxth	r3, r3
 8009266:	e001      	b.n	800926c <CircularQueue_Sense+0x128>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	891b      	ldrh	r3, [r3, #8]
 800926c:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	7af9      	ldrb	r1, [r7, #11]
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	4419      	add	r1, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	4299      	cmp	r1, r3
 800927e:	d306      	bcc.n	800928e <CircularQueue_Sense+0x14a>
 8009280:	7af9      	ldrb	r1, [r7, #11]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	4419      	add	r1, r3
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	1acb      	subs	r3, r1, r3
 800928c:	e002      	b.n	8009294 <CircularQueue_Sense+0x150>
 800928e:	7af9      	ldrb	r1, [r7, #11]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	440b      	add	r3, r1
 8009294:	4413      	add	r3, r2
 8009296:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d002      	beq.n	80092a4 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	8a7a      	ldrh	r2, [r7, #18]
 80092a2:	801a      	strh	r2, [r3, #0]
  }
  return x;
 80092a4:	697b      	ldr	r3, [r7, #20]
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	371c      	adds	r7, #28
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr
	...

080092b4 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80092b4:	b480      	push	{r7}
 80092b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80092b8:	4b03      	ldr	r3, [pc, #12]	; (80092c8 <LL_FLASH_GetUDN+0x14>)
 80092ba:	681b      	ldr	r3, [r3, #0]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr
 80092c6:	bf00      	nop
 80092c8:	1fff7580 	.word	0x1fff7580

080092cc <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80092cc:	b480      	push	{r7}
 80092ce:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80092d0:	4b03      	ldr	r3, [pc, #12]	; (80092e0 <LL_FLASH_GetDeviceID+0x14>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	b2db      	uxtb	r3, r3
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr
 80092e0:	1fff7584 	.word	0x1fff7584

080092e4 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80092e4:	b480      	push	{r7}
 80092e6:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 80092e8:	4b03      	ldr	r3, [pc, #12]	; (80092f8 <LL_FLASH_GetSTCompanyID+0x14>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	0a1b      	lsrs	r3, r3, #8
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr
 80092f8:	1fff7584 	.word	0x1fff7584

080092fc <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 80092fc:	b5b0      	push	{r4, r5, r7, lr}
 80092fe:	b08e      	sub	sp, #56	; 0x38
 8009300:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8009302:	4b21      	ldr	r3, [pc, #132]	; (8009388 <APP_BLE_Init+0x8c>)
 8009304:	1d3c      	adds	r4, r7, #4
 8009306:	461d      	mov	r5, r3
 8009308:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800930a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800930c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800930e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009314:	682b      	ldr	r3, [r5, #0]
 8009316:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8009318:	f000 f92c 	bl	8009574 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800931c:	2101      	movs	r1, #1
 800931e:	2002      	movs	r0, #2
 8009320:	f000 fdfc 	bl	8009f1c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8009324:	4a19      	ldr	r2, [pc, #100]	; (800938c <APP_BLE_Init+0x90>)
 8009326:	2100      	movs	r1, #0
 8009328:	2002      	movs	r0, #2
 800932a:	f000 ff11 	bl	800a150 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 800932e:	1d3b      	adds	r3, r7, #4
 8009330:	4618      	mov	r0, r3
 8009332:	f7fe fc1d 	bl	8007b70 <SHCI_C2_BLE_Init>
 8009336:	4603      	mov	r3, r0
 8009338:	2b00      	cmp	r3, #0
 800933a:	d001      	beq.n	8009340 <APP_BLE_Init+0x44>
  {
    Error_Handler();
 800933c:	f7f8 fe1c 	bl	8001f78 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8009340:	f000 f92e 	bl	80095a0 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8009344:	f7fe fb6e 	bl	8007a24 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009348:	4b11      	ldr	r3, [pc, #68]	; (8009390 <APP_BLE_Init+0x94>)
 800934a:	2200      	movs	r2, #0
 800934c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8009350:	4b0f      	ldr	r3, [pc, #60]	; (8009390 <APP_BLE_Init+0x94>)
 8009352:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009356:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8009358:	4a0e      	ldr	r2, [pc, #56]	; (8009394 <APP_BLE_Init+0x98>)
 800935a:	2100      	movs	r1, #0
 800935c:	2001      	movs	r0, #1
 800935e:	f000 fef7 	bl	800a150 <UTIL_SEQ_RegTask>
  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 8009362:	2006      	movs	r0, #6
 8009364:	f7fe f9f2 	bl	800774c <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8009368:	f000 fad1 	bl	800990e <Custom_APP_Init>
/* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800936c:	4b08      	ldr	r3, [pc, #32]	; (8009390 <APP_BLE_Init+0x94>)
 800936e:	2200      	movs	r2, #0
 8009370:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8009372:	4b07      	ldr	r3, [pc, #28]	; (8009390 <APP_BLE_Init+0x94>)
 8009374:	2200      	movs	r2, #0
 8009376:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 8009378:	2001      	movs	r0, #1
 800937a:	f000 f9ab 	bl	80096d4 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 800937e:	bf00      	nop
}
 8009380:	3738      	adds	r7, #56	; 0x38
 8009382:	46bd      	mov	sp, r7
 8009384:	bdb0      	pop	{r4, r5, r7, pc}
 8009386:	bf00      	nop
 8009388:	0800b6fc 	.word	0x0800b6fc
 800938c:	08007d8d 	.word	0x08007d8d
 8009390:	20000174 	.word	0x20000174
 8009394:	080097dd 	.word	0x080097dd

08009398 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b08a      	sub	sp, #40	; 0x28
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blecore_aci *blecore_evt;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	3301      	adds	r3, #1
 80093a4:	627b      	str	r3, [r7, #36]	; 0x24

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 80093a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	2bff      	cmp	r3, #255	; 0xff
 80093ac:	d063      	beq.n	8009476 <SVCCTL_App_Notification+0xde>
 80093ae:	2bff      	cmp	r3, #255	; 0xff
 80093b0:	f300 80c3 	bgt.w	800953a <SVCCTL_App_Notification+0x1a2>
 80093b4:	2b05      	cmp	r3, #5
 80093b6:	d002      	beq.n	80093be <SVCCTL_App_Notification+0x26>
 80093b8:	2b3e      	cmp	r3, #62	; 0x3e
 80093ba:	d023      	beq.n	8009404 <SVCCTL_App_Notification+0x6c>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 80093bc:	e0bd      	b.n	800953a <SVCCTL_App_Notification+0x1a2>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 80093be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c0:	3302      	adds	r3, #2
 80093c2:	60bb      	str	r3, [r7, #8]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80093ca:	b29a      	uxth	r2, r3
 80093cc:	4b5f      	ldr	r3, [pc, #380]	; (800954c <SVCCTL_App_Notification+0x1b4>)
 80093ce:	8adb      	ldrh	r3, [r3, #22]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d109      	bne.n	80093e8 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 80093d4:	4b5d      	ldr	r3, [pc, #372]	; (800954c <SVCCTL_App_Notification+0x1b4>)
 80093d6:	2200      	movs	r2, #0
 80093d8:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80093da:	4b5c      	ldr	r3, [pc, #368]	; (800954c <SVCCTL_App_Notification+0x1b4>)
 80093dc:	2200      	movs	r2, #0
 80093de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
 80093e2:	485b      	ldr	r0, [pc, #364]	; (8009550 <SVCCTL_App_Notification+0x1b8>)
 80093e4:	f001 f8be 	bl	800a564 <puts>
      Adv_Request(APP_BLE_FAST_ADV);
 80093e8:	2001      	movs	r0, #1
 80093ea:	f000 f973 	bl	80096d4 <Adv_Request>
      handleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 80093ee:	4b59      	ldr	r3, [pc, #356]	; (8009554 <SVCCTL_App_Notification+0x1bc>)
 80093f0:	2201      	movs	r2, #1
 80093f2:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80093f4:	4b55      	ldr	r3, [pc, #340]	; (800954c <SVCCTL_App_Notification+0x1b4>)
 80093f6:	8ada      	ldrh	r2, [r3, #22]
 80093f8:	4b56      	ldr	r3, [pc, #344]	; (8009554 <SVCCTL_App_Notification+0x1bc>)
 80093fa:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&handleNotification);
 80093fc:	4855      	ldr	r0, [pc, #340]	; (8009554 <SVCCTL_App_Notification+0x1bc>)
 80093fe:	f000 fa72 	bl	80098e6 <Custom_APP_Notification>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8009402:	e09d      	b.n	8009540 <SVCCTL_App_Notification+0x1a8>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8009404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009406:	3302      	adds	r3, #2
 8009408:	613b      	str	r3, [r7, #16]
      switch (meta_evt->subevent)
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	2b01      	cmp	r3, #1
 8009410:	d005      	beq.n	800941e <SVCCTL_App_Notification+0x86>
 8009412:	2b03      	cmp	r3, #3
 8009414:	d12d      	bne.n	8009472 <SVCCTL_App_Notification+0xda>
          APP_DBG_MSG("\r\n\r** CONNECTION UPDATE EVENT WITH CLIENT \n");
 8009416:	4850      	ldr	r0, [pc, #320]	; (8009558 <SVCCTL_App_Notification+0x1c0>)
 8009418:	f001 f8a4 	bl	800a564 <puts>
          break;
 800941c:	e02a      	b.n	8009474 <SVCCTL_App_Notification+0xdc>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	3301      	adds	r3, #1
 8009422:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG("HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE for connection handle 0x%x\n", connection_complete_event->Connection_Handle);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800942a:	b29b      	uxth	r3, r3
 800942c:	4619      	mov	r1, r3
 800942e:	484b      	ldr	r0, [pc, #300]	; (800955c <SVCCTL_App_Notification+0x1c4>)
 8009430:	f001 f812 	bl	800a458 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8009434:	4b45      	ldr	r3, [pc, #276]	; (800954c <SVCCTL_App_Notification+0x1b4>)
 8009436:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800943a:	2b04      	cmp	r3, #4
 800943c:	d104      	bne.n	8009448 <SVCCTL_App_Notification+0xb0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800943e:	4b43      	ldr	r3, [pc, #268]	; (800954c <SVCCTL_App_Notification+0x1b4>)
 8009440:	2206      	movs	r2, #6
 8009442:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8009446:	e003      	b.n	8009450 <SVCCTL_App_Notification+0xb8>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8009448:	4b40      	ldr	r3, [pc, #256]	; (800954c <SVCCTL_App_Notification+0x1b4>)
 800944a:	2205      	movs	r2, #5
 800944c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009456:	b29a      	uxth	r2, r3
 8009458:	4b3c      	ldr	r3, [pc, #240]	; (800954c <SVCCTL_App_Notification+0x1b4>)
 800945a:	82da      	strh	r2, [r3, #22]
          handleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800945c:	4b3d      	ldr	r3, [pc, #244]	; (8009554 <SVCCTL_App_Notification+0x1bc>)
 800945e:	2200      	movs	r2, #0
 8009460:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8009462:	4b3a      	ldr	r3, [pc, #232]	; (800954c <SVCCTL_App_Notification+0x1b4>)
 8009464:	8ada      	ldrh	r2, [r3, #22]
 8009466:	4b3b      	ldr	r3, [pc, #236]	; (8009554 <SVCCTL_App_Notification+0x1bc>)
 8009468:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&handleNotification);
 800946a:	483a      	ldr	r0, [pc, #232]	; (8009554 <SVCCTL_App_Notification+0x1bc>)
 800946c:	f000 fa3b 	bl	80098e6 <Custom_APP_Notification>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8009470:	e000      	b.n	8009474 <SVCCTL_App_Notification+0xdc>
          break;
 8009472:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 8009474:	e064      	b.n	8009540 <SVCCTL_App_Notification+0x1a8>
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8009476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009478:	3302      	adds	r3, #2
 800947a:	623b      	str	r3, [r7, #32]
      switch (blecore_evt->ecode)
 800947c:	6a3b      	ldr	r3, [r7, #32]
 800947e:	881b      	ldrh	r3, [r3, #0]
 8009480:	b29b      	uxth	r3, r3
 8009482:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009486:	d054      	beq.n	8009532 <SVCCTL_App_Notification+0x19a>
 8009488:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800948c:	dc57      	bgt.n	800953e <SVCCTL_App_Notification+0x1a6>
 800948e:	2b04      	cmp	r3, #4
 8009490:	d051      	beq.n	8009536 <SVCCTL_App_Notification+0x19e>
 8009492:	2b04      	cmp	r3, #4
 8009494:	db53      	blt.n	800953e <SVCCTL_App_Notification+0x1a6>
 8009496:	f240 420a 	movw	r2, #1034	; 0x40a
 800949a:	4293      	cmp	r3, r2
 800949c:	dc4f      	bgt.n	800953e <SVCCTL_App_Notification+0x1a6>
 800949e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094a2:	dd4c      	ble.n	800953e <SVCCTL_App_Notification+0x1a6>
 80094a4:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 80094a8:	2b09      	cmp	r3, #9
 80094aa:	d848      	bhi.n	800953e <SVCCTL_App_Notification+0x1a6>
 80094ac:	a201      	add	r2, pc, #4	; (adr r2, 80094b4 <SVCCTL_App_Notification+0x11c>)
 80094ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b2:	bf00      	nop
 80094b4:	0800951f 	.word	0x0800951f
 80094b8:	080094ed 	.word	0x080094ed
 80094bc:	0800953f 	.word	0x0800953f
 80094c0:	0800953f 	.word	0x0800953f
 80094c4:	0800953f 	.word	0x0800953f
 80094c8:	0800953f 	.word	0x0800953f
 80094cc:	080094dd 	.word	0x080094dd
 80094d0:	0800953f 	.word	0x0800953f
 80094d4:	080094fb 	.word	0x080094fb
 80094d8:	080094e5 	.word	0x080094e5
        APP_DBG_MSG("\r\n\r** ACI_GAP_PROC_COMPLETE_VSEVT_CODE \n");
 80094dc:	4820      	ldr	r0, [pc, #128]	; (8009560 <SVCCTL_App_Notification+0x1c8>)
 80094de:	f001 f841 	bl	800a564 <puts>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 80094e2:	e029      	b.n	8009538 <SVCCTL_App_Notification+0x1a0>
         APP_DBG_MSG("\r\n\r** ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE \n");
 80094e4:	481f      	ldr	r0, [pc, #124]	; (8009564 <SVCCTL_App_Notification+0x1cc>)
 80094e6:	f001 f83d 	bl	800a564 <puts>
        break;
 80094ea:	e025      	b.n	8009538 <SVCCTL_App_Notification+0x1a0>
            aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 80094ec:	4b17      	ldr	r3, [pc, #92]	; (800954c <SVCCTL_App_Notification+0x1b4>)
 80094ee:	8adb      	ldrh	r3, [r3, #22]
 80094f0:	491d      	ldr	r1, [pc, #116]	; (8009568 <SVCCTL_App_Notification+0x1d0>)
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7fd fc6c 	bl	8006dd0 <aci_gap_pass_key_resp>
        break;
 80094f8:	e01e      	b.n	8009538 <SVCCTL_App_Notification+0x1a0>
            evt_numeric_value = (aci_gap_numeric_comparison_value_event_rp0 *)blecore_evt->data;
 80094fa:	6a3b      	ldr	r3, [r7, #32]
 80094fc:	3302      	adds	r3, #2
 80094fe:	61fb      	str	r3, [r7, #28]
            numeric_value = evt_numeric_value->Numeric_Value;
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8009506:	61bb      	str	r3, [r7, #24]
            APP_DBG_MSG("numeric_value = %ld\n", numeric_value);
 8009508:	69b9      	ldr	r1, [r7, #24]
 800950a:	4818      	ldr	r0, [pc, #96]	; (800956c <SVCCTL_App_Notification+0x1d4>)
 800950c:	f000 ffa4 	bl	800a458 <iprintf>
            aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8009510:	4b0e      	ldr	r3, [pc, #56]	; (800954c <SVCCTL_App_Notification+0x1b4>)
 8009512:	8adb      	ldrh	r3, [r3, #22]
 8009514:	2101      	movs	r1, #1
 8009516:	4618      	mov	r0, r3
 8009518:	f7fd fdbc 	bl	8007094 <aci_gap_numeric_comparison_value_confirm_yesno>
        break;
 800951c:	e00c      	b.n	8009538 <SVCCTL_App_Notification+0x1a0>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blecore_evt->data;
 800951e:	6a3b      	ldr	r3, [r7, #32]
 8009520:	3302      	adds	r3, #2
 8009522:	617b      	str	r3, [r7, #20]
            APP_DBG_MSG("BLE_CTRL_App_Notification: ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE, pairing_complete->Status = %d\n",pairing_complete->Status);
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	789b      	ldrb	r3, [r3, #2]
 8009528:	4619      	mov	r1, r3
 800952a:	4811      	ldr	r0, [pc, #68]	; (8009570 <SVCCTL_App_Notification+0x1d8>)
 800952c:	f000 ff94 	bl	800a458 <iprintf>
        break;
 8009530:	e002      	b.n	8009538 <SVCCTL_App_Notification+0x1a0>
      break;
 8009532:	bf00      	nop
 8009534:	e003      	b.n	800953e <SVCCTL_App_Notification+0x1a6>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8009536:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8009538:	e001      	b.n	800953e <SVCCTL_App_Notification+0x1a6>
      break;
 800953a:	bf00      	nop
 800953c:	e000      	b.n	8009540 <SVCCTL_App_Notification+0x1a8>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800953e:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8009540:	2301      	movs	r3, #1
}
 8009542:	4618      	mov	r0, r3
 8009544:	3728      	adds	r7, #40	; 0x28
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	20000174 	.word	0x20000174
 8009550:	0800b730 	.word	0x0800b730
 8009554:	20001528 	.word	0x20001528
 8009558:	0800b758 	.word	0x0800b758
 800955c:	0800b784 	.word	0x0800b784
 8009560:	0800b7c8 	.word	0x0800b7c8
 8009564:	0800b7f0 	.word	0x0800b7f0
 8009568:	0001b207 	.word	0x0001b207
 800956c:	0800b820 	.word	0x0800b820
 8009570:	0800b838 	.word	0x0800b838

08009574 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800957a:	4b06      	ldr	r3, [pc, #24]	; (8009594 <Ble_Tl_Init+0x20>)
 800957c:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800957e:	4b06      	ldr	r3, [pc, #24]	; (8009598 <Ble_Tl_Init+0x24>)
 8009580:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8009582:	463b      	mov	r3, r7
 8009584:	4619      	mov	r1, r3
 8009586:	4805      	ldr	r0, [pc, #20]	; (800959c <Ble_Tl_Init+0x28>)
 8009588:	f7fe fbe4 	bl	8007d54 <hci_init>

  return;
 800958c:	bf00      	nop
}
 800958e:	3708      	adds	r7, #8
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}
 8009594:	200300d4 	.word	0x200300d4
 8009598:	080098b1 	.word	0x080098b1
 800959c:	08009879 	.word	0x08009879

080095a0 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 80095a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095a2:	b08d      	sub	sp, #52	; 0x34
 80095a4:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 80095a6:	2300      	movs	r3, #0
 80095a8:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 80095aa:	f7fe f919 	bl	80077e0 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 80095ae:	f000 f8d1 	bl	8009754 <BleGetBdAddress>
 80095b2:	6178      	str	r0, [r7, #20]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 80095b4:	697a      	ldr	r2, [r7, #20]
 80095b6:	2106      	movs	r1, #6
 80095b8:	2000      	movs	r0, #0
 80095ba:	f7fe f807 	bl	80075cc <aci_hal_write_config_data>
#endif

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 80095be:	4a40      	ldr	r2, [pc, #256]	; (80096c0 <Ble_Hci_Gap_Gatt_Init+0x120>)
 80095c0:	2110      	movs	r1, #16
 80095c2:	2018      	movs	r0, #24
 80095c4:	f7fe f802 	bl	80075cc <aci_hal_write_config_data>

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 80095c8:	4a3e      	ldr	r2, [pc, #248]	; (80096c4 <Ble_Hci_Gap_Gatt_Init+0x124>)
 80095ca:	2110      	movs	r1, #16
 80095cc:	2008      	movs	r0, #8
 80095ce:	f7fd fffd 	bl	80075cc <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80095d2:	2118      	movs	r1, #24
 80095d4:	2001      	movs	r0, #1
 80095d6:	f7fe f862 	bl	800769e <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 80095da:	f7fd fdb2 	bl	8007142 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 80095de:	2300      	movs	r3, #0
 80095e0:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80095e2:	7cfb      	ldrb	r3, [r7, #19]
 80095e4:	f043 0301 	orr.w	r3, r3, #1
 80095e8:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 80095ea:	7cfb      	ldrb	r3, [r7, #19]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d01d      	beq.n	800962c <Ble_Hci_Gap_Gatt_Init+0x8c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 80095f0:	4b35      	ldr	r3, [pc, #212]	; (80096c8 <Ble_Hci_Gap_Gatt_Init+0x128>)
 80095f2:	60fb      	str	r3, [r7, #12]
    aci_gap_init(role,
 80095f4:	f107 020a 	add.w	r2, r7, #10
 80095f8:	7cf8      	ldrb	r0, [r7, #19]
 80095fa:	1dbb      	adds	r3, r7, #6
 80095fc:	9301      	str	r3, [sp, #4]
 80095fe:	f107 0308 	add.w	r3, r7, #8
 8009602:	9300      	str	r3, [sp, #0]
 8009604:	4613      	mov	r3, r2
 8009606:	2208      	movs	r2, #8
 8009608:	2100      	movs	r1, #0
 800960a:	f7fd fc38 	bl	8006e7e <aci_gap_init>
                 CFG_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle,
                 &gap_dev_name_char_handle,
                 &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800960e:	897c      	ldrh	r4, [r7, #10]
 8009610:	893d      	ldrh	r5, [r7, #8]
 8009612:	68f8      	ldr	r0, [r7, #12]
 8009614:	f7f6 fdb4 	bl	8000180 <strlen>
 8009618:	4603      	mov	r3, r0
 800961a:	b2da      	uxtb	r2, r3
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	9300      	str	r3, [sp, #0]
 8009620:	4613      	mov	r3, r2
 8009622:	2200      	movs	r2, #0
 8009624:	4629      	mov	r1, r5
 8009626:	4620      	mov	r0, r4
 8009628:	f7fd ff49 	bl	80074be <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 800962c:	8978      	ldrh	r0, [r7, #10]
 800962e:	88f9      	ldrh	r1, [r7, #6]
 8009630:	1d3b      	adds	r3, r7, #4
 8009632:	9300      	str	r3, [sp, #0]
 8009634:	2302      	movs	r3, #2
 8009636:	2200      	movs	r2, #0
 8009638:	f7fd ff41 	bl	80074be <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800963c:	2202      	movs	r2, #2
 800963e:	2102      	movs	r1, #2
 8009640:	2000      	movs	r0, #0
 8009642:	f7fe f8f1 	bl	8007828 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8009646:	4b21      	ldr	r3, [pc, #132]	; (80096cc <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8009648:	2201      	movs	r2, #1
 800964a:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800964c:	4b1f      	ldr	r3, [pc, #124]	; (80096cc <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	4618      	mov	r0, r3
 8009652:	f7fd facb 	bl	8006bec <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8009656:	4b1d      	ldr	r3, [pc, #116]	; (80096cc <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8009658:	2201      	movs	r2, #1
 800965a:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800965c:	4b1b      	ldr	r3, [pc, #108]	; (80096cc <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800965e:	2208      	movs	r2, #8
 8009660:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8009662:	4b1a      	ldr	r3, [pc, #104]	; (80096cc <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8009664:	2210      	movs	r2, #16
 8009666:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8009668:	4b18      	ldr	r3, [pc, #96]	; (80096cc <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800966a:	2200      	movs	r2, #0
 800966c:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800966e:	4b17      	ldr	r3, [pc, #92]	; (80096cc <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8009670:	4a17      	ldr	r2, [pc, #92]	; (80096d0 <Ble_Hci_Gap_Gatt_Init+0x130>)
 8009672:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8009674:	4b15      	ldr	r3, [pc, #84]	; (80096cc <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8009676:	2200      	movs	r2, #0
 8009678:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800967a:	4b14      	ldr	r3, [pc, #80]	; (80096cc <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800967c:	789c      	ldrb	r4, [r3, #2]
 800967e:	4b13      	ldr	r3, [pc, #76]	; (80096cc <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8009680:	785d      	ldrb	r5, [r3, #1]
 8009682:	4b12      	ldr	r3, [pc, #72]	; (80096cc <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8009684:	791b      	ldrb	r3, [r3, #4]
 8009686:	4a11      	ldr	r2, [pc, #68]	; (80096cc <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8009688:	7952      	ldrb	r2, [r2, #5]
 800968a:	4910      	ldr	r1, [pc, #64]	; (80096cc <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800968c:	78c9      	ldrb	r1, [r1, #3]
 800968e:	480f      	ldr	r0, [pc, #60]	; (80096cc <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8009690:	6880      	ldr	r0, [r0, #8]
 8009692:	2600      	movs	r6, #0
 8009694:	9604      	str	r6, [sp, #16]
 8009696:	9003      	str	r0, [sp, #12]
 8009698:	9102      	str	r1, [sp, #8]
 800969a:	9201      	str	r2, [sp, #4]
 800969c:	9300      	str	r3, [sp, #0]
 800969e:	2300      	movs	r3, #0
 80096a0:	2201      	movs	r2, #1
 80096a2:	4629      	mov	r1, r5
 80096a4:	4620      	mov	r0, r4
 80096a6:	f7fd faeb 	bl	8006c80 <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80096aa:	4b08      	ldr	r3, [pc, #32]	; (80096cc <Ble_Hci_Gap_Gatt_Init+0x12c>)
 80096ac:	789b      	ldrb	r3, [r3, #2]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d001      	beq.n	80096b6 <Ble_Hci_Gap_Gatt_Init+0x116>
   {
     aci_gap_configure_whitelist();
 80096b2:	f7fd fccb 	bl	800704c <aci_gap_configure_whitelist>
   }
}
 80096b6:	bf00      	nop
 80096b8:	371c      	adds	r7, #28
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096be:	bf00      	nop
 80096c0:	0800bb44 	.word	0x0800bb44
 80096c4:	0800bb54 	.word	0x0800bb54
 80096c8:	0800b898 	.word	0x0800b898
 80096cc:	20000174 	.word	0x20000174
 80096d0:	0001b207 	.word	0x0001b207

080096d4 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b08c      	sub	sp, #48	; 0x30
 80096d8:	af08      	add	r7, sp, #32
 80096da:	4603      	mov	r3, r0
 80096dc:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80096de:	2392      	movs	r3, #146	; 0x92
 80096e0:	73fb      	strb	r3, [r7, #15]

    BleApplicationContext.Device_Connection_Status = New_Status;
 80096e2:	4a18      	ldr	r2, [pc, #96]	; (8009744 <Adv_Request+0x70>)
 80096e4:	79fb      	ldrb	r3, [r7, #7]
 80096e6:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 80096ea:	2300      	movs	r3, #0
 80096ec:	9306      	str	r3, [sp, #24]
 80096ee:	2300      	movs	r3, #0
 80096f0:	9305      	str	r3, [sp, #20]
 80096f2:	2300      	movs	r3, #0
 80096f4:	9304      	str	r3, [sp, #16]
 80096f6:	2300      	movs	r3, #0
 80096f8:	9303      	str	r3, [sp, #12]
 80096fa:	2300      	movs	r3, #0
 80096fc:	9302      	str	r3, [sp, #8]
 80096fe:	2300      	movs	r3, #0
 8009700:	9301      	str	r3, [sp, #4]
 8009702:	2300      	movs	r3, #0
 8009704:	9300      	str	r3, [sp, #0]
 8009706:	2300      	movs	r3, #0
 8009708:	22a0      	movs	r2, #160	; 0xa0
 800970a:	2180      	movs	r1, #128	; 0x80
 800970c:	2000      	movs	r0, #0
 800970e:	f7fd f98f 	bl	8006a30 <aci_gap_set_discoverable>
 8009712:	4603      	mov	r3, r0
 8009714:	73fb      	strb	r3, [r7, #15]
        0,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(ad_data), (uint8_t*) ad_data);
 8009716:	490c      	ldr	r1, [pc, #48]	; (8009748 <Adv_Request+0x74>)
 8009718:	2009      	movs	r0, #9
 800971a:	f7fd fc3b 	bl	8006f94 <aci_gap_update_adv_data>
 800971e:	4603      	mov	r3, r0
 8009720:	73fb      	strb	r3, [r7, #15]

    if (ret == BLE_STATUS_SUCCESS)
 8009722:	7bfb      	ldrb	r3, [r7, #15]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d103      	bne.n	8009730 <Adv_Request+0x5c>
    {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
 8009728:	4808      	ldr	r0, [pc, #32]	; (800974c <Adv_Request+0x78>)
 800972a:	f000 ff1b 	bl	800a564 <puts>
    else
    {
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
    }

  return;
 800972e:	e005      	b.n	800973c <Adv_Request+0x68>
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
 8009730:	7bfb      	ldrb	r3, [r7, #15]
 8009732:	4619      	mov	r1, r3
 8009734:	4806      	ldr	r0, [pc, #24]	; (8009750 <Adv_Request+0x7c>)
 8009736:	f000 fe8f 	bl	800a458 <iprintf>
  return;
 800973a:	bf00      	nop
}
 800973c:	3710      	adds	r7, #16
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	20000174 	.word	0x20000174
 8009748:	20000010 	.word	0x20000010
 800974c:	0800b8a4 	.word	0x0800b8a4
 8009750:	0800b8cc 	.word	0x0800b8cc

08009754 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b086      	sub	sp, #24
 8009758:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800975a:	f7ff fdab 	bl	80092b4 <LL_FLASH_GetUDN>
 800975e:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009766:	d023      	beq.n	80097b0 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8009768:	f7ff fdbc 	bl	80092e4 <LL_FLASH_GetSTCompanyID>
 800976c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800976e:	f7ff fdad 	bl	80092cc <LL_FLASH_GetDeviceID>
 8009772:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	b2da      	uxtb	r2, r3
 8009778:	4b16      	ldr	r3, [pc, #88]	; (80097d4 <BleGetBdAddress+0x80>)
 800977a:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	0a1b      	lsrs	r3, r3, #8
 8009780:	b2da      	uxtb	r2, r3
 8009782:	4b14      	ldr	r3, [pc, #80]	; (80097d4 <BleGetBdAddress+0x80>)
 8009784:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	b2da      	uxtb	r2, r3
 800978a:	4b12      	ldr	r3, [pc, #72]	; (80097d4 <BleGetBdAddress+0x80>)
 800978c:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	b2da      	uxtb	r2, r3
 8009792:	4b10      	ldr	r3, [pc, #64]	; (80097d4 <BleGetBdAddress+0x80>)
 8009794:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	0a1b      	lsrs	r3, r3, #8
 800979a:	b2da      	uxtb	r2, r3
 800979c:	4b0d      	ldr	r3, [pc, #52]	; (80097d4 <BleGetBdAddress+0x80>)
 800979e:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	0c1b      	lsrs	r3, r3, #16
 80097a4:	b2da      	uxtb	r2, r3
 80097a6:	4b0b      	ldr	r3, [pc, #44]	; (80097d4 <BleGetBdAddress+0x80>)
 80097a8:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 80097aa:	4b0a      	ldr	r3, [pc, #40]	; (80097d4 <BleGetBdAddress+0x80>)
 80097ac:	617b      	str	r3, [r7, #20]
 80097ae:	e00b      	b.n	80097c8 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 80097b0:	2000      	movs	r0, #0
 80097b2:	f7ff f897 	bl	80088e4 <OTP_Read>
 80097b6:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d002      	beq.n	80097c4 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	617b      	str	r3, [r7, #20]
 80097c2:	e001      	b.n	80097c8 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 80097c4:	4b04      	ldr	r3, [pc, #16]	; (80097d8 <BleGetBdAddress+0x84>)
 80097c6:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 80097c8:	697b      	ldr	r3, [r7, #20]
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3718      	adds	r7, #24
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	200012b0 	.word	0x200012b0
 80097d8:	0800bb3c 	.word	0x0800bb3c

080097dc <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80097e2:	4b10      	ldr	r3, [pc, #64]	; (8009824 <Adv_Cancel+0x48>)
 80097e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80097e8:	2b05      	cmp	r3, #5
 80097ea:	d017      	beq.n	800981c <Adv_Cancel+0x40>

  {

    tBleStatus result = 0x00;
 80097ec:	2300      	movs	r3, #0
 80097ee:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 80097f0:	f7fd f8fa 	bl	80069e8 <aci_gap_set_non_discoverable>
 80097f4:	4603      	mov	r3, r0
 80097f6:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80097f8:	4b0a      	ldr	r3, [pc, #40]	; (8009824 <Adv_Cancel+0x48>)
 80097fa:	2200      	movs	r2, #0
 80097fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (result == BLE_STATUS_SUCCESS)
 8009800:	79fb      	ldrb	r3, [r7, #7]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d106      	bne.n	8009814 <Adv_Cancel+0x38>
    {
      APP_DBG_MSG("  \r\n\r");APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 8009806:	4808      	ldr	r0, [pc, #32]	; (8009828 <Adv_Cancel+0x4c>)
 8009808:	f000 fe26 	bl	800a458 <iprintf>
 800980c:	4807      	ldr	r0, [pc, #28]	; (800982c <Adv_Cancel+0x50>)
 800980e:	f000 fe23 	bl	800a458 <iprintf>
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 8009812:	e003      	b.n	800981c <Adv_Cancel+0x40>
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 8009814:	4806      	ldr	r0, [pc, #24]	; (8009830 <Adv_Cancel+0x54>)
 8009816:	f000 fe1f 	bl	800a458 <iprintf>
  return;
 800981a:	bf00      	nop
 800981c:	bf00      	nop
}
 800981e:	3708      	adds	r7, #8
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	20000174 	.word	0x20000174
 8009828:	0800b8fc 	.word	0x0800b8fc
 800982c:	0800b904 	.word	0x0800b904
 8009830:	0800b920 	.word	0x0800b920

08009834 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800983c:	2100      	movs	r1, #0
 800983e:	2002      	movs	r0, #2
 8009840:	f000 fca8 	bl	800a194 <UTIL_SEQ_SetTask>
  return;
 8009844:	bf00      	nop
}
 8009846:	3708      	adds	r7, #8
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b082      	sub	sp, #8
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8009854:	2001      	movs	r0, #1
 8009856:	f000 fd09 	bl	800a26c <UTIL_SEQ_SetEvt>
  return;
 800985a:	bf00      	nop
}
 800985c:	3708      	adds	r7, #8
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b082      	sub	sp, #8
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800986a:	2001      	movs	r0, #1
 800986c:	f000 fd1e 	bl	800a2ac <UTIL_SEQ_WaitEvt>
  return;
 8009870:	bf00      	nop
}
 8009872:	3708      	adds	r7, #8
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	3308      	adds	r3, #8
 800988a:	4618      	mov	r0, r3
 800988c:	f7fe f91c 	bl	8007ac8 <SVCCTL_UserEvtRx>
 8009890:	4603      	mov	r3, r0
 8009892:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8009894:	7afb      	ldrb	r3, [r7, #11]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d003      	beq.n	80098a2 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2201      	movs	r2, #1
 800989e:	701a      	strb	r2, [r3, #0]
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 80098a0:	e003      	b.n	80098aa <BLE_UserEvtRx+0x32>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2200      	movs	r2, #0
 80098a6:	701a      	strb	r2, [r3, #0]
  return;
 80098a8:	bf00      	nop
}
 80098aa:	3710      	adds	r7, #16
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	4603      	mov	r3, r0
 80098b8:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 80098ba:	79fb      	ldrb	r3, [r7, #7]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d002      	beq.n	80098c6 <BLE_StatusNot+0x16>
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d006      	beq.n	80098d2 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 80098c4:	e00b      	b.n	80098de <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80098c6:	2303      	movs	r3, #3
 80098c8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80098ca:	68f8      	ldr	r0, [r7, #12]
 80098cc:	f000 fc8e 	bl	800a1ec <UTIL_SEQ_PauseTask>
      break;
 80098d0:	e005      	b.n	80098de <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80098d2:	2303      	movs	r3, #3
 80098d4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80098d6:	68f8      	ldr	r0, [r7, #12]
 80098d8:	f000 fca8 	bl	800a22c <UTIL_SEQ_ResumeTask>
      break;
 80098dc:	bf00      	nop
  }
  return;
 80098de:	bf00      	nop
}
 80098e0:	3710      	adds	r7, #16
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <Custom_APP_Notification>:
  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
}

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 80098e6:	b480      	push	{r7}
 80098e8:	b083      	sub	sp, #12
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch(pNotification->Custom_Evt_Opcode)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d002      	beq.n	80098fc <Custom_APP_Notification+0x16>
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d002      	beq.n	8009900 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 80098fa:	e002      	b.n	8009902 <Custom_APP_Notification+0x1c>
      break;
 80098fc:	bf00      	nop
 80098fe:	e000      	b.n	8009902 <Custom_APP_Notification+0x1c>
      break;
 8009900:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8009902:	bf00      	nop
}
 8009904:	370c      	adds	r7, #12
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr

0800990e <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800990e:	b480      	push	{r7}
 8009910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8009912:	bf00      	nop
}
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr

0800991c <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800991c:	b480      	push	{r7}
 800991e:	b08b      	sub	sp, #44	; 0x2c
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8009924:	2300      	movs	r3, #0
 8009926:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	3301      	adds	r3, #1
 800992e:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8009930:	6a3b      	ldr	r3, [r7, #32]
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	2bff      	cmp	r3, #255	; 0xff
 8009936:	d11b      	bne.n	8009970 <Custom_STM_Event_Handler+0x54>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8009938:	6a3b      	ldr	r3, [r7, #32]
 800993a:	3302      	adds	r3, #2
 800993c:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 800993e:	69fb      	ldr	r3, [r7, #28]
 8009940:	881b      	ldrh	r3, [r3, #0]
 8009942:	b29b      	uxth	r3, r3
 8009944:	f640 4214 	movw	r2, #3092	; 0xc14
 8009948:	4293      	cmp	r3, r2
 800994a:	d00b      	beq.n	8009964 <Custom_STM_Event_Handler+0x48>
 800994c:	f640 4214 	movw	r2, #3092	; 0xc14
 8009950:	4293      	cmp	r3, r2
 8009952:	dc09      	bgt.n	8009968 <Custom_STM_Event_Handler+0x4c>
 8009954:	f640 4201 	movw	r2, #3073	; 0xc01
 8009958:	4293      	cmp	r3, r2
 800995a:	d007      	beq.n	800996c <Custom_STM_Event_Handler+0x50>
 800995c:	f640 4213 	movw	r2, #3091	; 0xc13
 8009960:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 8009962:	e004      	b.n	800996e <Custom_STM_Event_Handler+0x52>
          break;
 8009964:	bf00      	nop
 8009966:	e004      	b.n	8009972 <Custom_STM_Event_Handler+0x56>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8009968:	bf00      	nop
 800996a:	e002      	b.n	8009972 <Custom_STM_Event_Handler+0x56>
          break;
 800996c:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800996e:	e000      	b.n	8009972 <Custom_STM_Event_Handler+0x56>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8009970:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8009972:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 8009976:	4618      	mov	r0, r3
 8009978:	372c      	adds	r7, #44	; 0x2c
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr
	...

08009984 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b08a      	sub	sp, #40	; 0x28
 8009988:	af06      	add	r7, sp, #24
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800998a:	4831      	ldr	r0, [pc, #196]	; (8009a50 <SVCCTL_InitCustomSvc+0xcc>)
 800998c:	f7fe f882 	bl	8007a94 <SVCCTL_RegisterSvcHandler>
   * service_max_attribute_record = 1 for BLE_CUSTOM_SRV +
   *                                2 for BLE_CHAR +
   *                              = 3
   */

  COPY_BLE_CUSTOM_SRV_UUID(uuid.Char_UUID_128);
 8009990:	238f      	movs	r3, #143	; 0x8f
 8009992:	703b      	strb	r3, [r7, #0]
 8009994:	23e5      	movs	r3, #229	; 0xe5
 8009996:	707b      	strb	r3, [r7, #1]
 8009998:	23b3      	movs	r3, #179	; 0xb3
 800999a:	70bb      	strb	r3, [r7, #2]
 800999c:	23d5      	movs	r3, #213	; 0xd5
 800999e:	70fb      	strb	r3, [r7, #3]
 80099a0:	232e      	movs	r3, #46	; 0x2e
 80099a2:	713b      	strb	r3, [r7, #4]
 80099a4:	237f      	movs	r3, #127	; 0x7f
 80099a6:	717b      	strb	r3, [r7, #5]
 80099a8:	234a      	movs	r3, #74	; 0x4a
 80099aa:	71bb      	strb	r3, [r7, #6]
 80099ac:	2398      	movs	r3, #152	; 0x98
 80099ae:	71fb      	strb	r3, [r7, #7]
 80099b0:	232a      	movs	r3, #42	; 0x2a
 80099b2:	723b      	strb	r3, [r7, #8]
 80099b4:	2348      	movs	r3, #72	; 0x48
 80099b6:	727b      	strb	r3, [r7, #9]
 80099b8:	237a      	movs	r3, #122	; 0x7a
 80099ba:	72bb      	strb	r3, [r7, #10]
 80099bc:	23cc      	movs	r3, #204	; 0xcc
 80099be:	72fb      	strb	r3, [r7, #11]
 80099c0:	2300      	movs	r3, #0
 80099c2:	733b      	strb	r3, [r7, #12]
 80099c4:	2300      	movs	r3, #0
 80099c6:	737b      	strb	r3, [r7, #13]
 80099c8:	2300      	movs	r3, #0
 80099ca:	73bb      	strb	r3, [r7, #14]
 80099cc:	2300      	movs	r3, #0
 80099ce:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_service(UUID_TYPE_128,
 80099d0:	4639      	mov	r1, r7
 80099d2:	4b20      	ldr	r3, [pc, #128]	; (8009a54 <SVCCTL_InitCustomSvc+0xd0>)
 80099d4:	9300      	str	r3, [sp, #0]
 80099d6:	2303      	movs	r3, #3
 80099d8:	2201      	movs	r2, #1
 80099da:	2002      	movs	r0, #2
 80099dc:	f7fd fbd6 	bl	800718c <aci_gatt_add_service>
                       &(CustomContext.CustomBle_Custom_SrvHdle));

  /**
   *  BLE_CHAR
   */
  COPY_BLE_CHAR_UUID(uuid.Char_UUID_128);
 80099e0:	2319      	movs	r3, #25
 80099e2:	703b      	strb	r3, [r7, #0]
 80099e4:	23ed      	movs	r3, #237	; 0xed
 80099e6:	707b      	strb	r3, [r7, #1]
 80099e8:	2382      	movs	r3, #130	; 0x82
 80099ea:	70bb      	strb	r3, [r7, #2]
 80099ec:	23ae      	movs	r3, #174	; 0xae
 80099ee:	70fb      	strb	r3, [r7, #3]
 80099f0:	23ed      	movs	r3, #237	; 0xed
 80099f2:	713b      	strb	r3, [r7, #4]
 80099f4:	2321      	movs	r3, #33	; 0x21
 80099f6:	717b      	strb	r3, [r7, #5]
 80099f8:	234c      	movs	r3, #76	; 0x4c
 80099fa:	71bb      	strb	r3, [r7, #6]
 80099fc:	239d      	movs	r3, #157	; 0x9d
 80099fe:	71fb      	strb	r3, [r7, #7]
 8009a00:	2341      	movs	r3, #65	; 0x41
 8009a02:	723b      	strb	r3, [r7, #8]
 8009a04:	2345      	movs	r3, #69	; 0x45
 8009a06:	727b      	strb	r3, [r7, #9]
 8009a08:	2322      	movs	r3, #34	; 0x22
 8009a0a:	72bb      	strb	r3, [r7, #10]
 8009a0c:	238e      	movs	r3, #142	; 0x8e
 8009a0e:	72fb      	strb	r3, [r7, #11]
 8009a10:	2300      	movs	r3, #0
 8009a12:	733b      	strb	r3, [r7, #12]
 8009a14:	2300      	movs	r3, #0
 8009a16:	737b      	strb	r3, [r7, #13]
 8009a18:	2300      	movs	r3, #0
 8009a1a:	73bb      	strb	r3, [r7, #14]
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_char(CustomContext.CustomBle_Custom_SrvHdle,
 8009a20:	4b0c      	ldr	r3, [pc, #48]	; (8009a54 <SVCCTL_InitCustomSvc+0xd0>)
 8009a22:	8818      	ldrh	r0, [r3, #0]
 8009a24:	2301      	movs	r3, #1
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	463a      	mov	r2, r7
 8009a2a:	490b      	ldr	r1, [pc, #44]	; (8009a58 <SVCCTL_InitCustomSvc+0xd4>)
 8009a2c:	9105      	str	r1, [sp, #20]
 8009a2e:	2100      	movs	r1, #0
 8009a30:	9104      	str	r1, [sp, #16]
 8009a32:	2110      	movs	r1, #16
 8009a34:	9103      	str	r1, [sp, #12]
 8009a36:	2100      	movs	r1, #0
 8009a38:	9102      	str	r1, [sp, #8]
 8009a3a:	2100      	movs	r1, #0
 8009a3c:	9101      	str	r1, [sp, #4]
 8009a3e:	2102      	movs	r1, #2
 8009a40:	9100      	str	r1, [sp, #0]
 8009a42:	2102      	movs	r1, #2
 8009a44:	f7fd fc51 	bl	80072ea <aci_gatt_add_char>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8009a48:	bf00      	nop
}
 8009a4a:	3710      	adds	r7, #16
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}
 8009a50:	0800991d 	.word	0x0800991d
 8009a54:	2000015c 	.word	0x2000015c
 8009a58:	2000015e 	.word	0x2000015e

08009a5c <LL_PWR_EnableBootC2>:
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8009a60:	4b05      	ldr	r3, [pc, #20]	; (8009a78 <LL_PWR_EnableBootC2+0x1c>)
 8009a62:	68db      	ldr	r3, [r3, #12]
 8009a64:	4a04      	ldr	r2, [pc, #16]	; (8009a78 <LL_PWR_EnableBootC2+0x1c>)
 8009a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a6a:	60d3      	str	r3, [r2, #12]
}
 8009a6c:	bf00      	nop
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop
 8009a78:	58000400 	.word	0x58000400

08009a7c <LL_C2_EXTI_EnableEvent_32_63>:
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8009a84:	4b06      	ldr	r3, [pc, #24]	; (8009aa0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8009a86:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8009a8a:	4905      	ldr	r1, [pc, #20]	; (8009aa0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8009a94:	bf00      	nop
 8009a96:	370c      	adds	r7, #12
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr
 8009aa0:	58000800 	.word	0x58000800

08009aa4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b083      	sub	sp, #12
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8009aac:	4b05      	ldr	r3, [pc, #20]	; (8009ac4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009aae:	6a1a      	ldr	r2, [r3, #32]
 8009ab0:	4904      	ldr	r1, [pc, #16]	; (8009ac4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	620b      	str	r3, [r1, #32]
}
 8009ab8:	bf00      	nop
 8009aba:	370c      	adds	r7, #12
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr
 8009ac4:	58000800 	.word	0x58000800

08009ac8 <LL_AHB3_GRP1_EnableClock>:
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8009ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ad4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009ad6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4313      	orrs	r3, r2
 8009ade:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8009ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ae4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	4013      	ands	r3, r2
 8009aea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009aec:	68fb      	ldr	r3, [r7, #12]
}
 8009aee:	bf00      	nop
 8009af0:	3714      	adds	r7, #20
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr

08009afa <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8009afa:	b480      	push	{r7}
 8009afc:	b085      	sub	sp, #20
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8009b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b06:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8009b0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	4313      	orrs	r3, r2
 8009b12:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8009b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b1a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	4013      	ands	r3, r2
 8009b22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009b24:	68fb      	ldr	r3, [r7, #12]
}
 8009b26:	bf00      	nop
 8009b28:	3714      	adds	r7, #20
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr

08009b32 <LL_C1_IPCC_EnableIT_TXF>:
{
 8009b32:	b480      	push	{r7}
 8009b34:	b083      	sub	sp, #12
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	601a      	str	r2, [r3, #0]
}
 8009b46:	bf00      	nop
 8009b48:	370c      	adds	r7, #12
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b50:	4770      	bx	lr

08009b52 <LL_C1_IPCC_EnableIT_RXO>:
{
 8009b52:	b480      	push	{r7}
 8009b54:	b083      	sub	sp, #12
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f043 0201 	orr.w	r2, r3, #1
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	601a      	str	r2, [r3, #0]
}
 8009b66:	bf00      	nop
 8009b68:	370c      	adds	r7, #12
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr

08009b72 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8009b72:	b480      	push	{r7}
 8009b74:	b083      	sub	sp, #12
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
 8009b7a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	685a      	ldr	r2, [r3, #4]
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	041b      	lsls	r3, r3, #16
 8009b84:	43db      	mvns	r3, r3
 8009b86:	401a      	ands	r2, r3
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	605a      	str	r2, [r3, #4]
}
 8009b8c:	bf00      	nop
 8009b8e:	370c      	adds	r7, #12
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	685a      	ldr	r2, [r3, #4]
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	041b      	lsls	r3, r3, #16
 8009baa:	431a      	orrs	r2, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	605a      	str	r2, [r3, #4]
}
 8009bb0:	bf00      	nop
 8009bb2:	370c      	adds	r7, #12
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr

08009bbc <LL_C1_IPCC_EnableReceiveChannel>:
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b083      	sub	sp, #12
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	685a      	ldr	r2, [r3, #4]
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	43db      	mvns	r3, r3
 8009bce:	401a      	ands	r2, r3
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	605a      	str	r2, [r3, #4]
}
 8009bd4:	bf00      	nop
 8009bd6:	370c      	adds	r7, #12
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8009be0:	b480      	push	{r7}
 8009be2:	b083      	sub	sp, #12
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	683a      	ldr	r2, [r7, #0]
 8009bee:	609a      	str	r2, [r3, #8]
}
 8009bf0:	bf00      	nop
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <LL_C1_IPCC_SetFlag_CHx>:
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	041a      	lsls	r2, r3, #16
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	609a      	str	r2, [r3, #8]
}
 8009c0e:	bf00      	nop
 8009c10:	370c      	adds	r7, #12
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr

08009c1a <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8009c1a:	b480      	push	{r7}
 8009c1c:	b083      	sub	sp, #12
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
 8009c22:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	68da      	ldr	r2, [r3, #12]
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	4013      	ands	r3, r2
 8009c2c:	683a      	ldr	r2, [r7, #0]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d101      	bne.n	8009c36 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8009c32:	2301      	movs	r3, #1
 8009c34:	e000      	b.n	8009c38 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8009c36:	2300      	movs	r3, #0
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	69da      	ldr	r2, [r3, #28]
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	4013      	ands	r3, r2
 8009c56:	683a      	ldr	r2, [r7, #0]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d101      	bne.n	8009c60 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	e000      	b.n	8009c62 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8009c60:	2300      	movs	r3, #0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	370c      	adds	r7, #12
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr
	...

08009c70 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8009c74:	2102      	movs	r1, #2
 8009c76:	4819      	ldr	r0, [pc, #100]	; (8009cdc <HW_IPCC_Rx_Handler+0x6c>)
 8009c78:	f7ff ffe4 	bl	8009c44 <LL_C2_IPCC_IsActiveFlag_CHx>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d009      	beq.n	8009c96 <HW_IPCC_Rx_Handler+0x26>
 8009c82:	4b16      	ldr	r3, [pc, #88]	; (8009cdc <HW_IPCC_Rx_Handler+0x6c>)
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	43db      	mvns	r3, r3
 8009c88:	f003 0302 	and.w	r3, r3, #2
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d002      	beq.n	8009c96 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8009c90:	f000 f8da 	bl	8009e48 <HW_IPCC_SYS_EvtHandler>
 8009c94:	e01f      	b.n	8009cd6 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8009c96:	2101      	movs	r1, #1
 8009c98:	4810      	ldr	r0, [pc, #64]	; (8009cdc <HW_IPCC_Rx_Handler+0x6c>)
 8009c9a:	f7ff ffd3 	bl	8009c44 <LL_C2_IPCC_IsActiveFlag_CHx>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d008      	beq.n	8009cb6 <HW_IPCC_Rx_Handler+0x46>
 8009ca4:	4b0d      	ldr	r3, [pc, #52]	; (8009cdc <HW_IPCC_Rx_Handler+0x6c>)
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	f003 0301 	and.w	r3, r3, #1
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d102      	bne.n	8009cb6 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8009cb0:	f000 f88e 	bl	8009dd0 <HW_IPCC_BLE_EvtHandler>
 8009cb4:	e00f      	b.n	8009cd6 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8009cb6:	2108      	movs	r1, #8
 8009cb8:	4808      	ldr	r0, [pc, #32]	; (8009cdc <HW_IPCC_Rx_Handler+0x6c>)
 8009cba:	f7ff ffc3 	bl	8009c44 <LL_C2_IPCC_IsActiveFlag_CHx>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d009      	beq.n	8009cd8 <HW_IPCC_Rx_Handler+0x68>
 8009cc4:	4b05      	ldr	r3, [pc, #20]	; (8009cdc <HW_IPCC_Rx_Handler+0x6c>)
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	43db      	mvns	r3, r3
 8009cca:	f003 0308 	and.w	r3, r3, #8
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d002      	beq.n	8009cd8 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8009cd2:	f000 f905 	bl	8009ee0 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8009cd6:	bf00      	nop
 8009cd8:	bf00      	nop
}
 8009cda:	bd80      	pop	{r7, pc}
 8009cdc:	58000c00 	.word	0x58000c00

08009ce0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8009ce4:	2102      	movs	r1, #2
 8009ce6:	481a      	ldr	r0, [pc, #104]	; (8009d50 <HW_IPCC_Tx_Handler+0x70>)
 8009ce8:	f7ff ff97 	bl	8009c1a <LL_C1_IPCC_IsActiveFlag_CHx>
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d109      	bne.n	8009d06 <HW_IPCC_Tx_Handler+0x26>
 8009cf2:	4b17      	ldr	r3, [pc, #92]	; (8009d50 <HW_IPCC_Tx_Handler+0x70>)
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	43db      	mvns	r3, r3
 8009cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d002      	beq.n	8009d06 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8009d00:	f000 f896 	bl	8009e30 <HW_IPCC_SYS_CmdEvtHandler>
 8009d04:	e020      	b.n	8009d48 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8009d06:	2108      	movs	r1, #8
 8009d08:	4811      	ldr	r0, [pc, #68]	; (8009d50 <HW_IPCC_Tx_Handler+0x70>)
 8009d0a:	f7ff ff86 	bl	8009c1a <LL_C1_IPCC_IsActiveFlag_CHx>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d109      	bne.n	8009d28 <HW_IPCC_Tx_Handler+0x48>
 8009d14:	4b0e      	ldr	r3, [pc, #56]	; (8009d50 <HW_IPCC_Tx_Handler+0x70>)
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	43db      	mvns	r3, r3
 8009d1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d002      	beq.n	8009d28 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 8009d22:	f000 f8bf 	bl	8009ea4 <HW_IPCC_MM_FreeBufHandler>
 8009d26:	e00f      	b.n	8009d48 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8009d28:	2120      	movs	r1, #32
 8009d2a:	4809      	ldr	r0, [pc, #36]	; (8009d50 <HW_IPCC_Tx_Handler+0x70>)
 8009d2c:	f7ff ff75 	bl	8009c1a <LL_C1_IPCC_IsActiveFlag_CHx>
 8009d30:	4603      	mov	r3, r0
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d109      	bne.n	8009d4a <HW_IPCC_Tx_Handler+0x6a>
 8009d36:	4b06      	ldr	r3, [pc, #24]	; (8009d50 <HW_IPCC_Tx_Handler+0x70>)
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	43db      	mvns	r3, r3
 8009d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d002      	beq.n	8009d4a <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8009d44:	f000 f850 	bl	8009de8 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8009d48:	bf00      	nop
 8009d4a:	bf00      	nop
}
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	58000c00 	.word	0x58000c00

08009d54 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8009d58:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009d5c:	f7ff fecd 	bl	8009afa <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8009d60:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009d64:	f7ff fe8a 	bl	8009a7c <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8009d68:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009d6c:	f7ff fe9a 	bl	8009aa4 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8009d70:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8009d72:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8009d74:	f7ff fe72 	bl	8009a5c <LL_PWR_EnableBootC2>

  return;
 8009d78:	bf00      	nop
}
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8009d80:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009d84:	f7ff fea0 	bl	8009ac8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8009d88:	4806      	ldr	r0, [pc, #24]	; (8009da4 <HW_IPCC_Init+0x28>)
 8009d8a:	f7ff fee2 	bl	8009b52 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8009d8e:	4805      	ldr	r0, [pc, #20]	; (8009da4 <HW_IPCC_Init+0x28>)
 8009d90:	f7ff fecf 	bl	8009b32 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8009d94:	202c      	movs	r0, #44	; 0x2c
 8009d96:	f7f8 fe00 	bl	800299a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8009d9a:	202d      	movs	r0, #45	; 0x2d
 8009d9c:	f7f8 fdfd 	bl	800299a <HAL_NVIC_EnableIRQ>

  return;
 8009da0:	bf00      	nop
}
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	58000c00 	.word	0x58000c00

08009da8 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8009dac:	2101      	movs	r1, #1
 8009dae:	4802      	ldr	r0, [pc, #8]	; (8009db8 <HW_IPCC_BLE_Init+0x10>)
 8009db0:	f7ff ff04 	bl	8009bbc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009db4:	bf00      	nop
}
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	58000c00 	.word	0x58000c00

08009dbc <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8009dc0:	2101      	movs	r1, #1
 8009dc2:	4802      	ldr	r0, [pc, #8]	; (8009dcc <HW_IPCC_BLE_SendCmd+0x10>)
 8009dc4:	f7ff ff1a 	bl	8009bfc <LL_C1_IPCC_SetFlag_CHx>

  return;
 8009dc8:	bf00      	nop
}
 8009dca:	bd80      	pop	{r7, pc}
 8009dcc:	58000c00 	.word	0x58000c00

08009dd0 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8009dd4:	f7fe fb18 	bl	8008408 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8009dd8:	2101      	movs	r1, #1
 8009dda:	4802      	ldr	r0, [pc, #8]	; (8009de4 <HW_IPCC_BLE_EvtHandler+0x14>)
 8009ddc:	f7ff ff00 	bl	8009be0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009de0:	bf00      	nop
}
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	58000c00 	.word	0x58000c00

08009de8 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8009dec:	2120      	movs	r1, #32
 8009dee:	4803      	ldr	r0, [pc, #12]	; (8009dfc <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8009df0:	f7ff fed2 	bl	8009b98 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8009df4:	f7fe fb38 	bl	8008468 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8009df8:	bf00      	nop
}
 8009dfa:	bd80      	pop	{r7, pc}
 8009dfc:	58000c00 	.word	0x58000c00

08009e00 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009e04:	2102      	movs	r1, #2
 8009e06:	4802      	ldr	r0, [pc, #8]	; (8009e10 <HW_IPCC_SYS_Init+0x10>)
 8009e08:	f7ff fed8 	bl	8009bbc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009e0c:	bf00      	nop
}
 8009e0e:	bd80      	pop	{r7, pc}
 8009e10:	58000c00 	.word	0x58000c00

08009e14 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009e18:	2102      	movs	r1, #2
 8009e1a:	4804      	ldr	r0, [pc, #16]	; (8009e2c <HW_IPCC_SYS_SendCmd+0x18>)
 8009e1c:	f7ff feee 	bl	8009bfc <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009e20:	2102      	movs	r1, #2
 8009e22:	4802      	ldr	r0, [pc, #8]	; (8009e2c <HW_IPCC_SYS_SendCmd+0x18>)
 8009e24:	f7ff fea5 	bl	8009b72 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8009e28:	bf00      	nop
}
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	58000c00 	.word	0x58000c00

08009e30 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009e34:	2102      	movs	r1, #2
 8009e36:	4803      	ldr	r0, [pc, #12]	; (8009e44 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8009e38:	f7ff feae 	bl	8009b98 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8009e3c:	f7fe fb64 	bl	8008508 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8009e40:	bf00      	nop
}
 8009e42:	bd80      	pop	{r7, pc}
 8009e44:	58000c00 	.word	0x58000c00

08009e48 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8009e4c:	f7fe fb72 	bl	8008534 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009e50:	2102      	movs	r1, #2
 8009e52:	4802      	ldr	r0, [pc, #8]	; (8009e5c <HW_IPCC_SYS_EvtHandler+0x14>)
 8009e54:	f7ff fec4 	bl	8009be0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009e58:	bf00      	nop
}
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	58000c00 	.word	0x58000c00

08009e60 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8009e68:	2108      	movs	r1, #8
 8009e6a:	480c      	ldr	r0, [pc, #48]	; (8009e9c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009e6c:	f7ff fed5 	bl	8009c1a <LL_C1_IPCC_IsActiveFlag_CHx>
 8009e70:	4603      	mov	r3, r0
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d007      	beq.n	8009e86 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8009e76:	4a0a      	ldr	r2, [pc, #40]	; (8009ea0 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009e7c:	2108      	movs	r1, #8
 8009e7e:	4807      	ldr	r0, [pc, #28]	; (8009e9c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009e80:	f7ff fe77 	bl	8009b72 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8009e84:	e006      	b.n	8009e94 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009e8a:	2108      	movs	r1, #8
 8009e8c:	4803      	ldr	r0, [pc, #12]	; (8009e9c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009e8e:	f7ff feb5 	bl	8009bfc <LL_C1_IPCC_SetFlag_CHx>
  return;
 8009e92:	bf00      	nop
}
 8009e94:	3708      	adds	r7, #8
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	58000c00 	.word	0x58000c00
 8009ea0:	200012b8 	.word	0x200012b8

08009ea4 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009ea8:	2108      	movs	r1, #8
 8009eaa:	4806      	ldr	r0, [pc, #24]	; (8009ec4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8009eac:	f7ff fe74 	bl	8009b98 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8009eb0:	4b05      	ldr	r3, [pc, #20]	; (8009ec8 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009eb6:	2108      	movs	r1, #8
 8009eb8:	4802      	ldr	r0, [pc, #8]	; (8009ec4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8009eba:	f7ff fe9f 	bl	8009bfc <LL_C1_IPCC_SetFlag_CHx>

  return;
 8009ebe:	bf00      	nop
}
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	58000c00 	.word	0x58000c00
 8009ec8:	200012b8 	.word	0x200012b8

08009ecc <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009ed0:	2108      	movs	r1, #8
 8009ed2:	4802      	ldr	r0, [pc, #8]	; (8009edc <HW_IPCC_TRACES_Init+0x10>)
 8009ed4:	f7ff fe72 	bl	8009bbc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009ed8:	bf00      	nop
}
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	58000c00 	.word	0x58000c00

08009ee0 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8009ee4:	f7fe fbce 	bl	8008684 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009ee8:	2108      	movs	r1, #8
 8009eea:	4802      	ldr	r0, [pc, #8]	; (8009ef4 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8009eec:	f7ff fe78 	bl	8009be0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009ef0:	bf00      	nop
}
 8009ef2:	bd80      	pop	{r7, pc}
 8009ef4:	58000c00 	.word	0x58000c00

08009ef8 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8009ef8:	b480      	push	{r7}
 8009efa:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8009efc:	4b05      	ldr	r3, [pc, #20]	; (8009f14 <UTIL_LPM_Init+0x1c>)
 8009efe:	2200      	movs	r2, #0
 8009f00:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8009f02:	4b05      	ldr	r3, [pc, #20]	; (8009f18 <UTIL_LPM_Init+0x20>)
 8009f04:	2200      	movs	r2, #0
 8009f06:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8009f08:	bf00      	nop
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop
 8009f14:	200012bc 	.word	0x200012bc
 8009f18:	200012c0 	.word	0x200012c0

08009f1c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b087      	sub	sp, #28
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	460b      	mov	r3, r1
 8009f26:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f28:	f3ef 8310 	mrs	r3, PRIMASK
 8009f2c:	613b      	str	r3, [r7, #16]
  return(result);
 8009f2e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8009f30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f32:	b672      	cpsid	i
}
 8009f34:	bf00      	nop
  
  switch(state)
 8009f36:	78fb      	ldrb	r3, [r7, #3]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d008      	beq.n	8009f4e <UTIL_LPM_SetOffMode+0x32>
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d10e      	bne.n	8009f5e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8009f40:	4b0d      	ldr	r3, [pc, #52]	; (8009f78 <UTIL_LPM_SetOffMode+0x5c>)
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	4313      	orrs	r3, r2
 8009f48:	4a0b      	ldr	r2, [pc, #44]	; (8009f78 <UTIL_LPM_SetOffMode+0x5c>)
 8009f4a:	6013      	str	r3, [r2, #0]
      break;
 8009f4c:	e008      	b.n	8009f60 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	43da      	mvns	r2, r3
 8009f52:	4b09      	ldr	r3, [pc, #36]	; (8009f78 <UTIL_LPM_SetOffMode+0x5c>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4013      	ands	r3, r2
 8009f58:	4a07      	ldr	r2, [pc, #28]	; (8009f78 <UTIL_LPM_SetOffMode+0x5c>)
 8009f5a:	6013      	str	r3, [r2, #0]
      break;
 8009f5c:	e000      	b.n	8009f60 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8009f5e:	bf00      	nop
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f383 8810 	msr	PRIMASK, r3
}
 8009f6a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8009f6c:	bf00      	nop
 8009f6e:	371c      	adds	r7, #28
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr
 8009f78:	200012c0 	.word	0x200012c0

08009f7c <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b08c      	sub	sp, #48	; 0x30
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8009f84:	4b6a      	ldr	r3, [pc, #424]	; (800a130 <UTIL_SEQ_Run+0x1b4>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	627b      	str	r3, [r7, #36]	; 0x24
  SuperMask &= Mask_bm;
 8009f8a:	4b69      	ldr	r3, [pc, #420]	; (800a130 <UTIL_SEQ_Run+0x1b4>)
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	4013      	ands	r3, r2
 8009f92:	4a67      	ldr	r2, [pc, #412]	; (800a130 <UTIL_SEQ_Run+0x1b4>)
 8009f94:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8009f96:	4b67      	ldr	r3, [pc, #412]	; (800a134 <UTIL_SEQ_Run+0x1b8>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8009f9c:	e086      	b.n	800a0ac <UTIL_SEQ_Run+0x130>
  {
    counter = 0U;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8009fa2:	e002      	b.n	8009faa <UTIL_SEQ_Run+0x2e>
    {
      counter++;
 8009fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8009faa:	4a63      	ldr	r2, [pc, #396]	; (800a138 <UTIL_SEQ_Run+0x1bc>)
 8009fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fae:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009fb2:	4b62      	ldr	r3, [pc, #392]	; (800a13c <UTIL_SEQ_Run+0x1c0>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	401a      	ands	r2, r3
 8009fb8:	4b5d      	ldr	r3, [pc, #372]	; (800a130 <UTIL_SEQ_Run+0x1b4>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4013      	ands	r3, r2
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d0f0      	beq.n	8009fa4 <UTIL_SEQ_Run+0x28>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 8009fc2:	4a5d      	ldr	r2, [pc, #372]	; (800a138 <UTIL_SEQ_Run+0x1bc>)
 8009fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009fca:	4b5c      	ldr	r3, [pc, #368]	; (800a13c <UTIL_SEQ_Run+0x1c0>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	401a      	ands	r2, r3
 8009fd0:	4b57      	ldr	r3, [pc, #348]	; (800a130 <UTIL_SEQ_Run+0x1b4>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4013      	ands	r3, r2
 8009fd6:	623b      	str	r3, [r7, #32]
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8009fd8:	4a57      	ldr	r2, [pc, #348]	; (800a138 <UTIL_SEQ_Run+0x1bc>)
 8009fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fdc:	00db      	lsls	r3, r3, #3
 8009fde:	4413      	add	r3, r2
 8009fe0:	685a      	ldr	r2, [r3, #4]
 8009fe2:	6a3b      	ldr	r3, [r7, #32]
 8009fe4:	4013      	ands	r3, r2
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d106      	bne.n	8009ff8 <UTIL_SEQ_Run+0x7c>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8009fea:	4a53      	ldr	r2, [pc, #332]	; (800a138 <UTIL_SEQ_Run+0x1bc>)
 8009fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fee:	00db      	lsls	r3, r3, #3
 8009ff0:	4413      	add	r3, r2
 8009ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ff6:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8009ff8:	4a4f      	ldr	r2, [pc, #316]	; (800a138 <UTIL_SEQ_Run+0x1bc>)
 8009ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ffc:	00db      	lsls	r3, r3, #3
 8009ffe:	4413      	add	r3, r2
 800a000:	685a      	ldr	r2, [r3, #4]
 800a002:	6a3b      	ldr	r3, [r7, #32]
 800a004:	4013      	ands	r3, r2
 800a006:	4618      	mov	r0, r3
 800a008:	f000 f9ac 	bl	800a364 <SEQ_BitPosition>
 800a00c:	4603      	mov	r3, r0
 800a00e:	461a      	mov	r2, r3
 800a010:	4b4b      	ldr	r3, [pc, #300]	; (800a140 <UTIL_SEQ_Run+0x1c4>)
 800a012:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800a014:	4a48      	ldr	r2, [pc, #288]	; (800a138 <UTIL_SEQ_Run+0x1bc>)
 800a016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a018:	00db      	lsls	r3, r3, #3
 800a01a:	4413      	add	r3, r2
 800a01c:	685a      	ldr	r2, [r3, #4]
 800a01e:	4b48      	ldr	r3, [pc, #288]	; (800a140 <UTIL_SEQ_Run+0x1c4>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2101      	movs	r1, #1
 800a024:	fa01 f303 	lsl.w	r3, r1, r3
 800a028:	43db      	mvns	r3, r3
 800a02a:	401a      	ands	r2, r3
 800a02c:	4942      	ldr	r1, [pc, #264]	; (800a138 <UTIL_SEQ_Run+0x1bc>)
 800a02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a030:	00db      	lsls	r3, r3, #3
 800a032:	440b      	add	r3, r1
 800a034:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a036:	f3ef 8310 	mrs	r3, PRIMASK
 800a03a:	617b      	str	r3, [r7, #20]
  return(result);
 800a03c:	697b      	ldr	r3, [r7, #20]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a03e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a040:	b672      	cpsid	i
}
 800a042:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800a044:	4b3e      	ldr	r3, [pc, #248]	; (800a140 <UTIL_SEQ_Run+0x1c4>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	2201      	movs	r2, #1
 800a04a:	fa02 f303 	lsl.w	r3, r2, r3
 800a04e:	43da      	mvns	r2, r3
 800a050:	4b38      	ldr	r3, [pc, #224]	; (800a134 <UTIL_SEQ_Run+0x1b8>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4013      	ands	r3, r2
 800a056:	4a37      	ldr	r2, [pc, #220]	; (800a134 <UTIL_SEQ_Run+0x1b8>)
 800a058:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a05a:	2302      	movs	r3, #2
 800a05c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a05e:	e013      	b.n	800a088 <UTIL_SEQ_Run+0x10c>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800a060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a062:	3b01      	subs	r3, #1
 800a064:	4a34      	ldr	r2, [pc, #208]	; (800a138 <UTIL_SEQ_Run+0x1bc>)
 800a066:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800a06a:	4b35      	ldr	r3, [pc, #212]	; (800a140 <UTIL_SEQ_Run+0x1c4>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	2201      	movs	r2, #1
 800a070:	fa02 f303 	lsl.w	r3, r2, r3
 800a074:	43da      	mvns	r2, r3
 800a076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a078:	3b01      	subs	r3, #1
 800a07a:	400a      	ands	r2, r1
 800a07c:	492e      	ldr	r1, [pc, #184]	; (800a138 <UTIL_SEQ_Run+0x1bc>)
 800a07e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a084:	3b01      	subs	r3, #1
 800a086:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d1e8      	bne.n	800a060 <UTIL_SEQ_Run+0xe4>
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	f383 8810 	msr	PRIMASK, r3
}
 800a098:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800a09a:	4b29      	ldr	r3, [pc, #164]	; (800a140 <UTIL_SEQ_Run+0x1c4>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4a29      	ldr	r2, [pc, #164]	; (800a144 <UTIL_SEQ_Run+0x1c8>)
 800a0a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0a4:	4798      	blx	r3
    
    local_taskset = TaskSet;
 800a0a6:	4b23      	ldr	r3, [pc, #140]	; (800a134 <UTIL_SEQ_Run+0x1b8>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800a0ac:	4b23      	ldr	r3, [pc, #140]	; (800a13c <UTIL_SEQ_Run+0x1c0>)
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b2:	401a      	ands	r2, r3
 800a0b4:	4b1e      	ldr	r3, [pc, #120]	; (800a130 <UTIL_SEQ_Run+0x1b4>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4013      	ands	r3, r2
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d007      	beq.n	800a0ce <UTIL_SEQ_Run+0x152>
 800a0be:	4b22      	ldr	r3, [pc, #136]	; (800a148 <UTIL_SEQ_Run+0x1cc>)
 800a0c0:	681a      	ldr	r2, [r3, #0]
 800a0c2:	4b22      	ldr	r3, [pc, #136]	; (800a14c <UTIL_SEQ_Run+0x1d0>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4013      	ands	r3, r2
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	f43f af68 	beq.w	8009f9e <UTIL_SEQ_Run+0x22>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800a0ce:	4b1c      	ldr	r3, [pc, #112]	; (800a140 <UTIL_SEQ_Run+0x1c4>)
 800a0d0:	f04f 32ff 	mov.w	r2, #4294967295
 800a0d4:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800a0d6:	f000 f937 	bl	800a348 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0da:	f3ef 8310 	mrs	r3, PRIMASK
 800a0de:	60fb      	str	r3, [r7, #12]
  return(result);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800a0e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800a0e4:	b672      	cpsid	i
}
 800a0e6:	bf00      	nop
  local_taskset = TaskSet;
 800a0e8:	4b12      	ldr	r3, [pc, #72]	; (800a134 <UTIL_SEQ_Run+0x1b8>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (!(((local_taskset & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800a0ee:	4b13      	ldr	r3, [pc, #76]	; (800a13c <UTIL_SEQ_Run+0x1c0>)
 800a0f0:	681a      	ldr	r2, [r3, #0]
 800a0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f4:	401a      	ands	r2, r3
 800a0f6:	4b0e      	ldr	r3, [pc, #56]	; (800a130 <UTIL_SEQ_Run+0x1b4>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4013      	ands	r3, r2
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d108      	bne.n	800a112 <UTIL_SEQ_Run+0x196>
 800a100:	4b11      	ldr	r3, [pc, #68]	; (800a148 <UTIL_SEQ_Run+0x1cc>)
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	4b11      	ldr	r3, [pc, #68]	; (800a14c <UTIL_SEQ_Run+0x1d0>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4013      	ands	r3, r2
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d101      	bne.n	800a112 <UTIL_SEQ_Run+0x196>
  {
	UTIL_SEQ_Idle( );
 800a10e:	f7f6 fe93 	bl	8000e38 <UTIL_SEQ_Idle>
 800a112:	69bb      	ldr	r3, [r7, #24]
 800a114:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	f383 8810 	msr	PRIMASK, r3
}
 800a11c:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 800a11e:	f000 f91a 	bl	800a356 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800a122:	4a03      	ldr	r2, [pc, #12]	; (800a130 <UTIL_SEQ_Run+0x1b4>)
 800a124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a126:	6013      	str	r3, [r2, #0]

  return;
 800a128:	bf00      	nop
}
 800a12a:	3730      	adds	r7, #48	; 0x30
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}
 800a130:	20000020 	.word	0x20000020
 800a134:	200012c4 	.word	0x200012c4
 800a138:	20001354 	.word	0x20001354
 800a13c:	2000001c 	.word	0x2000001c
 800a140:	200012d0 	.word	0x200012d0
 800a144:	200012d4 	.word	0x200012d4
 800a148:	200012c8 	.word	0x200012c8
 800a14c:	200012cc 	.word	0x200012cc

0800a150 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b088      	sub	sp, #32
 800a154:	af00      	add	r7, sp, #0
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a15c:	f3ef 8310 	mrs	r3, PRIMASK
 800a160:	617b      	str	r3, [r7, #20]
  return(result);
 800a162:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800a164:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a166:	b672      	cpsid	i
}
 800a168:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	f000 f8fa 	bl	800a364 <SEQ_BitPosition>
 800a170:	4603      	mov	r3, r0
 800a172:	4619      	mov	r1, r3
 800a174:	4a06      	ldr	r2, [pc, #24]	; (800a190 <UTIL_SEQ_RegTask+0x40>)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a17c:	69fb      	ldr	r3, [r7, #28]
 800a17e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a180:	69bb      	ldr	r3, [r7, #24]
 800a182:	f383 8810 	msr	PRIMASK, r3
}
 800a186:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800a188:	bf00      	nop
}
 800a18a:	3720      	adds	r7, #32
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	200012d4 	.word	0x200012d4

0800a194 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800a194:	b480      	push	{r7}
 800a196:	b087      	sub	sp, #28
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a19e:	f3ef 8310 	mrs	r3, PRIMASK
 800a1a2:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1a4:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a1a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1a8:	b672      	cpsid	i
}
 800a1aa:	bf00      	nop

  TaskSet |= TaskId_bm;
 800a1ac:	4b0d      	ldr	r3, [pc, #52]	; (800a1e4 <UTIL_SEQ_SetTask+0x50>)
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	4a0b      	ldr	r2, [pc, #44]	; (800a1e4 <UTIL_SEQ_SetTask+0x50>)
 800a1b6:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800a1b8:	4a0b      	ldr	r2, [pc, #44]	; (800a1e8 <UTIL_SEQ_SetTask+0x54>)
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	431a      	orrs	r2, r3
 800a1c4:	4908      	ldr	r1, [pc, #32]	; (800a1e8 <UTIL_SEQ_SetTask+0x54>)
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	f383 8810 	msr	PRIMASK, r3
}
 800a1d6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a1d8:	bf00      	nop
}
 800a1da:	371c      	adds	r7, #28
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr
 800a1e4:	200012c4 	.word	0x200012c4
 800a1e8:	20001354 	.word	0x20001354

0800a1ec <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b087      	sub	sp, #28
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1f4:	f3ef 8310 	mrs	r3, PRIMASK
 800a1f8:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a1fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1fe:	b672      	cpsid	i
}
 800a200:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	43da      	mvns	r2, r3
 800a206:	4b08      	ldr	r3, [pc, #32]	; (800a228 <UTIL_SEQ_PauseTask+0x3c>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4013      	ands	r3, r2
 800a20c:	4a06      	ldr	r2, [pc, #24]	; (800a228 <UTIL_SEQ_PauseTask+0x3c>)
 800a20e:	6013      	str	r3, [r2, #0]
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	f383 8810 	msr	PRIMASK, r3
}
 800a21a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a21c:	bf00      	nop
}
 800a21e:	371c      	adds	r7, #28
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr
 800a228:	2000001c 	.word	0x2000001c

0800a22c <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a22c:	b480      	push	{r7}
 800a22e:	b087      	sub	sp, #28
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a234:	f3ef 8310 	mrs	r3, PRIMASK
 800a238:	60fb      	str	r3, [r7, #12]
  return(result);
 800a23a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a23c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a23e:	b672      	cpsid	i
}
 800a240:	bf00      	nop

  TaskMask |= TaskId_bm;
 800a242:	4b09      	ldr	r3, [pc, #36]	; (800a268 <UTIL_SEQ_ResumeTask+0x3c>)
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	4313      	orrs	r3, r2
 800a24a:	4a07      	ldr	r2, [pc, #28]	; (800a268 <UTIL_SEQ_ResumeTask+0x3c>)
 800a24c:	6013      	str	r3, [r2, #0]
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	f383 8810 	msr	PRIMASK, r3
}
 800a258:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a25a:	bf00      	nop
}
 800a25c:	371c      	adds	r7, #28
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr
 800a266:	bf00      	nop
 800a268:	2000001c 	.word	0x2000001c

0800a26c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800a26c:	b480      	push	{r7}
 800a26e:	b087      	sub	sp, #28
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a274:	f3ef 8310 	mrs	r3, PRIMASK
 800a278:	60fb      	str	r3, [r7, #12]
  return(result);
 800a27a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a27c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a27e:	b672      	cpsid	i
}
 800a280:	bf00      	nop

  EvtSet |= EvtId_bm;
 800a282:	4b09      	ldr	r3, [pc, #36]	; (800a2a8 <UTIL_SEQ_SetEvt+0x3c>)
 800a284:	681a      	ldr	r2, [r3, #0]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	4313      	orrs	r3, r2
 800a28a:	4a07      	ldr	r2, [pc, #28]	; (800a2a8 <UTIL_SEQ_SetEvt+0x3c>)
 800a28c:	6013      	str	r3, [r2, #0]
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	f383 8810 	msr	PRIMASK, r3
}
 800a298:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a29a:	bf00      	nop
}
 800a29c:	371c      	adds	r7, #28
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr
 800a2a6:	bf00      	nop
 800a2a8:	200012c8 	.word	0x200012c8

0800a2ac <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b088      	sub	sp, #32
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800a2b4:	4b21      	ldr	r3, [pc, #132]	; (800a33c <UTIL_SEQ_WaitEvt+0x90>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800a2ba:	4b20      	ldr	r3, [pc, #128]	; (800a33c <UTIL_SEQ_WaitEvt+0x90>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2c2:	d102      	bne.n	800a2ca <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	61fb      	str	r3, [r7, #28]
 800a2c8:	e005      	b.n	800a2d6 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 800a2ca:	4b1c      	ldr	r3, [pc, #112]	; (800a33c <UTIL_SEQ_WaitEvt+0x90>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a2d4:	61fb      	str	r3, [r7, #28]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800a2d6:	4b1a      	ldr	r3, [pc, #104]	; (800a340 <UTIL_SEQ_WaitEvt+0x94>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800a2dc:	4a18      	ldr	r2, [pc, #96]	; (800a340 <UTIL_SEQ_WaitEvt+0x94>)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 800a2e2:	e005      	b.n	800a2f0 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 800a2e4:	4b16      	ldr	r3, [pc, #88]	; (800a340 <UTIL_SEQ_WaitEvt+0x94>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	69f8      	ldr	r0, [r7, #28]
 800a2ec:	f7f6 fdab 	bl	8000e46 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 800a2f0:	4b14      	ldr	r3, [pc, #80]	; (800a344 <UTIL_SEQ_WaitEvt+0x98>)
 800a2f2:	681a      	ldr	r2, [r3, #0]
 800a2f4:	4b12      	ldr	r3, [pc, #72]	; (800a340 <UTIL_SEQ_WaitEvt+0x94>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4013      	ands	r3, r2
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d0f2      	beq.n	800a2e4 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800a2fe:	4a0f      	ldr	r2, [pc, #60]	; (800a33c <UTIL_SEQ_WaitEvt+0x90>)
 800a300:	69bb      	ldr	r3, [r7, #24]
 800a302:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a304:	f3ef 8310 	mrs	r3, PRIMASK
 800a308:	60bb      	str	r3, [r7, #8]
  return(result);
 800a30a:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a30c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a30e:	b672      	cpsid	i
}
 800a310:	bf00      	nop

  EvtSet &= (~EvtWaited);
 800a312:	4b0b      	ldr	r3, [pc, #44]	; (800a340 <UTIL_SEQ_WaitEvt+0x94>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	43da      	mvns	r2, r3
 800a318:	4b0a      	ldr	r3, [pc, #40]	; (800a344 <UTIL_SEQ_WaitEvt+0x98>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4013      	ands	r3, r2
 800a31e:	4a09      	ldr	r2, [pc, #36]	; (800a344 <UTIL_SEQ_WaitEvt+0x98>)
 800a320:	6013      	str	r3, [r2, #0]
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f383 8810 	msr	PRIMASK, r3
}
 800a32c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800a32e:	4a04      	ldr	r2, [pc, #16]	; (800a340 <UTIL_SEQ_WaitEvt+0x94>)
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	6013      	str	r3, [r2, #0]

  return;
 800a334:	bf00      	nop
}
 800a336:	3720      	adds	r7, #32
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}
 800a33c:	200012d0 	.word	0x200012d0
 800a340:	200012cc 	.word	0x200012cc
 800a344:	200012c8 	.word	0x200012c8

0800a348 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800a348:	b480      	push	{r7}
 800a34a:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a34c:	bf00      	nop
}
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr

0800a356 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800a356:	b480      	push	{r7}
 800a358:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a35a:	bf00      	nop
}
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr

0800a364 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800a364:	b480      	push	{r7}
 800a366:	b085      	sub	sp, #20
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 800a36c:	2300      	movs	r3, #0
 800a36e:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	0c1b      	lsrs	r3, r3, #16
 800a374:	041b      	lsls	r3, r3, #16
 800a376:	2b00      	cmp	r3, #0
 800a378:	d104      	bne.n	800a384 <SEQ_BitPosition+0x20>
 800a37a:	2310      	movs	r3, #16
 800a37c:	73fb      	strb	r3, [r7, #15]
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	041b      	lsls	r3, r3, #16
 800a382:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d105      	bne.n	800a39a <SEQ_BitPosition+0x36>
 800a38e:	7bfb      	ldrb	r3, [r7, #15]
 800a390:	3308      	adds	r3, #8
 800a392:	73fb      	strb	r3, [r7, #15]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	021b      	lsls	r3, r3, #8
 800a398:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d105      	bne.n	800a3b0 <SEQ_BitPosition+0x4c>
 800a3a4:	7bfb      	ldrb	r3, [r7, #15]
 800a3a6:	3304      	adds	r3, #4
 800a3a8:	73fb      	strb	r3, [r7, #15]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	011b      	lsls	r3, r3, #4
 800a3ae:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	0f1b      	lsrs	r3, r3, #28
 800a3b4:	4a07      	ldr	r2, [pc, #28]	; (800a3d4 <SEQ_BitPosition+0x70>)
 800a3b6:	5cd2      	ldrb	r2, [r2, r3]
 800a3b8:	7bfb      	ldrb	r3, [r7, #15]
 800a3ba:	4413      	add	r3, r2
 800a3bc:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800a3be:	7bfb      	ldrb	r3, [r7, #15]
 800a3c0:	f1c3 031f 	rsb	r3, r3, #31
 800a3c4:	b2db      	uxtb	r3, r3
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3714      	adds	r7, #20
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr
 800a3d2:	bf00      	nop
 800a3d4:	0800bb64 	.word	0x0800bb64

0800a3d8 <__errno>:
 800a3d8:	4b01      	ldr	r3, [pc, #4]	; (800a3e0 <__errno+0x8>)
 800a3da:	6818      	ldr	r0, [r3, #0]
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop
 800a3e0:	20000024 	.word	0x20000024

0800a3e4 <__libc_init_array>:
 800a3e4:	b570      	push	{r4, r5, r6, lr}
 800a3e6:	4d0d      	ldr	r5, [pc, #52]	; (800a41c <__libc_init_array+0x38>)
 800a3e8:	4c0d      	ldr	r4, [pc, #52]	; (800a420 <__libc_init_array+0x3c>)
 800a3ea:	1b64      	subs	r4, r4, r5
 800a3ec:	10a4      	asrs	r4, r4, #2
 800a3ee:	2600      	movs	r6, #0
 800a3f0:	42a6      	cmp	r6, r4
 800a3f2:	d109      	bne.n	800a408 <__libc_init_array+0x24>
 800a3f4:	4d0b      	ldr	r5, [pc, #44]	; (800a424 <__libc_init_array+0x40>)
 800a3f6:	4c0c      	ldr	r4, [pc, #48]	; (800a428 <__libc_init_array+0x44>)
 800a3f8:	f000 fffa 	bl	800b3f0 <_init>
 800a3fc:	1b64      	subs	r4, r4, r5
 800a3fe:	10a4      	asrs	r4, r4, #2
 800a400:	2600      	movs	r6, #0
 800a402:	42a6      	cmp	r6, r4
 800a404:	d105      	bne.n	800a412 <__libc_init_array+0x2e>
 800a406:	bd70      	pop	{r4, r5, r6, pc}
 800a408:	f855 3b04 	ldr.w	r3, [r5], #4
 800a40c:	4798      	blx	r3
 800a40e:	3601      	adds	r6, #1
 800a410:	e7ee      	b.n	800a3f0 <__libc_init_array+0xc>
 800a412:	f855 3b04 	ldr.w	r3, [r5], #4
 800a416:	4798      	blx	r3
 800a418:	3601      	adds	r6, #1
 800a41a:	e7f2      	b.n	800a402 <__libc_init_array+0x1e>
 800a41c:	0800bc14 	.word	0x0800bc14
 800a420:	0800bc14 	.word	0x0800bc14
 800a424:	0800bc14 	.word	0x0800bc14
 800a428:	0800bc18 	.word	0x0800bc18

0800a42c <memcpy>:
 800a42c:	440a      	add	r2, r1
 800a42e:	4291      	cmp	r1, r2
 800a430:	f100 33ff 	add.w	r3, r0, #4294967295
 800a434:	d100      	bne.n	800a438 <memcpy+0xc>
 800a436:	4770      	bx	lr
 800a438:	b510      	push	{r4, lr}
 800a43a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a43e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a442:	4291      	cmp	r1, r2
 800a444:	d1f9      	bne.n	800a43a <memcpy+0xe>
 800a446:	bd10      	pop	{r4, pc}

0800a448 <memset>:
 800a448:	4402      	add	r2, r0
 800a44a:	4603      	mov	r3, r0
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d100      	bne.n	800a452 <memset+0xa>
 800a450:	4770      	bx	lr
 800a452:	f803 1b01 	strb.w	r1, [r3], #1
 800a456:	e7f9      	b.n	800a44c <memset+0x4>

0800a458 <iprintf>:
 800a458:	b40f      	push	{r0, r1, r2, r3}
 800a45a:	4b0a      	ldr	r3, [pc, #40]	; (800a484 <iprintf+0x2c>)
 800a45c:	b513      	push	{r0, r1, r4, lr}
 800a45e:	681c      	ldr	r4, [r3, #0]
 800a460:	b124      	cbz	r4, 800a46c <iprintf+0x14>
 800a462:	69a3      	ldr	r3, [r4, #24]
 800a464:	b913      	cbnz	r3, 800a46c <iprintf+0x14>
 800a466:	4620      	mov	r0, r4
 800a468:	f000 fa5e 	bl	800a928 <__sinit>
 800a46c:	ab05      	add	r3, sp, #20
 800a46e:	9a04      	ldr	r2, [sp, #16]
 800a470:	68a1      	ldr	r1, [r4, #8]
 800a472:	9301      	str	r3, [sp, #4]
 800a474:	4620      	mov	r0, r4
 800a476:	f000 fc2f 	bl	800acd8 <_vfiprintf_r>
 800a47a:	b002      	add	sp, #8
 800a47c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a480:	b004      	add	sp, #16
 800a482:	4770      	bx	lr
 800a484:	20000024 	.word	0x20000024

0800a488 <_puts_r>:
 800a488:	b570      	push	{r4, r5, r6, lr}
 800a48a:	460e      	mov	r6, r1
 800a48c:	4605      	mov	r5, r0
 800a48e:	b118      	cbz	r0, 800a498 <_puts_r+0x10>
 800a490:	6983      	ldr	r3, [r0, #24]
 800a492:	b90b      	cbnz	r3, 800a498 <_puts_r+0x10>
 800a494:	f000 fa48 	bl	800a928 <__sinit>
 800a498:	69ab      	ldr	r3, [r5, #24]
 800a49a:	68ac      	ldr	r4, [r5, #8]
 800a49c:	b913      	cbnz	r3, 800a4a4 <_puts_r+0x1c>
 800a49e:	4628      	mov	r0, r5
 800a4a0:	f000 fa42 	bl	800a928 <__sinit>
 800a4a4:	4b2c      	ldr	r3, [pc, #176]	; (800a558 <_puts_r+0xd0>)
 800a4a6:	429c      	cmp	r4, r3
 800a4a8:	d120      	bne.n	800a4ec <_puts_r+0x64>
 800a4aa:	686c      	ldr	r4, [r5, #4]
 800a4ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4ae:	07db      	lsls	r3, r3, #31
 800a4b0:	d405      	bmi.n	800a4be <_puts_r+0x36>
 800a4b2:	89a3      	ldrh	r3, [r4, #12]
 800a4b4:	0598      	lsls	r0, r3, #22
 800a4b6:	d402      	bmi.n	800a4be <_puts_r+0x36>
 800a4b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4ba:	f000 fad3 	bl	800aa64 <__retarget_lock_acquire_recursive>
 800a4be:	89a3      	ldrh	r3, [r4, #12]
 800a4c0:	0719      	lsls	r1, r3, #28
 800a4c2:	d51d      	bpl.n	800a500 <_puts_r+0x78>
 800a4c4:	6923      	ldr	r3, [r4, #16]
 800a4c6:	b1db      	cbz	r3, 800a500 <_puts_r+0x78>
 800a4c8:	3e01      	subs	r6, #1
 800a4ca:	68a3      	ldr	r3, [r4, #8]
 800a4cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a4d0:	3b01      	subs	r3, #1
 800a4d2:	60a3      	str	r3, [r4, #8]
 800a4d4:	bb39      	cbnz	r1, 800a526 <_puts_r+0x9e>
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	da38      	bge.n	800a54c <_puts_r+0xc4>
 800a4da:	4622      	mov	r2, r4
 800a4dc:	210a      	movs	r1, #10
 800a4de:	4628      	mov	r0, r5
 800a4e0:	f000 f848 	bl	800a574 <__swbuf_r>
 800a4e4:	3001      	adds	r0, #1
 800a4e6:	d011      	beq.n	800a50c <_puts_r+0x84>
 800a4e8:	250a      	movs	r5, #10
 800a4ea:	e011      	b.n	800a510 <_puts_r+0x88>
 800a4ec:	4b1b      	ldr	r3, [pc, #108]	; (800a55c <_puts_r+0xd4>)
 800a4ee:	429c      	cmp	r4, r3
 800a4f0:	d101      	bne.n	800a4f6 <_puts_r+0x6e>
 800a4f2:	68ac      	ldr	r4, [r5, #8]
 800a4f4:	e7da      	b.n	800a4ac <_puts_r+0x24>
 800a4f6:	4b1a      	ldr	r3, [pc, #104]	; (800a560 <_puts_r+0xd8>)
 800a4f8:	429c      	cmp	r4, r3
 800a4fa:	bf08      	it	eq
 800a4fc:	68ec      	ldreq	r4, [r5, #12]
 800a4fe:	e7d5      	b.n	800a4ac <_puts_r+0x24>
 800a500:	4621      	mov	r1, r4
 800a502:	4628      	mov	r0, r5
 800a504:	f000 f888 	bl	800a618 <__swsetup_r>
 800a508:	2800      	cmp	r0, #0
 800a50a:	d0dd      	beq.n	800a4c8 <_puts_r+0x40>
 800a50c:	f04f 35ff 	mov.w	r5, #4294967295
 800a510:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a512:	07da      	lsls	r2, r3, #31
 800a514:	d405      	bmi.n	800a522 <_puts_r+0x9a>
 800a516:	89a3      	ldrh	r3, [r4, #12]
 800a518:	059b      	lsls	r3, r3, #22
 800a51a:	d402      	bmi.n	800a522 <_puts_r+0x9a>
 800a51c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a51e:	f000 faa2 	bl	800aa66 <__retarget_lock_release_recursive>
 800a522:	4628      	mov	r0, r5
 800a524:	bd70      	pop	{r4, r5, r6, pc}
 800a526:	2b00      	cmp	r3, #0
 800a528:	da04      	bge.n	800a534 <_puts_r+0xac>
 800a52a:	69a2      	ldr	r2, [r4, #24]
 800a52c:	429a      	cmp	r2, r3
 800a52e:	dc06      	bgt.n	800a53e <_puts_r+0xb6>
 800a530:	290a      	cmp	r1, #10
 800a532:	d004      	beq.n	800a53e <_puts_r+0xb6>
 800a534:	6823      	ldr	r3, [r4, #0]
 800a536:	1c5a      	adds	r2, r3, #1
 800a538:	6022      	str	r2, [r4, #0]
 800a53a:	7019      	strb	r1, [r3, #0]
 800a53c:	e7c5      	b.n	800a4ca <_puts_r+0x42>
 800a53e:	4622      	mov	r2, r4
 800a540:	4628      	mov	r0, r5
 800a542:	f000 f817 	bl	800a574 <__swbuf_r>
 800a546:	3001      	adds	r0, #1
 800a548:	d1bf      	bne.n	800a4ca <_puts_r+0x42>
 800a54a:	e7df      	b.n	800a50c <_puts_r+0x84>
 800a54c:	6823      	ldr	r3, [r4, #0]
 800a54e:	250a      	movs	r5, #10
 800a550:	1c5a      	adds	r2, r3, #1
 800a552:	6022      	str	r2, [r4, #0]
 800a554:	701d      	strb	r5, [r3, #0]
 800a556:	e7db      	b.n	800a510 <_puts_r+0x88>
 800a558:	0800bb98 	.word	0x0800bb98
 800a55c:	0800bbb8 	.word	0x0800bbb8
 800a560:	0800bb78 	.word	0x0800bb78

0800a564 <puts>:
 800a564:	4b02      	ldr	r3, [pc, #8]	; (800a570 <puts+0xc>)
 800a566:	4601      	mov	r1, r0
 800a568:	6818      	ldr	r0, [r3, #0]
 800a56a:	f7ff bf8d 	b.w	800a488 <_puts_r>
 800a56e:	bf00      	nop
 800a570:	20000024 	.word	0x20000024

0800a574 <__swbuf_r>:
 800a574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a576:	460e      	mov	r6, r1
 800a578:	4614      	mov	r4, r2
 800a57a:	4605      	mov	r5, r0
 800a57c:	b118      	cbz	r0, 800a586 <__swbuf_r+0x12>
 800a57e:	6983      	ldr	r3, [r0, #24]
 800a580:	b90b      	cbnz	r3, 800a586 <__swbuf_r+0x12>
 800a582:	f000 f9d1 	bl	800a928 <__sinit>
 800a586:	4b21      	ldr	r3, [pc, #132]	; (800a60c <__swbuf_r+0x98>)
 800a588:	429c      	cmp	r4, r3
 800a58a:	d12b      	bne.n	800a5e4 <__swbuf_r+0x70>
 800a58c:	686c      	ldr	r4, [r5, #4]
 800a58e:	69a3      	ldr	r3, [r4, #24]
 800a590:	60a3      	str	r3, [r4, #8]
 800a592:	89a3      	ldrh	r3, [r4, #12]
 800a594:	071a      	lsls	r2, r3, #28
 800a596:	d52f      	bpl.n	800a5f8 <__swbuf_r+0x84>
 800a598:	6923      	ldr	r3, [r4, #16]
 800a59a:	b36b      	cbz	r3, 800a5f8 <__swbuf_r+0x84>
 800a59c:	6923      	ldr	r3, [r4, #16]
 800a59e:	6820      	ldr	r0, [r4, #0]
 800a5a0:	1ac0      	subs	r0, r0, r3
 800a5a2:	6963      	ldr	r3, [r4, #20]
 800a5a4:	b2f6      	uxtb	r6, r6
 800a5a6:	4283      	cmp	r3, r0
 800a5a8:	4637      	mov	r7, r6
 800a5aa:	dc04      	bgt.n	800a5b6 <__swbuf_r+0x42>
 800a5ac:	4621      	mov	r1, r4
 800a5ae:	4628      	mov	r0, r5
 800a5b0:	f000 f926 	bl	800a800 <_fflush_r>
 800a5b4:	bb30      	cbnz	r0, 800a604 <__swbuf_r+0x90>
 800a5b6:	68a3      	ldr	r3, [r4, #8]
 800a5b8:	3b01      	subs	r3, #1
 800a5ba:	60a3      	str	r3, [r4, #8]
 800a5bc:	6823      	ldr	r3, [r4, #0]
 800a5be:	1c5a      	adds	r2, r3, #1
 800a5c0:	6022      	str	r2, [r4, #0]
 800a5c2:	701e      	strb	r6, [r3, #0]
 800a5c4:	6963      	ldr	r3, [r4, #20]
 800a5c6:	3001      	adds	r0, #1
 800a5c8:	4283      	cmp	r3, r0
 800a5ca:	d004      	beq.n	800a5d6 <__swbuf_r+0x62>
 800a5cc:	89a3      	ldrh	r3, [r4, #12]
 800a5ce:	07db      	lsls	r3, r3, #31
 800a5d0:	d506      	bpl.n	800a5e0 <__swbuf_r+0x6c>
 800a5d2:	2e0a      	cmp	r6, #10
 800a5d4:	d104      	bne.n	800a5e0 <__swbuf_r+0x6c>
 800a5d6:	4621      	mov	r1, r4
 800a5d8:	4628      	mov	r0, r5
 800a5da:	f000 f911 	bl	800a800 <_fflush_r>
 800a5de:	b988      	cbnz	r0, 800a604 <__swbuf_r+0x90>
 800a5e0:	4638      	mov	r0, r7
 800a5e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5e4:	4b0a      	ldr	r3, [pc, #40]	; (800a610 <__swbuf_r+0x9c>)
 800a5e6:	429c      	cmp	r4, r3
 800a5e8:	d101      	bne.n	800a5ee <__swbuf_r+0x7a>
 800a5ea:	68ac      	ldr	r4, [r5, #8]
 800a5ec:	e7cf      	b.n	800a58e <__swbuf_r+0x1a>
 800a5ee:	4b09      	ldr	r3, [pc, #36]	; (800a614 <__swbuf_r+0xa0>)
 800a5f0:	429c      	cmp	r4, r3
 800a5f2:	bf08      	it	eq
 800a5f4:	68ec      	ldreq	r4, [r5, #12]
 800a5f6:	e7ca      	b.n	800a58e <__swbuf_r+0x1a>
 800a5f8:	4621      	mov	r1, r4
 800a5fa:	4628      	mov	r0, r5
 800a5fc:	f000 f80c 	bl	800a618 <__swsetup_r>
 800a600:	2800      	cmp	r0, #0
 800a602:	d0cb      	beq.n	800a59c <__swbuf_r+0x28>
 800a604:	f04f 37ff 	mov.w	r7, #4294967295
 800a608:	e7ea      	b.n	800a5e0 <__swbuf_r+0x6c>
 800a60a:	bf00      	nop
 800a60c:	0800bb98 	.word	0x0800bb98
 800a610:	0800bbb8 	.word	0x0800bbb8
 800a614:	0800bb78 	.word	0x0800bb78

0800a618 <__swsetup_r>:
 800a618:	4b32      	ldr	r3, [pc, #200]	; (800a6e4 <__swsetup_r+0xcc>)
 800a61a:	b570      	push	{r4, r5, r6, lr}
 800a61c:	681d      	ldr	r5, [r3, #0]
 800a61e:	4606      	mov	r6, r0
 800a620:	460c      	mov	r4, r1
 800a622:	b125      	cbz	r5, 800a62e <__swsetup_r+0x16>
 800a624:	69ab      	ldr	r3, [r5, #24]
 800a626:	b913      	cbnz	r3, 800a62e <__swsetup_r+0x16>
 800a628:	4628      	mov	r0, r5
 800a62a:	f000 f97d 	bl	800a928 <__sinit>
 800a62e:	4b2e      	ldr	r3, [pc, #184]	; (800a6e8 <__swsetup_r+0xd0>)
 800a630:	429c      	cmp	r4, r3
 800a632:	d10f      	bne.n	800a654 <__swsetup_r+0x3c>
 800a634:	686c      	ldr	r4, [r5, #4]
 800a636:	89a3      	ldrh	r3, [r4, #12]
 800a638:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a63c:	0719      	lsls	r1, r3, #28
 800a63e:	d42c      	bmi.n	800a69a <__swsetup_r+0x82>
 800a640:	06dd      	lsls	r5, r3, #27
 800a642:	d411      	bmi.n	800a668 <__swsetup_r+0x50>
 800a644:	2309      	movs	r3, #9
 800a646:	6033      	str	r3, [r6, #0]
 800a648:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a64c:	81a3      	strh	r3, [r4, #12]
 800a64e:	f04f 30ff 	mov.w	r0, #4294967295
 800a652:	e03e      	b.n	800a6d2 <__swsetup_r+0xba>
 800a654:	4b25      	ldr	r3, [pc, #148]	; (800a6ec <__swsetup_r+0xd4>)
 800a656:	429c      	cmp	r4, r3
 800a658:	d101      	bne.n	800a65e <__swsetup_r+0x46>
 800a65a:	68ac      	ldr	r4, [r5, #8]
 800a65c:	e7eb      	b.n	800a636 <__swsetup_r+0x1e>
 800a65e:	4b24      	ldr	r3, [pc, #144]	; (800a6f0 <__swsetup_r+0xd8>)
 800a660:	429c      	cmp	r4, r3
 800a662:	bf08      	it	eq
 800a664:	68ec      	ldreq	r4, [r5, #12]
 800a666:	e7e6      	b.n	800a636 <__swsetup_r+0x1e>
 800a668:	0758      	lsls	r0, r3, #29
 800a66a:	d512      	bpl.n	800a692 <__swsetup_r+0x7a>
 800a66c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a66e:	b141      	cbz	r1, 800a682 <__swsetup_r+0x6a>
 800a670:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a674:	4299      	cmp	r1, r3
 800a676:	d002      	beq.n	800a67e <__swsetup_r+0x66>
 800a678:	4630      	mov	r0, r6
 800a67a:	f000 fa59 	bl	800ab30 <_free_r>
 800a67e:	2300      	movs	r3, #0
 800a680:	6363      	str	r3, [r4, #52]	; 0x34
 800a682:	89a3      	ldrh	r3, [r4, #12]
 800a684:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a688:	81a3      	strh	r3, [r4, #12]
 800a68a:	2300      	movs	r3, #0
 800a68c:	6063      	str	r3, [r4, #4]
 800a68e:	6923      	ldr	r3, [r4, #16]
 800a690:	6023      	str	r3, [r4, #0]
 800a692:	89a3      	ldrh	r3, [r4, #12]
 800a694:	f043 0308 	orr.w	r3, r3, #8
 800a698:	81a3      	strh	r3, [r4, #12]
 800a69a:	6923      	ldr	r3, [r4, #16]
 800a69c:	b94b      	cbnz	r3, 800a6b2 <__swsetup_r+0x9a>
 800a69e:	89a3      	ldrh	r3, [r4, #12]
 800a6a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a6a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6a8:	d003      	beq.n	800a6b2 <__swsetup_r+0x9a>
 800a6aa:	4621      	mov	r1, r4
 800a6ac:	4630      	mov	r0, r6
 800a6ae:	f000 f9ff 	bl	800aab0 <__smakebuf_r>
 800a6b2:	89a0      	ldrh	r0, [r4, #12]
 800a6b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6b8:	f010 0301 	ands.w	r3, r0, #1
 800a6bc:	d00a      	beq.n	800a6d4 <__swsetup_r+0xbc>
 800a6be:	2300      	movs	r3, #0
 800a6c0:	60a3      	str	r3, [r4, #8]
 800a6c2:	6963      	ldr	r3, [r4, #20]
 800a6c4:	425b      	negs	r3, r3
 800a6c6:	61a3      	str	r3, [r4, #24]
 800a6c8:	6923      	ldr	r3, [r4, #16]
 800a6ca:	b943      	cbnz	r3, 800a6de <__swsetup_r+0xc6>
 800a6cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a6d0:	d1ba      	bne.n	800a648 <__swsetup_r+0x30>
 800a6d2:	bd70      	pop	{r4, r5, r6, pc}
 800a6d4:	0781      	lsls	r1, r0, #30
 800a6d6:	bf58      	it	pl
 800a6d8:	6963      	ldrpl	r3, [r4, #20]
 800a6da:	60a3      	str	r3, [r4, #8]
 800a6dc:	e7f4      	b.n	800a6c8 <__swsetup_r+0xb0>
 800a6de:	2000      	movs	r0, #0
 800a6e0:	e7f7      	b.n	800a6d2 <__swsetup_r+0xba>
 800a6e2:	bf00      	nop
 800a6e4:	20000024 	.word	0x20000024
 800a6e8:	0800bb98 	.word	0x0800bb98
 800a6ec:	0800bbb8 	.word	0x0800bbb8
 800a6f0:	0800bb78 	.word	0x0800bb78

0800a6f4 <__sflush_r>:
 800a6f4:	898a      	ldrh	r2, [r1, #12]
 800a6f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6fa:	4605      	mov	r5, r0
 800a6fc:	0710      	lsls	r0, r2, #28
 800a6fe:	460c      	mov	r4, r1
 800a700:	d458      	bmi.n	800a7b4 <__sflush_r+0xc0>
 800a702:	684b      	ldr	r3, [r1, #4]
 800a704:	2b00      	cmp	r3, #0
 800a706:	dc05      	bgt.n	800a714 <__sflush_r+0x20>
 800a708:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	dc02      	bgt.n	800a714 <__sflush_r+0x20>
 800a70e:	2000      	movs	r0, #0
 800a710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a714:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a716:	2e00      	cmp	r6, #0
 800a718:	d0f9      	beq.n	800a70e <__sflush_r+0x1a>
 800a71a:	2300      	movs	r3, #0
 800a71c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a720:	682f      	ldr	r7, [r5, #0]
 800a722:	602b      	str	r3, [r5, #0]
 800a724:	d032      	beq.n	800a78c <__sflush_r+0x98>
 800a726:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a728:	89a3      	ldrh	r3, [r4, #12]
 800a72a:	075a      	lsls	r2, r3, #29
 800a72c:	d505      	bpl.n	800a73a <__sflush_r+0x46>
 800a72e:	6863      	ldr	r3, [r4, #4]
 800a730:	1ac0      	subs	r0, r0, r3
 800a732:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a734:	b10b      	cbz	r3, 800a73a <__sflush_r+0x46>
 800a736:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a738:	1ac0      	subs	r0, r0, r3
 800a73a:	2300      	movs	r3, #0
 800a73c:	4602      	mov	r2, r0
 800a73e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a740:	6a21      	ldr	r1, [r4, #32]
 800a742:	4628      	mov	r0, r5
 800a744:	47b0      	blx	r6
 800a746:	1c43      	adds	r3, r0, #1
 800a748:	89a3      	ldrh	r3, [r4, #12]
 800a74a:	d106      	bne.n	800a75a <__sflush_r+0x66>
 800a74c:	6829      	ldr	r1, [r5, #0]
 800a74e:	291d      	cmp	r1, #29
 800a750:	d82c      	bhi.n	800a7ac <__sflush_r+0xb8>
 800a752:	4a2a      	ldr	r2, [pc, #168]	; (800a7fc <__sflush_r+0x108>)
 800a754:	40ca      	lsrs	r2, r1
 800a756:	07d6      	lsls	r6, r2, #31
 800a758:	d528      	bpl.n	800a7ac <__sflush_r+0xb8>
 800a75a:	2200      	movs	r2, #0
 800a75c:	6062      	str	r2, [r4, #4]
 800a75e:	04d9      	lsls	r1, r3, #19
 800a760:	6922      	ldr	r2, [r4, #16]
 800a762:	6022      	str	r2, [r4, #0]
 800a764:	d504      	bpl.n	800a770 <__sflush_r+0x7c>
 800a766:	1c42      	adds	r2, r0, #1
 800a768:	d101      	bne.n	800a76e <__sflush_r+0x7a>
 800a76a:	682b      	ldr	r3, [r5, #0]
 800a76c:	b903      	cbnz	r3, 800a770 <__sflush_r+0x7c>
 800a76e:	6560      	str	r0, [r4, #84]	; 0x54
 800a770:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a772:	602f      	str	r7, [r5, #0]
 800a774:	2900      	cmp	r1, #0
 800a776:	d0ca      	beq.n	800a70e <__sflush_r+0x1a>
 800a778:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a77c:	4299      	cmp	r1, r3
 800a77e:	d002      	beq.n	800a786 <__sflush_r+0x92>
 800a780:	4628      	mov	r0, r5
 800a782:	f000 f9d5 	bl	800ab30 <_free_r>
 800a786:	2000      	movs	r0, #0
 800a788:	6360      	str	r0, [r4, #52]	; 0x34
 800a78a:	e7c1      	b.n	800a710 <__sflush_r+0x1c>
 800a78c:	6a21      	ldr	r1, [r4, #32]
 800a78e:	2301      	movs	r3, #1
 800a790:	4628      	mov	r0, r5
 800a792:	47b0      	blx	r6
 800a794:	1c41      	adds	r1, r0, #1
 800a796:	d1c7      	bne.n	800a728 <__sflush_r+0x34>
 800a798:	682b      	ldr	r3, [r5, #0]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d0c4      	beq.n	800a728 <__sflush_r+0x34>
 800a79e:	2b1d      	cmp	r3, #29
 800a7a0:	d001      	beq.n	800a7a6 <__sflush_r+0xb2>
 800a7a2:	2b16      	cmp	r3, #22
 800a7a4:	d101      	bne.n	800a7aa <__sflush_r+0xb6>
 800a7a6:	602f      	str	r7, [r5, #0]
 800a7a8:	e7b1      	b.n	800a70e <__sflush_r+0x1a>
 800a7aa:	89a3      	ldrh	r3, [r4, #12]
 800a7ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7b0:	81a3      	strh	r3, [r4, #12]
 800a7b2:	e7ad      	b.n	800a710 <__sflush_r+0x1c>
 800a7b4:	690f      	ldr	r7, [r1, #16]
 800a7b6:	2f00      	cmp	r7, #0
 800a7b8:	d0a9      	beq.n	800a70e <__sflush_r+0x1a>
 800a7ba:	0793      	lsls	r3, r2, #30
 800a7bc:	680e      	ldr	r6, [r1, #0]
 800a7be:	bf08      	it	eq
 800a7c0:	694b      	ldreq	r3, [r1, #20]
 800a7c2:	600f      	str	r7, [r1, #0]
 800a7c4:	bf18      	it	ne
 800a7c6:	2300      	movne	r3, #0
 800a7c8:	eba6 0807 	sub.w	r8, r6, r7
 800a7cc:	608b      	str	r3, [r1, #8]
 800a7ce:	f1b8 0f00 	cmp.w	r8, #0
 800a7d2:	dd9c      	ble.n	800a70e <__sflush_r+0x1a>
 800a7d4:	6a21      	ldr	r1, [r4, #32]
 800a7d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a7d8:	4643      	mov	r3, r8
 800a7da:	463a      	mov	r2, r7
 800a7dc:	4628      	mov	r0, r5
 800a7de:	47b0      	blx	r6
 800a7e0:	2800      	cmp	r0, #0
 800a7e2:	dc06      	bgt.n	800a7f2 <__sflush_r+0xfe>
 800a7e4:	89a3      	ldrh	r3, [r4, #12]
 800a7e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7ea:	81a3      	strh	r3, [r4, #12]
 800a7ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a7f0:	e78e      	b.n	800a710 <__sflush_r+0x1c>
 800a7f2:	4407      	add	r7, r0
 800a7f4:	eba8 0800 	sub.w	r8, r8, r0
 800a7f8:	e7e9      	b.n	800a7ce <__sflush_r+0xda>
 800a7fa:	bf00      	nop
 800a7fc:	20400001 	.word	0x20400001

0800a800 <_fflush_r>:
 800a800:	b538      	push	{r3, r4, r5, lr}
 800a802:	690b      	ldr	r3, [r1, #16]
 800a804:	4605      	mov	r5, r0
 800a806:	460c      	mov	r4, r1
 800a808:	b913      	cbnz	r3, 800a810 <_fflush_r+0x10>
 800a80a:	2500      	movs	r5, #0
 800a80c:	4628      	mov	r0, r5
 800a80e:	bd38      	pop	{r3, r4, r5, pc}
 800a810:	b118      	cbz	r0, 800a81a <_fflush_r+0x1a>
 800a812:	6983      	ldr	r3, [r0, #24]
 800a814:	b90b      	cbnz	r3, 800a81a <_fflush_r+0x1a>
 800a816:	f000 f887 	bl	800a928 <__sinit>
 800a81a:	4b14      	ldr	r3, [pc, #80]	; (800a86c <_fflush_r+0x6c>)
 800a81c:	429c      	cmp	r4, r3
 800a81e:	d11b      	bne.n	800a858 <_fflush_r+0x58>
 800a820:	686c      	ldr	r4, [r5, #4]
 800a822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d0ef      	beq.n	800a80a <_fflush_r+0xa>
 800a82a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a82c:	07d0      	lsls	r0, r2, #31
 800a82e:	d404      	bmi.n	800a83a <_fflush_r+0x3a>
 800a830:	0599      	lsls	r1, r3, #22
 800a832:	d402      	bmi.n	800a83a <_fflush_r+0x3a>
 800a834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a836:	f000 f915 	bl	800aa64 <__retarget_lock_acquire_recursive>
 800a83a:	4628      	mov	r0, r5
 800a83c:	4621      	mov	r1, r4
 800a83e:	f7ff ff59 	bl	800a6f4 <__sflush_r>
 800a842:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a844:	07da      	lsls	r2, r3, #31
 800a846:	4605      	mov	r5, r0
 800a848:	d4e0      	bmi.n	800a80c <_fflush_r+0xc>
 800a84a:	89a3      	ldrh	r3, [r4, #12]
 800a84c:	059b      	lsls	r3, r3, #22
 800a84e:	d4dd      	bmi.n	800a80c <_fflush_r+0xc>
 800a850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a852:	f000 f908 	bl	800aa66 <__retarget_lock_release_recursive>
 800a856:	e7d9      	b.n	800a80c <_fflush_r+0xc>
 800a858:	4b05      	ldr	r3, [pc, #20]	; (800a870 <_fflush_r+0x70>)
 800a85a:	429c      	cmp	r4, r3
 800a85c:	d101      	bne.n	800a862 <_fflush_r+0x62>
 800a85e:	68ac      	ldr	r4, [r5, #8]
 800a860:	e7df      	b.n	800a822 <_fflush_r+0x22>
 800a862:	4b04      	ldr	r3, [pc, #16]	; (800a874 <_fflush_r+0x74>)
 800a864:	429c      	cmp	r4, r3
 800a866:	bf08      	it	eq
 800a868:	68ec      	ldreq	r4, [r5, #12]
 800a86a:	e7da      	b.n	800a822 <_fflush_r+0x22>
 800a86c:	0800bb98 	.word	0x0800bb98
 800a870:	0800bbb8 	.word	0x0800bbb8
 800a874:	0800bb78 	.word	0x0800bb78

0800a878 <std>:
 800a878:	2300      	movs	r3, #0
 800a87a:	b510      	push	{r4, lr}
 800a87c:	4604      	mov	r4, r0
 800a87e:	e9c0 3300 	strd	r3, r3, [r0]
 800a882:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a886:	6083      	str	r3, [r0, #8]
 800a888:	8181      	strh	r1, [r0, #12]
 800a88a:	6643      	str	r3, [r0, #100]	; 0x64
 800a88c:	81c2      	strh	r2, [r0, #14]
 800a88e:	6183      	str	r3, [r0, #24]
 800a890:	4619      	mov	r1, r3
 800a892:	2208      	movs	r2, #8
 800a894:	305c      	adds	r0, #92	; 0x5c
 800a896:	f7ff fdd7 	bl	800a448 <memset>
 800a89a:	4b05      	ldr	r3, [pc, #20]	; (800a8b0 <std+0x38>)
 800a89c:	6263      	str	r3, [r4, #36]	; 0x24
 800a89e:	4b05      	ldr	r3, [pc, #20]	; (800a8b4 <std+0x3c>)
 800a8a0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a8a2:	4b05      	ldr	r3, [pc, #20]	; (800a8b8 <std+0x40>)
 800a8a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a8a6:	4b05      	ldr	r3, [pc, #20]	; (800a8bc <std+0x44>)
 800a8a8:	6224      	str	r4, [r4, #32]
 800a8aa:	6323      	str	r3, [r4, #48]	; 0x30
 800a8ac:	bd10      	pop	{r4, pc}
 800a8ae:	bf00      	nop
 800a8b0:	0800b281 	.word	0x0800b281
 800a8b4:	0800b2a3 	.word	0x0800b2a3
 800a8b8:	0800b2db 	.word	0x0800b2db
 800a8bc:	0800b2ff 	.word	0x0800b2ff

0800a8c0 <_cleanup_r>:
 800a8c0:	4901      	ldr	r1, [pc, #4]	; (800a8c8 <_cleanup_r+0x8>)
 800a8c2:	f000 b8af 	b.w	800aa24 <_fwalk_reent>
 800a8c6:	bf00      	nop
 800a8c8:	0800a801 	.word	0x0800a801

0800a8cc <__sfmoreglue>:
 800a8cc:	b570      	push	{r4, r5, r6, lr}
 800a8ce:	1e4a      	subs	r2, r1, #1
 800a8d0:	2568      	movs	r5, #104	; 0x68
 800a8d2:	4355      	muls	r5, r2
 800a8d4:	460e      	mov	r6, r1
 800a8d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a8da:	f000 f979 	bl	800abd0 <_malloc_r>
 800a8de:	4604      	mov	r4, r0
 800a8e0:	b140      	cbz	r0, 800a8f4 <__sfmoreglue+0x28>
 800a8e2:	2100      	movs	r1, #0
 800a8e4:	e9c0 1600 	strd	r1, r6, [r0]
 800a8e8:	300c      	adds	r0, #12
 800a8ea:	60a0      	str	r0, [r4, #8]
 800a8ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a8f0:	f7ff fdaa 	bl	800a448 <memset>
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	bd70      	pop	{r4, r5, r6, pc}

0800a8f8 <__sfp_lock_acquire>:
 800a8f8:	4801      	ldr	r0, [pc, #4]	; (800a900 <__sfp_lock_acquire+0x8>)
 800a8fa:	f000 b8b3 	b.w	800aa64 <__retarget_lock_acquire_recursive>
 800a8fe:	bf00      	nop
 800a900:	20001534 	.word	0x20001534

0800a904 <__sfp_lock_release>:
 800a904:	4801      	ldr	r0, [pc, #4]	; (800a90c <__sfp_lock_release+0x8>)
 800a906:	f000 b8ae 	b.w	800aa66 <__retarget_lock_release_recursive>
 800a90a:	bf00      	nop
 800a90c:	20001534 	.word	0x20001534

0800a910 <__sinit_lock_acquire>:
 800a910:	4801      	ldr	r0, [pc, #4]	; (800a918 <__sinit_lock_acquire+0x8>)
 800a912:	f000 b8a7 	b.w	800aa64 <__retarget_lock_acquire_recursive>
 800a916:	bf00      	nop
 800a918:	2000152f 	.word	0x2000152f

0800a91c <__sinit_lock_release>:
 800a91c:	4801      	ldr	r0, [pc, #4]	; (800a924 <__sinit_lock_release+0x8>)
 800a91e:	f000 b8a2 	b.w	800aa66 <__retarget_lock_release_recursive>
 800a922:	bf00      	nop
 800a924:	2000152f 	.word	0x2000152f

0800a928 <__sinit>:
 800a928:	b510      	push	{r4, lr}
 800a92a:	4604      	mov	r4, r0
 800a92c:	f7ff fff0 	bl	800a910 <__sinit_lock_acquire>
 800a930:	69a3      	ldr	r3, [r4, #24]
 800a932:	b11b      	cbz	r3, 800a93c <__sinit+0x14>
 800a934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a938:	f7ff bff0 	b.w	800a91c <__sinit_lock_release>
 800a93c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a940:	6523      	str	r3, [r4, #80]	; 0x50
 800a942:	4b13      	ldr	r3, [pc, #76]	; (800a990 <__sinit+0x68>)
 800a944:	4a13      	ldr	r2, [pc, #76]	; (800a994 <__sinit+0x6c>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	62a2      	str	r2, [r4, #40]	; 0x28
 800a94a:	42a3      	cmp	r3, r4
 800a94c:	bf04      	itt	eq
 800a94e:	2301      	moveq	r3, #1
 800a950:	61a3      	streq	r3, [r4, #24]
 800a952:	4620      	mov	r0, r4
 800a954:	f000 f820 	bl	800a998 <__sfp>
 800a958:	6060      	str	r0, [r4, #4]
 800a95a:	4620      	mov	r0, r4
 800a95c:	f000 f81c 	bl	800a998 <__sfp>
 800a960:	60a0      	str	r0, [r4, #8]
 800a962:	4620      	mov	r0, r4
 800a964:	f000 f818 	bl	800a998 <__sfp>
 800a968:	2200      	movs	r2, #0
 800a96a:	60e0      	str	r0, [r4, #12]
 800a96c:	2104      	movs	r1, #4
 800a96e:	6860      	ldr	r0, [r4, #4]
 800a970:	f7ff ff82 	bl	800a878 <std>
 800a974:	68a0      	ldr	r0, [r4, #8]
 800a976:	2201      	movs	r2, #1
 800a978:	2109      	movs	r1, #9
 800a97a:	f7ff ff7d 	bl	800a878 <std>
 800a97e:	68e0      	ldr	r0, [r4, #12]
 800a980:	2202      	movs	r2, #2
 800a982:	2112      	movs	r1, #18
 800a984:	f7ff ff78 	bl	800a878 <std>
 800a988:	2301      	movs	r3, #1
 800a98a:	61a3      	str	r3, [r4, #24]
 800a98c:	e7d2      	b.n	800a934 <__sinit+0xc>
 800a98e:	bf00      	nop
 800a990:	0800bb74 	.word	0x0800bb74
 800a994:	0800a8c1 	.word	0x0800a8c1

0800a998 <__sfp>:
 800a998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a99a:	4607      	mov	r7, r0
 800a99c:	f7ff ffac 	bl	800a8f8 <__sfp_lock_acquire>
 800a9a0:	4b1e      	ldr	r3, [pc, #120]	; (800aa1c <__sfp+0x84>)
 800a9a2:	681e      	ldr	r6, [r3, #0]
 800a9a4:	69b3      	ldr	r3, [r6, #24]
 800a9a6:	b913      	cbnz	r3, 800a9ae <__sfp+0x16>
 800a9a8:	4630      	mov	r0, r6
 800a9aa:	f7ff ffbd 	bl	800a928 <__sinit>
 800a9ae:	3648      	adds	r6, #72	; 0x48
 800a9b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a9b4:	3b01      	subs	r3, #1
 800a9b6:	d503      	bpl.n	800a9c0 <__sfp+0x28>
 800a9b8:	6833      	ldr	r3, [r6, #0]
 800a9ba:	b30b      	cbz	r3, 800aa00 <__sfp+0x68>
 800a9bc:	6836      	ldr	r6, [r6, #0]
 800a9be:	e7f7      	b.n	800a9b0 <__sfp+0x18>
 800a9c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a9c4:	b9d5      	cbnz	r5, 800a9fc <__sfp+0x64>
 800a9c6:	4b16      	ldr	r3, [pc, #88]	; (800aa20 <__sfp+0x88>)
 800a9c8:	60e3      	str	r3, [r4, #12]
 800a9ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a9ce:	6665      	str	r5, [r4, #100]	; 0x64
 800a9d0:	f000 f847 	bl	800aa62 <__retarget_lock_init_recursive>
 800a9d4:	f7ff ff96 	bl	800a904 <__sfp_lock_release>
 800a9d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a9dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a9e0:	6025      	str	r5, [r4, #0]
 800a9e2:	61a5      	str	r5, [r4, #24]
 800a9e4:	2208      	movs	r2, #8
 800a9e6:	4629      	mov	r1, r5
 800a9e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a9ec:	f7ff fd2c 	bl	800a448 <memset>
 800a9f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a9f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a9f8:	4620      	mov	r0, r4
 800a9fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9fc:	3468      	adds	r4, #104	; 0x68
 800a9fe:	e7d9      	b.n	800a9b4 <__sfp+0x1c>
 800aa00:	2104      	movs	r1, #4
 800aa02:	4638      	mov	r0, r7
 800aa04:	f7ff ff62 	bl	800a8cc <__sfmoreglue>
 800aa08:	4604      	mov	r4, r0
 800aa0a:	6030      	str	r0, [r6, #0]
 800aa0c:	2800      	cmp	r0, #0
 800aa0e:	d1d5      	bne.n	800a9bc <__sfp+0x24>
 800aa10:	f7ff ff78 	bl	800a904 <__sfp_lock_release>
 800aa14:	230c      	movs	r3, #12
 800aa16:	603b      	str	r3, [r7, #0]
 800aa18:	e7ee      	b.n	800a9f8 <__sfp+0x60>
 800aa1a:	bf00      	nop
 800aa1c:	0800bb74 	.word	0x0800bb74
 800aa20:	ffff0001 	.word	0xffff0001

0800aa24 <_fwalk_reent>:
 800aa24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa28:	4606      	mov	r6, r0
 800aa2a:	4688      	mov	r8, r1
 800aa2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aa30:	2700      	movs	r7, #0
 800aa32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa36:	f1b9 0901 	subs.w	r9, r9, #1
 800aa3a:	d505      	bpl.n	800aa48 <_fwalk_reent+0x24>
 800aa3c:	6824      	ldr	r4, [r4, #0]
 800aa3e:	2c00      	cmp	r4, #0
 800aa40:	d1f7      	bne.n	800aa32 <_fwalk_reent+0xe>
 800aa42:	4638      	mov	r0, r7
 800aa44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa48:	89ab      	ldrh	r3, [r5, #12]
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d907      	bls.n	800aa5e <_fwalk_reent+0x3a>
 800aa4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa52:	3301      	adds	r3, #1
 800aa54:	d003      	beq.n	800aa5e <_fwalk_reent+0x3a>
 800aa56:	4629      	mov	r1, r5
 800aa58:	4630      	mov	r0, r6
 800aa5a:	47c0      	blx	r8
 800aa5c:	4307      	orrs	r7, r0
 800aa5e:	3568      	adds	r5, #104	; 0x68
 800aa60:	e7e9      	b.n	800aa36 <_fwalk_reent+0x12>

0800aa62 <__retarget_lock_init_recursive>:
 800aa62:	4770      	bx	lr

0800aa64 <__retarget_lock_acquire_recursive>:
 800aa64:	4770      	bx	lr

0800aa66 <__retarget_lock_release_recursive>:
 800aa66:	4770      	bx	lr

0800aa68 <__swhatbuf_r>:
 800aa68:	b570      	push	{r4, r5, r6, lr}
 800aa6a:	460e      	mov	r6, r1
 800aa6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa70:	2900      	cmp	r1, #0
 800aa72:	b096      	sub	sp, #88	; 0x58
 800aa74:	4614      	mov	r4, r2
 800aa76:	461d      	mov	r5, r3
 800aa78:	da07      	bge.n	800aa8a <__swhatbuf_r+0x22>
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	602b      	str	r3, [r5, #0]
 800aa7e:	89b3      	ldrh	r3, [r6, #12]
 800aa80:	061a      	lsls	r2, r3, #24
 800aa82:	d410      	bmi.n	800aaa6 <__swhatbuf_r+0x3e>
 800aa84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa88:	e00e      	b.n	800aaa8 <__swhatbuf_r+0x40>
 800aa8a:	466a      	mov	r2, sp
 800aa8c:	f000 fc5e 	bl	800b34c <_fstat_r>
 800aa90:	2800      	cmp	r0, #0
 800aa92:	dbf2      	blt.n	800aa7a <__swhatbuf_r+0x12>
 800aa94:	9a01      	ldr	r2, [sp, #4]
 800aa96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aa9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aa9e:	425a      	negs	r2, r3
 800aaa0:	415a      	adcs	r2, r3
 800aaa2:	602a      	str	r2, [r5, #0]
 800aaa4:	e7ee      	b.n	800aa84 <__swhatbuf_r+0x1c>
 800aaa6:	2340      	movs	r3, #64	; 0x40
 800aaa8:	2000      	movs	r0, #0
 800aaaa:	6023      	str	r3, [r4, #0]
 800aaac:	b016      	add	sp, #88	; 0x58
 800aaae:	bd70      	pop	{r4, r5, r6, pc}

0800aab0 <__smakebuf_r>:
 800aab0:	898b      	ldrh	r3, [r1, #12]
 800aab2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aab4:	079d      	lsls	r5, r3, #30
 800aab6:	4606      	mov	r6, r0
 800aab8:	460c      	mov	r4, r1
 800aaba:	d507      	bpl.n	800aacc <__smakebuf_r+0x1c>
 800aabc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aac0:	6023      	str	r3, [r4, #0]
 800aac2:	6123      	str	r3, [r4, #16]
 800aac4:	2301      	movs	r3, #1
 800aac6:	6163      	str	r3, [r4, #20]
 800aac8:	b002      	add	sp, #8
 800aaca:	bd70      	pop	{r4, r5, r6, pc}
 800aacc:	ab01      	add	r3, sp, #4
 800aace:	466a      	mov	r2, sp
 800aad0:	f7ff ffca 	bl	800aa68 <__swhatbuf_r>
 800aad4:	9900      	ldr	r1, [sp, #0]
 800aad6:	4605      	mov	r5, r0
 800aad8:	4630      	mov	r0, r6
 800aada:	f000 f879 	bl	800abd0 <_malloc_r>
 800aade:	b948      	cbnz	r0, 800aaf4 <__smakebuf_r+0x44>
 800aae0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aae4:	059a      	lsls	r2, r3, #22
 800aae6:	d4ef      	bmi.n	800aac8 <__smakebuf_r+0x18>
 800aae8:	f023 0303 	bic.w	r3, r3, #3
 800aaec:	f043 0302 	orr.w	r3, r3, #2
 800aaf0:	81a3      	strh	r3, [r4, #12]
 800aaf2:	e7e3      	b.n	800aabc <__smakebuf_r+0xc>
 800aaf4:	4b0d      	ldr	r3, [pc, #52]	; (800ab2c <__smakebuf_r+0x7c>)
 800aaf6:	62b3      	str	r3, [r6, #40]	; 0x28
 800aaf8:	89a3      	ldrh	r3, [r4, #12]
 800aafa:	6020      	str	r0, [r4, #0]
 800aafc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab00:	81a3      	strh	r3, [r4, #12]
 800ab02:	9b00      	ldr	r3, [sp, #0]
 800ab04:	6163      	str	r3, [r4, #20]
 800ab06:	9b01      	ldr	r3, [sp, #4]
 800ab08:	6120      	str	r0, [r4, #16]
 800ab0a:	b15b      	cbz	r3, 800ab24 <__smakebuf_r+0x74>
 800ab0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab10:	4630      	mov	r0, r6
 800ab12:	f000 fc2d 	bl	800b370 <_isatty_r>
 800ab16:	b128      	cbz	r0, 800ab24 <__smakebuf_r+0x74>
 800ab18:	89a3      	ldrh	r3, [r4, #12]
 800ab1a:	f023 0303 	bic.w	r3, r3, #3
 800ab1e:	f043 0301 	orr.w	r3, r3, #1
 800ab22:	81a3      	strh	r3, [r4, #12]
 800ab24:	89a0      	ldrh	r0, [r4, #12]
 800ab26:	4305      	orrs	r5, r0
 800ab28:	81a5      	strh	r5, [r4, #12]
 800ab2a:	e7cd      	b.n	800aac8 <__smakebuf_r+0x18>
 800ab2c:	0800a8c1 	.word	0x0800a8c1

0800ab30 <_free_r>:
 800ab30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab32:	2900      	cmp	r1, #0
 800ab34:	d048      	beq.n	800abc8 <_free_r+0x98>
 800ab36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab3a:	9001      	str	r0, [sp, #4]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f1a1 0404 	sub.w	r4, r1, #4
 800ab42:	bfb8      	it	lt
 800ab44:	18e4      	addlt	r4, r4, r3
 800ab46:	f000 fc35 	bl	800b3b4 <__malloc_lock>
 800ab4a:	4a20      	ldr	r2, [pc, #128]	; (800abcc <_free_r+0x9c>)
 800ab4c:	9801      	ldr	r0, [sp, #4]
 800ab4e:	6813      	ldr	r3, [r2, #0]
 800ab50:	4615      	mov	r5, r2
 800ab52:	b933      	cbnz	r3, 800ab62 <_free_r+0x32>
 800ab54:	6063      	str	r3, [r4, #4]
 800ab56:	6014      	str	r4, [r2, #0]
 800ab58:	b003      	add	sp, #12
 800ab5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab5e:	f000 bc2f 	b.w	800b3c0 <__malloc_unlock>
 800ab62:	42a3      	cmp	r3, r4
 800ab64:	d90b      	bls.n	800ab7e <_free_r+0x4e>
 800ab66:	6821      	ldr	r1, [r4, #0]
 800ab68:	1862      	adds	r2, r4, r1
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	bf04      	itt	eq
 800ab6e:	681a      	ldreq	r2, [r3, #0]
 800ab70:	685b      	ldreq	r3, [r3, #4]
 800ab72:	6063      	str	r3, [r4, #4]
 800ab74:	bf04      	itt	eq
 800ab76:	1852      	addeq	r2, r2, r1
 800ab78:	6022      	streq	r2, [r4, #0]
 800ab7a:	602c      	str	r4, [r5, #0]
 800ab7c:	e7ec      	b.n	800ab58 <_free_r+0x28>
 800ab7e:	461a      	mov	r2, r3
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	b10b      	cbz	r3, 800ab88 <_free_r+0x58>
 800ab84:	42a3      	cmp	r3, r4
 800ab86:	d9fa      	bls.n	800ab7e <_free_r+0x4e>
 800ab88:	6811      	ldr	r1, [r2, #0]
 800ab8a:	1855      	adds	r5, r2, r1
 800ab8c:	42a5      	cmp	r5, r4
 800ab8e:	d10b      	bne.n	800aba8 <_free_r+0x78>
 800ab90:	6824      	ldr	r4, [r4, #0]
 800ab92:	4421      	add	r1, r4
 800ab94:	1854      	adds	r4, r2, r1
 800ab96:	42a3      	cmp	r3, r4
 800ab98:	6011      	str	r1, [r2, #0]
 800ab9a:	d1dd      	bne.n	800ab58 <_free_r+0x28>
 800ab9c:	681c      	ldr	r4, [r3, #0]
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	6053      	str	r3, [r2, #4]
 800aba2:	4421      	add	r1, r4
 800aba4:	6011      	str	r1, [r2, #0]
 800aba6:	e7d7      	b.n	800ab58 <_free_r+0x28>
 800aba8:	d902      	bls.n	800abb0 <_free_r+0x80>
 800abaa:	230c      	movs	r3, #12
 800abac:	6003      	str	r3, [r0, #0]
 800abae:	e7d3      	b.n	800ab58 <_free_r+0x28>
 800abb0:	6825      	ldr	r5, [r4, #0]
 800abb2:	1961      	adds	r1, r4, r5
 800abb4:	428b      	cmp	r3, r1
 800abb6:	bf04      	itt	eq
 800abb8:	6819      	ldreq	r1, [r3, #0]
 800abba:	685b      	ldreq	r3, [r3, #4]
 800abbc:	6063      	str	r3, [r4, #4]
 800abbe:	bf04      	itt	eq
 800abc0:	1949      	addeq	r1, r1, r5
 800abc2:	6021      	streq	r1, [r4, #0]
 800abc4:	6054      	str	r4, [r2, #4]
 800abc6:	e7c7      	b.n	800ab58 <_free_r+0x28>
 800abc8:	b003      	add	sp, #12
 800abca:	bd30      	pop	{r4, r5, pc}
 800abcc:	20001364 	.word	0x20001364

0800abd0 <_malloc_r>:
 800abd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abd2:	1ccd      	adds	r5, r1, #3
 800abd4:	f025 0503 	bic.w	r5, r5, #3
 800abd8:	3508      	adds	r5, #8
 800abda:	2d0c      	cmp	r5, #12
 800abdc:	bf38      	it	cc
 800abde:	250c      	movcc	r5, #12
 800abe0:	2d00      	cmp	r5, #0
 800abe2:	4606      	mov	r6, r0
 800abe4:	db01      	blt.n	800abea <_malloc_r+0x1a>
 800abe6:	42a9      	cmp	r1, r5
 800abe8:	d903      	bls.n	800abf2 <_malloc_r+0x22>
 800abea:	230c      	movs	r3, #12
 800abec:	6033      	str	r3, [r6, #0]
 800abee:	2000      	movs	r0, #0
 800abf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abf2:	f000 fbdf 	bl	800b3b4 <__malloc_lock>
 800abf6:	4921      	ldr	r1, [pc, #132]	; (800ac7c <_malloc_r+0xac>)
 800abf8:	680a      	ldr	r2, [r1, #0]
 800abfa:	4614      	mov	r4, r2
 800abfc:	b99c      	cbnz	r4, 800ac26 <_malloc_r+0x56>
 800abfe:	4f20      	ldr	r7, [pc, #128]	; (800ac80 <_malloc_r+0xb0>)
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	b923      	cbnz	r3, 800ac0e <_malloc_r+0x3e>
 800ac04:	4621      	mov	r1, r4
 800ac06:	4630      	mov	r0, r6
 800ac08:	f000 fb2a 	bl	800b260 <_sbrk_r>
 800ac0c:	6038      	str	r0, [r7, #0]
 800ac0e:	4629      	mov	r1, r5
 800ac10:	4630      	mov	r0, r6
 800ac12:	f000 fb25 	bl	800b260 <_sbrk_r>
 800ac16:	1c43      	adds	r3, r0, #1
 800ac18:	d123      	bne.n	800ac62 <_malloc_r+0x92>
 800ac1a:	230c      	movs	r3, #12
 800ac1c:	6033      	str	r3, [r6, #0]
 800ac1e:	4630      	mov	r0, r6
 800ac20:	f000 fbce 	bl	800b3c0 <__malloc_unlock>
 800ac24:	e7e3      	b.n	800abee <_malloc_r+0x1e>
 800ac26:	6823      	ldr	r3, [r4, #0]
 800ac28:	1b5b      	subs	r3, r3, r5
 800ac2a:	d417      	bmi.n	800ac5c <_malloc_r+0x8c>
 800ac2c:	2b0b      	cmp	r3, #11
 800ac2e:	d903      	bls.n	800ac38 <_malloc_r+0x68>
 800ac30:	6023      	str	r3, [r4, #0]
 800ac32:	441c      	add	r4, r3
 800ac34:	6025      	str	r5, [r4, #0]
 800ac36:	e004      	b.n	800ac42 <_malloc_r+0x72>
 800ac38:	6863      	ldr	r3, [r4, #4]
 800ac3a:	42a2      	cmp	r2, r4
 800ac3c:	bf0c      	ite	eq
 800ac3e:	600b      	streq	r3, [r1, #0]
 800ac40:	6053      	strne	r3, [r2, #4]
 800ac42:	4630      	mov	r0, r6
 800ac44:	f000 fbbc 	bl	800b3c0 <__malloc_unlock>
 800ac48:	f104 000b 	add.w	r0, r4, #11
 800ac4c:	1d23      	adds	r3, r4, #4
 800ac4e:	f020 0007 	bic.w	r0, r0, #7
 800ac52:	1ac2      	subs	r2, r0, r3
 800ac54:	d0cc      	beq.n	800abf0 <_malloc_r+0x20>
 800ac56:	1a1b      	subs	r3, r3, r0
 800ac58:	50a3      	str	r3, [r4, r2]
 800ac5a:	e7c9      	b.n	800abf0 <_malloc_r+0x20>
 800ac5c:	4622      	mov	r2, r4
 800ac5e:	6864      	ldr	r4, [r4, #4]
 800ac60:	e7cc      	b.n	800abfc <_malloc_r+0x2c>
 800ac62:	1cc4      	adds	r4, r0, #3
 800ac64:	f024 0403 	bic.w	r4, r4, #3
 800ac68:	42a0      	cmp	r0, r4
 800ac6a:	d0e3      	beq.n	800ac34 <_malloc_r+0x64>
 800ac6c:	1a21      	subs	r1, r4, r0
 800ac6e:	4630      	mov	r0, r6
 800ac70:	f000 faf6 	bl	800b260 <_sbrk_r>
 800ac74:	3001      	adds	r0, #1
 800ac76:	d1dd      	bne.n	800ac34 <_malloc_r+0x64>
 800ac78:	e7cf      	b.n	800ac1a <_malloc_r+0x4a>
 800ac7a:	bf00      	nop
 800ac7c:	20001364 	.word	0x20001364
 800ac80:	20001368 	.word	0x20001368

0800ac84 <__sfputc_r>:
 800ac84:	6893      	ldr	r3, [r2, #8]
 800ac86:	3b01      	subs	r3, #1
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	b410      	push	{r4}
 800ac8c:	6093      	str	r3, [r2, #8]
 800ac8e:	da08      	bge.n	800aca2 <__sfputc_r+0x1e>
 800ac90:	6994      	ldr	r4, [r2, #24]
 800ac92:	42a3      	cmp	r3, r4
 800ac94:	db01      	blt.n	800ac9a <__sfputc_r+0x16>
 800ac96:	290a      	cmp	r1, #10
 800ac98:	d103      	bne.n	800aca2 <__sfputc_r+0x1e>
 800ac9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac9e:	f7ff bc69 	b.w	800a574 <__swbuf_r>
 800aca2:	6813      	ldr	r3, [r2, #0]
 800aca4:	1c58      	adds	r0, r3, #1
 800aca6:	6010      	str	r0, [r2, #0]
 800aca8:	7019      	strb	r1, [r3, #0]
 800acaa:	4608      	mov	r0, r1
 800acac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acb0:	4770      	bx	lr

0800acb2 <__sfputs_r>:
 800acb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acb4:	4606      	mov	r6, r0
 800acb6:	460f      	mov	r7, r1
 800acb8:	4614      	mov	r4, r2
 800acba:	18d5      	adds	r5, r2, r3
 800acbc:	42ac      	cmp	r4, r5
 800acbe:	d101      	bne.n	800acc4 <__sfputs_r+0x12>
 800acc0:	2000      	movs	r0, #0
 800acc2:	e007      	b.n	800acd4 <__sfputs_r+0x22>
 800acc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acc8:	463a      	mov	r2, r7
 800acca:	4630      	mov	r0, r6
 800accc:	f7ff ffda 	bl	800ac84 <__sfputc_r>
 800acd0:	1c43      	adds	r3, r0, #1
 800acd2:	d1f3      	bne.n	800acbc <__sfputs_r+0xa>
 800acd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800acd8 <_vfiprintf_r>:
 800acd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acdc:	460d      	mov	r5, r1
 800acde:	b09d      	sub	sp, #116	; 0x74
 800ace0:	4614      	mov	r4, r2
 800ace2:	4698      	mov	r8, r3
 800ace4:	4606      	mov	r6, r0
 800ace6:	b118      	cbz	r0, 800acf0 <_vfiprintf_r+0x18>
 800ace8:	6983      	ldr	r3, [r0, #24]
 800acea:	b90b      	cbnz	r3, 800acf0 <_vfiprintf_r+0x18>
 800acec:	f7ff fe1c 	bl	800a928 <__sinit>
 800acf0:	4b89      	ldr	r3, [pc, #548]	; (800af18 <_vfiprintf_r+0x240>)
 800acf2:	429d      	cmp	r5, r3
 800acf4:	d11b      	bne.n	800ad2e <_vfiprintf_r+0x56>
 800acf6:	6875      	ldr	r5, [r6, #4]
 800acf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acfa:	07d9      	lsls	r1, r3, #31
 800acfc:	d405      	bmi.n	800ad0a <_vfiprintf_r+0x32>
 800acfe:	89ab      	ldrh	r3, [r5, #12]
 800ad00:	059a      	lsls	r2, r3, #22
 800ad02:	d402      	bmi.n	800ad0a <_vfiprintf_r+0x32>
 800ad04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad06:	f7ff fead 	bl	800aa64 <__retarget_lock_acquire_recursive>
 800ad0a:	89ab      	ldrh	r3, [r5, #12]
 800ad0c:	071b      	lsls	r3, r3, #28
 800ad0e:	d501      	bpl.n	800ad14 <_vfiprintf_r+0x3c>
 800ad10:	692b      	ldr	r3, [r5, #16]
 800ad12:	b9eb      	cbnz	r3, 800ad50 <_vfiprintf_r+0x78>
 800ad14:	4629      	mov	r1, r5
 800ad16:	4630      	mov	r0, r6
 800ad18:	f7ff fc7e 	bl	800a618 <__swsetup_r>
 800ad1c:	b1c0      	cbz	r0, 800ad50 <_vfiprintf_r+0x78>
 800ad1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad20:	07dc      	lsls	r4, r3, #31
 800ad22:	d50e      	bpl.n	800ad42 <_vfiprintf_r+0x6a>
 800ad24:	f04f 30ff 	mov.w	r0, #4294967295
 800ad28:	b01d      	add	sp, #116	; 0x74
 800ad2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad2e:	4b7b      	ldr	r3, [pc, #492]	; (800af1c <_vfiprintf_r+0x244>)
 800ad30:	429d      	cmp	r5, r3
 800ad32:	d101      	bne.n	800ad38 <_vfiprintf_r+0x60>
 800ad34:	68b5      	ldr	r5, [r6, #8]
 800ad36:	e7df      	b.n	800acf8 <_vfiprintf_r+0x20>
 800ad38:	4b79      	ldr	r3, [pc, #484]	; (800af20 <_vfiprintf_r+0x248>)
 800ad3a:	429d      	cmp	r5, r3
 800ad3c:	bf08      	it	eq
 800ad3e:	68f5      	ldreq	r5, [r6, #12]
 800ad40:	e7da      	b.n	800acf8 <_vfiprintf_r+0x20>
 800ad42:	89ab      	ldrh	r3, [r5, #12]
 800ad44:	0598      	lsls	r0, r3, #22
 800ad46:	d4ed      	bmi.n	800ad24 <_vfiprintf_r+0x4c>
 800ad48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad4a:	f7ff fe8c 	bl	800aa66 <__retarget_lock_release_recursive>
 800ad4e:	e7e9      	b.n	800ad24 <_vfiprintf_r+0x4c>
 800ad50:	2300      	movs	r3, #0
 800ad52:	9309      	str	r3, [sp, #36]	; 0x24
 800ad54:	2320      	movs	r3, #32
 800ad56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad5e:	2330      	movs	r3, #48	; 0x30
 800ad60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800af24 <_vfiprintf_r+0x24c>
 800ad64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad68:	f04f 0901 	mov.w	r9, #1
 800ad6c:	4623      	mov	r3, r4
 800ad6e:	469a      	mov	sl, r3
 800ad70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad74:	b10a      	cbz	r2, 800ad7a <_vfiprintf_r+0xa2>
 800ad76:	2a25      	cmp	r2, #37	; 0x25
 800ad78:	d1f9      	bne.n	800ad6e <_vfiprintf_r+0x96>
 800ad7a:	ebba 0b04 	subs.w	fp, sl, r4
 800ad7e:	d00b      	beq.n	800ad98 <_vfiprintf_r+0xc0>
 800ad80:	465b      	mov	r3, fp
 800ad82:	4622      	mov	r2, r4
 800ad84:	4629      	mov	r1, r5
 800ad86:	4630      	mov	r0, r6
 800ad88:	f7ff ff93 	bl	800acb2 <__sfputs_r>
 800ad8c:	3001      	adds	r0, #1
 800ad8e:	f000 80aa 	beq.w	800aee6 <_vfiprintf_r+0x20e>
 800ad92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad94:	445a      	add	r2, fp
 800ad96:	9209      	str	r2, [sp, #36]	; 0x24
 800ad98:	f89a 3000 	ldrb.w	r3, [sl]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	f000 80a2 	beq.w	800aee6 <_vfiprintf_r+0x20e>
 800ada2:	2300      	movs	r3, #0
 800ada4:	f04f 32ff 	mov.w	r2, #4294967295
 800ada8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adac:	f10a 0a01 	add.w	sl, sl, #1
 800adb0:	9304      	str	r3, [sp, #16]
 800adb2:	9307      	str	r3, [sp, #28]
 800adb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800adb8:	931a      	str	r3, [sp, #104]	; 0x68
 800adba:	4654      	mov	r4, sl
 800adbc:	2205      	movs	r2, #5
 800adbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adc2:	4858      	ldr	r0, [pc, #352]	; (800af24 <_vfiprintf_r+0x24c>)
 800adc4:	f7f5 f9e4 	bl	8000190 <memchr>
 800adc8:	9a04      	ldr	r2, [sp, #16]
 800adca:	b9d8      	cbnz	r0, 800ae04 <_vfiprintf_r+0x12c>
 800adcc:	06d1      	lsls	r1, r2, #27
 800adce:	bf44      	itt	mi
 800add0:	2320      	movmi	r3, #32
 800add2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800add6:	0713      	lsls	r3, r2, #28
 800add8:	bf44      	itt	mi
 800adda:	232b      	movmi	r3, #43	; 0x2b
 800addc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ade0:	f89a 3000 	ldrb.w	r3, [sl]
 800ade4:	2b2a      	cmp	r3, #42	; 0x2a
 800ade6:	d015      	beq.n	800ae14 <_vfiprintf_r+0x13c>
 800ade8:	9a07      	ldr	r2, [sp, #28]
 800adea:	4654      	mov	r4, sl
 800adec:	2000      	movs	r0, #0
 800adee:	f04f 0c0a 	mov.w	ip, #10
 800adf2:	4621      	mov	r1, r4
 800adf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adf8:	3b30      	subs	r3, #48	; 0x30
 800adfa:	2b09      	cmp	r3, #9
 800adfc:	d94e      	bls.n	800ae9c <_vfiprintf_r+0x1c4>
 800adfe:	b1b0      	cbz	r0, 800ae2e <_vfiprintf_r+0x156>
 800ae00:	9207      	str	r2, [sp, #28]
 800ae02:	e014      	b.n	800ae2e <_vfiprintf_r+0x156>
 800ae04:	eba0 0308 	sub.w	r3, r0, r8
 800ae08:	fa09 f303 	lsl.w	r3, r9, r3
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	9304      	str	r3, [sp, #16]
 800ae10:	46a2      	mov	sl, r4
 800ae12:	e7d2      	b.n	800adba <_vfiprintf_r+0xe2>
 800ae14:	9b03      	ldr	r3, [sp, #12]
 800ae16:	1d19      	adds	r1, r3, #4
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	9103      	str	r1, [sp, #12]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	bfbb      	ittet	lt
 800ae20:	425b      	neglt	r3, r3
 800ae22:	f042 0202 	orrlt.w	r2, r2, #2
 800ae26:	9307      	strge	r3, [sp, #28]
 800ae28:	9307      	strlt	r3, [sp, #28]
 800ae2a:	bfb8      	it	lt
 800ae2c:	9204      	strlt	r2, [sp, #16]
 800ae2e:	7823      	ldrb	r3, [r4, #0]
 800ae30:	2b2e      	cmp	r3, #46	; 0x2e
 800ae32:	d10c      	bne.n	800ae4e <_vfiprintf_r+0x176>
 800ae34:	7863      	ldrb	r3, [r4, #1]
 800ae36:	2b2a      	cmp	r3, #42	; 0x2a
 800ae38:	d135      	bne.n	800aea6 <_vfiprintf_r+0x1ce>
 800ae3a:	9b03      	ldr	r3, [sp, #12]
 800ae3c:	1d1a      	adds	r2, r3, #4
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	9203      	str	r2, [sp, #12]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	bfb8      	it	lt
 800ae46:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae4a:	3402      	adds	r4, #2
 800ae4c:	9305      	str	r3, [sp, #20]
 800ae4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800af34 <_vfiprintf_r+0x25c>
 800ae52:	7821      	ldrb	r1, [r4, #0]
 800ae54:	2203      	movs	r2, #3
 800ae56:	4650      	mov	r0, sl
 800ae58:	f7f5 f99a 	bl	8000190 <memchr>
 800ae5c:	b140      	cbz	r0, 800ae70 <_vfiprintf_r+0x198>
 800ae5e:	2340      	movs	r3, #64	; 0x40
 800ae60:	eba0 000a 	sub.w	r0, r0, sl
 800ae64:	fa03 f000 	lsl.w	r0, r3, r0
 800ae68:	9b04      	ldr	r3, [sp, #16]
 800ae6a:	4303      	orrs	r3, r0
 800ae6c:	3401      	adds	r4, #1
 800ae6e:	9304      	str	r3, [sp, #16]
 800ae70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae74:	482c      	ldr	r0, [pc, #176]	; (800af28 <_vfiprintf_r+0x250>)
 800ae76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae7a:	2206      	movs	r2, #6
 800ae7c:	f7f5 f988 	bl	8000190 <memchr>
 800ae80:	2800      	cmp	r0, #0
 800ae82:	d03f      	beq.n	800af04 <_vfiprintf_r+0x22c>
 800ae84:	4b29      	ldr	r3, [pc, #164]	; (800af2c <_vfiprintf_r+0x254>)
 800ae86:	bb1b      	cbnz	r3, 800aed0 <_vfiprintf_r+0x1f8>
 800ae88:	9b03      	ldr	r3, [sp, #12]
 800ae8a:	3307      	adds	r3, #7
 800ae8c:	f023 0307 	bic.w	r3, r3, #7
 800ae90:	3308      	adds	r3, #8
 800ae92:	9303      	str	r3, [sp, #12]
 800ae94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae96:	443b      	add	r3, r7
 800ae98:	9309      	str	r3, [sp, #36]	; 0x24
 800ae9a:	e767      	b.n	800ad6c <_vfiprintf_r+0x94>
 800ae9c:	fb0c 3202 	mla	r2, ip, r2, r3
 800aea0:	460c      	mov	r4, r1
 800aea2:	2001      	movs	r0, #1
 800aea4:	e7a5      	b.n	800adf2 <_vfiprintf_r+0x11a>
 800aea6:	2300      	movs	r3, #0
 800aea8:	3401      	adds	r4, #1
 800aeaa:	9305      	str	r3, [sp, #20]
 800aeac:	4619      	mov	r1, r3
 800aeae:	f04f 0c0a 	mov.w	ip, #10
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aeb8:	3a30      	subs	r2, #48	; 0x30
 800aeba:	2a09      	cmp	r2, #9
 800aebc:	d903      	bls.n	800aec6 <_vfiprintf_r+0x1ee>
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d0c5      	beq.n	800ae4e <_vfiprintf_r+0x176>
 800aec2:	9105      	str	r1, [sp, #20]
 800aec4:	e7c3      	b.n	800ae4e <_vfiprintf_r+0x176>
 800aec6:	fb0c 2101 	mla	r1, ip, r1, r2
 800aeca:	4604      	mov	r4, r0
 800aecc:	2301      	movs	r3, #1
 800aece:	e7f0      	b.n	800aeb2 <_vfiprintf_r+0x1da>
 800aed0:	ab03      	add	r3, sp, #12
 800aed2:	9300      	str	r3, [sp, #0]
 800aed4:	462a      	mov	r2, r5
 800aed6:	4b16      	ldr	r3, [pc, #88]	; (800af30 <_vfiprintf_r+0x258>)
 800aed8:	a904      	add	r1, sp, #16
 800aeda:	4630      	mov	r0, r6
 800aedc:	f3af 8000 	nop.w
 800aee0:	4607      	mov	r7, r0
 800aee2:	1c78      	adds	r0, r7, #1
 800aee4:	d1d6      	bne.n	800ae94 <_vfiprintf_r+0x1bc>
 800aee6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aee8:	07d9      	lsls	r1, r3, #31
 800aeea:	d405      	bmi.n	800aef8 <_vfiprintf_r+0x220>
 800aeec:	89ab      	ldrh	r3, [r5, #12]
 800aeee:	059a      	lsls	r2, r3, #22
 800aef0:	d402      	bmi.n	800aef8 <_vfiprintf_r+0x220>
 800aef2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aef4:	f7ff fdb7 	bl	800aa66 <__retarget_lock_release_recursive>
 800aef8:	89ab      	ldrh	r3, [r5, #12]
 800aefa:	065b      	lsls	r3, r3, #25
 800aefc:	f53f af12 	bmi.w	800ad24 <_vfiprintf_r+0x4c>
 800af00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af02:	e711      	b.n	800ad28 <_vfiprintf_r+0x50>
 800af04:	ab03      	add	r3, sp, #12
 800af06:	9300      	str	r3, [sp, #0]
 800af08:	462a      	mov	r2, r5
 800af0a:	4b09      	ldr	r3, [pc, #36]	; (800af30 <_vfiprintf_r+0x258>)
 800af0c:	a904      	add	r1, sp, #16
 800af0e:	4630      	mov	r0, r6
 800af10:	f000 f880 	bl	800b014 <_printf_i>
 800af14:	e7e4      	b.n	800aee0 <_vfiprintf_r+0x208>
 800af16:	bf00      	nop
 800af18:	0800bb98 	.word	0x0800bb98
 800af1c:	0800bbb8 	.word	0x0800bbb8
 800af20:	0800bb78 	.word	0x0800bb78
 800af24:	0800bbd8 	.word	0x0800bbd8
 800af28:	0800bbe2 	.word	0x0800bbe2
 800af2c:	00000000 	.word	0x00000000
 800af30:	0800acb3 	.word	0x0800acb3
 800af34:	0800bbde 	.word	0x0800bbde

0800af38 <_printf_common>:
 800af38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af3c:	4616      	mov	r6, r2
 800af3e:	4699      	mov	r9, r3
 800af40:	688a      	ldr	r2, [r1, #8]
 800af42:	690b      	ldr	r3, [r1, #16]
 800af44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af48:	4293      	cmp	r3, r2
 800af4a:	bfb8      	it	lt
 800af4c:	4613      	movlt	r3, r2
 800af4e:	6033      	str	r3, [r6, #0]
 800af50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af54:	4607      	mov	r7, r0
 800af56:	460c      	mov	r4, r1
 800af58:	b10a      	cbz	r2, 800af5e <_printf_common+0x26>
 800af5a:	3301      	adds	r3, #1
 800af5c:	6033      	str	r3, [r6, #0]
 800af5e:	6823      	ldr	r3, [r4, #0]
 800af60:	0699      	lsls	r1, r3, #26
 800af62:	bf42      	ittt	mi
 800af64:	6833      	ldrmi	r3, [r6, #0]
 800af66:	3302      	addmi	r3, #2
 800af68:	6033      	strmi	r3, [r6, #0]
 800af6a:	6825      	ldr	r5, [r4, #0]
 800af6c:	f015 0506 	ands.w	r5, r5, #6
 800af70:	d106      	bne.n	800af80 <_printf_common+0x48>
 800af72:	f104 0a19 	add.w	sl, r4, #25
 800af76:	68e3      	ldr	r3, [r4, #12]
 800af78:	6832      	ldr	r2, [r6, #0]
 800af7a:	1a9b      	subs	r3, r3, r2
 800af7c:	42ab      	cmp	r3, r5
 800af7e:	dc26      	bgt.n	800afce <_printf_common+0x96>
 800af80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800af84:	1e13      	subs	r3, r2, #0
 800af86:	6822      	ldr	r2, [r4, #0]
 800af88:	bf18      	it	ne
 800af8a:	2301      	movne	r3, #1
 800af8c:	0692      	lsls	r2, r2, #26
 800af8e:	d42b      	bmi.n	800afe8 <_printf_common+0xb0>
 800af90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af94:	4649      	mov	r1, r9
 800af96:	4638      	mov	r0, r7
 800af98:	47c0      	blx	r8
 800af9a:	3001      	adds	r0, #1
 800af9c:	d01e      	beq.n	800afdc <_printf_common+0xa4>
 800af9e:	6823      	ldr	r3, [r4, #0]
 800afa0:	68e5      	ldr	r5, [r4, #12]
 800afa2:	6832      	ldr	r2, [r6, #0]
 800afa4:	f003 0306 	and.w	r3, r3, #6
 800afa8:	2b04      	cmp	r3, #4
 800afaa:	bf08      	it	eq
 800afac:	1aad      	subeq	r5, r5, r2
 800afae:	68a3      	ldr	r3, [r4, #8]
 800afb0:	6922      	ldr	r2, [r4, #16]
 800afb2:	bf0c      	ite	eq
 800afb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800afb8:	2500      	movne	r5, #0
 800afba:	4293      	cmp	r3, r2
 800afbc:	bfc4      	itt	gt
 800afbe:	1a9b      	subgt	r3, r3, r2
 800afc0:	18ed      	addgt	r5, r5, r3
 800afc2:	2600      	movs	r6, #0
 800afc4:	341a      	adds	r4, #26
 800afc6:	42b5      	cmp	r5, r6
 800afc8:	d11a      	bne.n	800b000 <_printf_common+0xc8>
 800afca:	2000      	movs	r0, #0
 800afcc:	e008      	b.n	800afe0 <_printf_common+0xa8>
 800afce:	2301      	movs	r3, #1
 800afd0:	4652      	mov	r2, sl
 800afd2:	4649      	mov	r1, r9
 800afd4:	4638      	mov	r0, r7
 800afd6:	47c0      	blx	r8
 800afd8:	3001      	adds	r0, #1
 800afda:	d103      	bne.n	800afe4 <_printf_common+0xac>
 800afdc:	f04f 30ff 	mov.w	r0, #4294967295
 800afe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afe4:	3501      	adds	r5, #1
 800afe6:	e7c6      	b.n	800af76 <_printf_common+0x3e>
 800afe8:	18e1      	adds	r1, r4, r3
 800afea:	1c5a      	adds	r2, r3, #1
 800afec:	2030      	movs	r0, #48	; 0x30
 800afee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aff2:	4422      	add	r2, r4
 800aff4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aff8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800affc:	3302      	adds	r3, #2
 800affe:	e7c7      	b.n	800af90 <_printf_common+0x58>
 800b000:	2301      	movs	r3, #1
 800b002:	4622      	mov	r2, r4
 800b004:	4649      	mov	r1, r9
 800b006:	4638      	mov	r0, r7
 800b008:	47c0      	blx	r8
 800b00a:	3001      	adds	r0, #1
 800b00c:	d0e6      	beq.n	800afdc <_printf_common+0xa4>
 800b00e:	3601      	adds	r6, #1
 800b010:	e7d9      	b.n	800afc6 <_printf_common+0x8e>
	...

0800b014 <_printf_i>:
 800b014:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b018:	460c      	mov	r4, r1
 800b01a:	4691      	mov	r9, r2
 800b01c:	7e27      	ldrb	r7, [r4, #24]
 800b01e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b020:	2f78      	cmp	r7, #120	; 0x78
 800b022:	4680      	mov	r8, r0
 800b024:	469a      	mov	sl, r3
 800b026:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b02a:	d807      	bhi.n	800b03c <_printf_i+0x28>
 800b02c:	2f62      	cmp	r7, #98	; 0x62
 800b02e:	d80a      	bhi.n	800b046 <_printf_i+0x32>
 800b030:	2f00      	cmp	r7, #0
 800b032:	f000 80d8 	beq.w	800b1e6 <_printf_i+0x1d2>
 800b036:	2f58      	cmp	r7, #88	; 0x58
 800b038:	f000 80a3 	beq.w	800b182 <_printf_i+0x16e>
 800b03c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b040:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b044:	e03a      	b.n	800b0bc <_printf_i+0xa8>
 800b046:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b04a:	2b15      	cmp	r3, #21
 800b04c:	d8f6      	bhi.n	800b03c <_printf_i+0x28>
 800b04e:	a001      	add	r0, pc, #4	; (adr r0, 800b054 <_printf_i+0x40>)
 800b050:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b054:	0800b0ad 	.word	0x0800b0ad
 800b058:	0800b0c1 	.word	0x0800b0c1
 800b05c:	0800b03d 	.word	0x0800b03d
 800b060:	0800b03d 	.word	0x0800b03d
 800b064:	0800b03d 	.word	0x0800b03d
 800b068:	0800b03d 	.word	0x0800b03d
 800b06c:	0800b0c1 	.word	0x0800b0c1
 800b070:	0800b03d 	.word	0x0800b03d
 800b074:	0800b03d 	.word	0x0800b03d
 800b078:	0800b03d 	.word	0x0800b03d
 800b07c:	0800b03d 	.word	0x0800b03d
 800b080:	0800b1cd 	.word	0x0800b1cd
 800b084:	0800b0f1 	.word	0x0800b0f1
 800b088:	0800b1af 	.word	0x0800b1af
 800b08c:	0800b03d 	.word	0x0800b03d
 800b090:	0800b03d 	.word	0x0800b03d
 800b094:	0800b1ef 	.word	0x0800b1ef
 800b098:	0800b03d 	.word	0x0800b03d
 800b09c:	0800b0f1 	.word	0x0800b0f1
 800b0a0:	0800b03d 	.word	0x0800b03d
 800b0a4:	0800b03d 	.word	0x0800b03d
 800b0a8:	0800b1b7 	.word	0x0800b1b7
 800b0ac:	680b      	ldr	r3, [r1, #0]
 800b0ae:	1d1a      	adds	r2, r3, #4
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	600a      	str	r2, [r1, #0]
 800b0b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b0b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b0bc:	2301      	movs	r3, #1
 800b0be:	e0a3      	b.n	800b208 <_printf_i+0x1f4>
 800b0c0:	6825      	ldr	r5, [r4, #0]
 800b0c2:	6808      	ldr	r0, [r1, #0]
 800b0c4:	062e      	lsls	r6, r5, #24
 800b0c6:	f100 0304 	add.w	r3, r0, #4
 800b0ca:	d50a      	bpl.n	800b0e2 <_printf_i+0xce>
 800b0cc:	6805      	ldr	r5, [r0, #0]
 800b0ce:	600b      	str	r3, [r1, #0]
 800b0d0:	2d00      	cmp	r5, #0
 800b0d2:	da03      	bge.n	800b0dc <_printf_i+0xc8>
 800b0d4:	232d      	movs	r3, #45	; 0x2d
 800b0d6:	426d      	negs	r5, r5
 800b0d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0dc:	485e      	ldr	r0, [pc, #376]	; (800b258 <_printf_i+0x244>)
 800b0de:	230a      	movs	r3, #10
 800b0e0:	e019      	b.n	800b116 <_printf_i+0x102>
 800b0e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b0e6:	6805      	ldr	r5, [r0, #0]
 800b0e8:	600b      	str	r3, [r1, #0]
 800b0ea:	bf18      	it	ne
 800b0ec:	b22d      	sxthne	r5, r5
 800b0ee:	e7ef      	b.n	800b0d0 <_printf_i+0xbc>
 800b0f0:	680b      	ldr	r3, [r1, #0]
 800b0f2:	6825      	ldr	r5, [r4, #0]
 800b0f4:	1d18      	adds	r0, r3, #4
 800b0f6:	6008      	str	r0, [r1, #0]
 800b0f8:	0628      	lsls	r0, r5, #24
 800b0fa:	d501      	bpl.n	800b100 <_printf_i+0xec>
 800b0fc:	681d      	ldr	r5, [r3, #0]
 800b0fe:	e002      	b.n	800b106 <_printf_i+0xf2>
 800b100:	0669      	lsls	r1, r5, #25
 800b102:	d5fb      	bpl.n	800b0fc <_printf_i+0xe8>
 800b104:	881d      	ldrh	r5, [r3, #0]
 800b106:	4854      	ldr	r0, [pc, #336]	; (800b258 <_printf_i+0x244>)
 800b108:	2f6f      	cmp	r7, #111	; 0x6f
 800b10a:	bf0c      	ite	eq
 800b10c:	2308      	moveq	r3, #8
 800b10e:	230a      	movne	r3, #10
 800b110:	2100      	movs	r1, #0
 800b112:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b116:	6866      	ldr	r6, [r4, #4]
 800b118:	60a6      	str	r6, [r4, #8]
 800b11a:	2e00      	cmp	r6, #0
 800b11c:	bfa2      	ittt	ge
 800b11e:	6821      	ldrge	r1, [r4, #0]
 800b120:	f021 0104 	bicge.w	r1, r1, #4
 800b124:	6021      	strge	r1, [r4, #0]
 800b126:	b90d      	cbnz	r5, 800b12c <_printf_i+0x118>
 800b128:	2e00      	cmp	r6, #0
 800b12a:	d04d      	beq.n	800b1c8 <_printf_i+0x1b4>
 800b12c:	4616      	mov	r6, r2
 800b12e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b132:	fb03 5711 	mls	r7, r3, r1, r5
 800b136:	5dc7      	ldrb	r7, [r0, r7]
 800b138:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b13c:	462f      	mov	r7, r5
 800b13e:	42bb      	cmp	r3, r7
 800b140:	460d      	mov	r5, r1
 800b142:	d9f4      	bls.n	800b12e <_printf_i+0x11a>
 800b144:	2b08      	cmp	r3, #8
 800b146:	d10b      	bne.n	800b160 <_printf_i+0x14c>
 800b148:	6823      	ldr	r3, [r4, #0]
 800b14a:	07df      	lsls	r7, r3, #31
 800b14c:	d508      	bpl.n	800b160 <_printf_i+0x14c>
 800b14e:	6923      	ldr	r3, [r4, #16]
 800b150:	6861      	ldr	r1, [r4, #4]
 800b152:	4299      	cmp	r1, r3
 800b154:	bfde      	ittt	le
 800b156:	2330      	movle	r3, #48	; 0x30
 800b158:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b15c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b160:	1b92      	subs	r2, r2, r6
 800b162:	6122      	str	r2, [r4, #16]
 800b164:	f8cd a000 	str.w	sl, [sp]
 800b168:	464b      	mov	r3, r9
 800b16a:	aa03      	add	r2, sp, #12
 800b16c:	4621      	mov	r1, r4
 800b16e:	4640      	mov	r0, r8
 800b170:	f7ff fee2 	bl	800af38 <_printf_common>
 800b174:	3001      	adds	r0, #1
 800b176:	d14c      	bne.n	800b212 <_printf_i+0x1fe>
 800b178:	f04f 30ff 	mov.w	r0, #4294967295
 800b17c:	b004      	add	sp, #16
 800b17e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b182:	4835      	ldr	r0, [pc, #212]	; (800b258 <_printf_i+0x244>)
 800b184:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b188:	6823      	ldr	r3, [r4, #0]
 800b18a:	680e      	ldr	r6, [r1, #0]
 800b18c:	061f      	lsls	r7, r3, #24
 800b18e:	f856 5b04 	ldr.w	r5, [r6], #4
 800b192:	600e      	str	r6, [r1, #0]
 800b194:	d514      	bpl.n	800b1c0 <_printf_i+0x1ac>
 800b196:	07d9      	lsls	r1, r3, #31
 800b198:	bf44      	itt	mi
 800b19a:	f043 0320 	orrmi.w	r3, r3, #32
 800b19e:	6023      	strmi	r3, [r4, #0]
 800b1a0:	b91d      	cbnz	r5, 800b1aa <_printf_i+0x196>
 800b1a2:	6823      	ldr	r3, [r4, #0]
 800b1a4:	f023 0320 	bic.w	r3, r3, #32
 800b1a8:	6023      	str	r3, [r4, #0]
 800b1aa:	2310      	movs	r3, #16
 800b1ac:	e7b0      	b.n	800b110 <_printf_i+0xfc>
 800b1ae:	6823      	ldr	r3, [r4, #0]
 800b1b0:	f043 0320 	orr.w	r3, r3, #32
 800b1b4:	6023      	str	r3, [r4, #0]
 800b1b6:	2378      	movs	r3, #120	; 0x78
 800b1b8:	4828      	ldr	r0, [pc, #160]	; (800b25c <_printf_i+0x248>)
 800b1ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b1be:	e7e3      	b.n	800b188 <_printf_i+0x174>
 800b1c0:	065e      	lsls	r6, r3, #25
 800b1c2:	bf48      	it	mi
 800b1c4:	b2ad      	uxthmi	r5, r5
 800b1c6:	e7e6      	b.n	800b196 <_printf_i+0x182>
 800b1c8:	4616      	mov	r6, r2
 800b1ca:	e7bb      	b.n	800b144 <_printf_i+0x130>
 800b1cc:	680b      	ldr	r3, [r1, #0]
 800b1ce:	6826      	ldr	r6, [r4, #0]
 800b1d0:	6960      	ldr	r0, [r4, #20]
 800b1d2:	1d1d      	adds	r5, r3, #4
 800b1d4:	600d      	str	r5, [r1, #0]
 800b1d6:	0635      	lsls	r5, r6, #24
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	d501      	bpl.n	800b1e0 <_printf_i+0x1cc>
 800b1dc:	6018      	str	r0, [r3, #0]
 800b1de:	e002      	b.n	800b1e6 <_printf_i+0x1d2>
 800b1e0:	0671      	lsls	r1, r6, #25
 800b1e2:	d5fb      	bpl.n	800b1dc <_printf_i+0x1c8>
 800b1e4:	8018      	strh	r0, [r3, #0]
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	6123      	str	r3, [r4, #16]
 800b1ea:	4616      	mov	r6, r2
 800b1ec:	e7ba      	b.n	800b164 <_printf_i+0x150>
 800b1ee:	680b      	ldr	r3, [r1, #0]
 800b1f0:	1d1a      	adds	r2, r3, #4
 800b1f2:	600a      	str	r2, [r1, #0]
 800b1f4:	681e      	ldr	r6, [r3, #0]
 800b1f6:	6862      	ldr	r2, [r4, #4]
 800b1f8:	2100      	movs	r1, #0
 800b1fa:	4630      	mov	r0, r6
 800b1fc:	f7f4 ffc8 	bl	8000190 <memchr>
 800b200:	b108      	cbz	r0, 800b206 <_printf_i+0x1f2>
 800b202:	1b80      	subs	r0, r0, r6
 800b204:	6060      	str	r0, [r4, #4]
 800b206:	6863      	ldr	r3, [r4, #4]
 800b208:	6123      	str	r3, [r4, #16]
 800b20a:	2300      	movs	r3, #0
 800b20c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b210:	e7a8      	b.n	800b164 <_printf_i+0x150>
 800b212:	6923      	ldr	r3, [r4, #16]
 800b214:	4632      	mov	r2, r6
 800b216:	4649      	mov	r1, r9
 800b218:	4640      	mov	r0, r8
 800b21a:	47d0      	blx	sl
 800b21c:	3001      	adds	r0, #1
 800b21e:	d0ab      	beq.n	800b178 <_printf_i+0x164>
 800b220:	6823      	ldr	r3, [r4, #0]
 800b222:	079b      	lsls	r3, r3, #30
 800b224:	d413      	bmi.n	800b24e <_printf_i+0x23a>
 800b226:	68e0      	ldr	r0, [r4, #12]
 800b228:	9b03      	ldr	r3, [sp, #12]
 800b22a:	4298      	cmp	r0, r3
 800b22c:	bfb8      	it	lt
 800b22e:	4618      	movlt	r0, r3
 800b230:	e7a4      	b.n	800b17c <_printf_i+0x168>
 800b232:	2301      	movs	r3, #1
 800b234:	4632      	mov	r2, r6
 800b236:	4649      	mov	r1, r9
 800b238:	4640      	mov	r0, r8
 800b23a:	47d0      	blx	sl
 800b23c:	3001      	adds	r0, #1
 800b23e:	d09b      	beq.n	800b178 <_printf_i+0x164>
 800b240:	3501      	adds	r5, #1
 800b242:	68e3      	ldr	r3, [r4, #12]
 800b244:	9903      	ldr	r1, [sp, #12]
 800b246:	1a5b      	subs	r3, r3, r1
 800b248:	42ab      	cmp	r3, r5
 800b24a:	dcf2      	bgt.n	800b232 <_printf_i+0x21e>
 800b24c:	e7eb      	b.n	800b226 <_printf_i+0x212>
 800b24e:	2500      	movs	r5, #0
 800b250:	f104 0619 	add.w	r6, r4, #25
 800b254:	e7f5      	b.n	800b242 <_printf_i+0x22e>
 800b256:	bf00      	nop
 800b258:	0800bbe9 	.word	0x0800bbe9
 800b25c:	0800bbfa 	.word	0x0800bbfa

0800b260 <_sbrk_r>:
 800b260:	b538      	push	{r3, r4, r5, lr}
 800b262:	4d06      	ldr	r5, [pc, #24]	; (800b27c <_sbrk_r+0x1c>)
 800b264:	2300      	movs	r3, #0
 800b266:	4604      	mov	r4, r0
 800b268:	4608      	mov	r0, r1
 800b26a:	602b      	str	r3, [r5, #0]
 800b26c:	f7f7 f8ce 	bl	800240c <_sbrk>
 800b270:	1c43      	adds	r3, r0, #1
 800b272:	d102      	bne.n	800b27a <_sbrk_r+0x1a>
 800b274:	682b      	ldr	r3, [r5, #0]
 800b276:	b103      	cbz	r3, 800b27a <_sbrk_r+0x1a>
 800b278:	6023      	str	r3, [r4, #0]
 800b27a:	bd38      	pop	{r3, r4, r5, pc}
 800b27c:	20001538 	.word	0x20001538

0800b280 <__sread>:
 800b280:	b510      	push	{r4, lr}
 800b282:	460c      	mov	r4, r1
 800b284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b288:	f000 f8a0 	bl	800b3cc <_read_r>
 800b28c:	2800      	cmp	r0, #0
 800b28e:	bfab      	itete	ge
 800b290:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b292:	89a3      	ldrhlt	r3, [r4, #12]
 800b294:	181b      	addge	r3, r3, r0
 800b296:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b29a:	bfac      	ite	ge
 800b29c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b29e:	81a3      	strhlt	r3, [r4, #12]
 800b2a0:	bd10      	pop	{r4, pc}

0800b2a2 <__swrite>:
 800b2a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2a6:	461f      	mov	r7, r3
 800b2a8:	898b      	ldrh	r3, [r1, #12]
 800b2aa:	05db      	lsls	r3, r3, #23
 800b2ac:	4605      	mov	r5, r0
 800b2ae:	460c      	mov	r4, r1
 800b2b0:	4616      	mov	r6, r2
 800b2b2:	d505      	bpl.n	800b2c0 <__swrite+0x1e>
 800b2b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2b8:	2302      	movs	r3, #2
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f000 f868 	bl	800b390 <_lseek_r>
 800b2c0:	89a3      	ldrh	r3, [r4, #12]
 800b2c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b2ca:	81a3      	strh	r3, [r4, #12]
 800b2cc:	4632      	mov	r2, r6
 800b2ce:	463b      	mov	r3, r7
 800b2d0:	4628      	mov	r0, r5
 800b2d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2d6:	f000 b817 	b.w	800b308 <_write_r>

0800b2da <__sseek>:
 800b2da:	b510      	push	{r4, lr}
 800b2dc:	460c      	mov	r4, r1
 800b2de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2e2:	f000 f855 	bl	800b390 <_lseek_r>
 800b2e6:	1c43      	adds	r3, r0, #1
 800b2e8:	89a3      	ldrh	r3, [r4, #12]
 800b2ea:	bf15      	itete	ne
 800b2ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800b2ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b2f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b2f6:	81a3      	strheq	r3, [r4, #12]
 800b2f8:	bf18      	it	ne
 800b2fa:	81a3      	strhne	r3, [r4, #12]
 800b2fc:	bd10      	pop	{r4, pc}

0800b2fe <__sclose>:
 800b2fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b302:	f000 b813 	b.w	800b32c <_close_r>
	...

0800b308 <_write_r>:
 800b308:	b538      	push	{r3, r4, r5, lr}
 800b30a:	4d07      	ldr	r5, [pc, #28]	; (800b328 <_write_r+0x20>)
 800b30c:	4604      	mov	r4, r0
 800b30e:	4608      	mov	r0, r1
 800b310:	4611      	mov	r1, r2
 800b312:	2200      	movs	r2, #0
 800b314:	602a      	str	r2, [r5, #0]
 800b316:	461a      	mov	r2, r3
 800b318:	f7fd fa7c 	bl	8008814 <_write>
 800b31c:	1c43      	adds	r3, r0, #1
 800b31e:	d102      	bne.n	800b326 <_write_r+0x1e>
 800b320:	682b      	ldr	r3, [r5, #0]
 800b322:	b103      	cbz	r3, 800b326 <_write_r+0x1e>
 800b324:	6023      	str	r3, [r4, #0]
 800b326:	bd38      	pop	{r3, r4, r5, pc}
 800b328:	20001538 	.word	0x20001538

0800b32c <_close_r>:
 800b32c:	b538      	push	{r3, r4, r5, lr}
 800b32e:	4d06      	ldr	r5, [pc, #24]	; (800b348 <_close_r+0x1c>)
 800b330:	2300      	movs	r3, #0
 800b332:	4604      	mov	r4, r0
 800b334:	4608      	mov	r0, r1
 800b336:	602b      	str	r3, [r5, #0]
 800b338:	f7f7 f833 	bl	80023a2 <_close>
 800b33c:	1c43      	adds	r3, r0, #1
 800b33e:	d102      	bne.n	800b346 <_close_r+0x1a>
 800b340:	682b      	ldr	r3, [r5, #0]
 800b342:	b103      	cbz	r3, 800b346 <_close_r+0x1a>
 800b344:	6023      	str	r3, [r4, #0]
 800b346:	bd38      	pop	{r3, r4, r5, pc}
 800b348:	20001538 	.word	0x20001538

0800b34c <_fstat_r>:
 800b34c:	b538      	push	{r3, r4, r5, lr}
 800b34e:	4d07      	ldr	r5, [pc, #28]	; (800b36c <_fstat_r+0x20>)
 800b350:	2300      	movs	r3, #0
 800b352:	4604      	mov	r4, r0
 800b354:	4608      	mov	r0, r1
 800b356:	4611      	mov	r1, r2
 800b358:	602b      	str	r3, [r5, #0]
 800b35a:	f7f7 f82e 	bl	80023ba <_fstat>
 800b35e:	1c43      	adds	r3, r0, #1
 800b360:	d102      	bne.n	800b368 <_fstat_r+0x1c>
 800b362:	682b      	ldr	r3, [r5, #0]
 800b364:	b103      	cbz	r3, 800b368 <_fstat_r+0x1c>
 800b366:	6023      	str	r3, [r4, #0]
 800b368:	bd38      	pop	{r3, r4, r5, pc}
 800b36a:	bf00      	nop
 800b36c:	20001538 	.word	0x20001538

0800b370 <_isatty_r>:
 800b370:	b538      	push	{r3, r4, r5, lr}
 800b372:	4d06      	ldr	r5, [pc, #24]	; (800b38c <_isatty_r+0x1c>)
 800b374:	2300      	movs	r3, #0
 800b376:	4604      	mov	r4, r0
 800b378:	4608      	mov	r0, r1
 800b37a:	602b      	str	r3, [r5, #0]
 800b37c:	f7f7 f82d 	bl	80023da <_isatty>
 800b380:	1c43      	adds	r3, r0, #1
 800b382:	d102      	bne.n	800b38a <_isatty_r+0x1a>
 800b384:	682b      	ldr	r3, [r5, #0]
 800b386:	b103      	cbz	r3, 800b38a <_isatty_r+0x1a>
 800b388:	6023      	str	r3, [r4, #0]
 800b38a:	bd38      	pop	{r3, r4, r5, pc}
 800b38c:	20001538 	.word	0x20001538

0800b390 <_lseek_r>:
 800b390:	b538      	push	{r3, r4, r5, lr}
 800b392:	4d07      	ldr	r5, [pc, #28]	; (800b3b0 <_lseek_r+0x20>)
 800b394:	4604      	mov	r4, r0
 800b396:	4608      	mov	r0, r1
 800b398:	4611      	mov	r1, r2
 800b39a:	2200      	movs	r2, #0
 800b39c:	602a      	str	r2, [r5, #0]
 800b39e:	461a      	mov	r2, r3
 800b3a0:	f7f7 f826 	bl	80023f0 <_lseek>
 800b3a4:	1c43      	adds	r3, r0, #1
 800b3a6:	d102      	bne.n	800b3ae <_lseek_r+0x1e>
 800b3a8:	682b      	ldr	r3, [r5, #0]
 800b3aa:	b103      	cbz	r3, 800b3ae <_lseek_r+0x1e>
 800b3ac:	6023      	str	r3, [r4, #0]
 800b3ae:	bd38      	pop	{r3, r4, r5, pc}
 800b3b0:	20001538 	.word	0x20001538

0800b3b4 <__malloc_lock>:
 800b3b4:	4801      	ldr	r0, [pc, #4]	; (800b3bc <__malloc_lock+0x8>)
 800b3b6:	f7ff bb55 	b.w	800aa64 <__retarget_lock_acquire_recursive>
 800b3ba:	bf00      	nop
 800b3bc:	20001530 	.word	0x20001530

0800b3c0 <__malloc_unlock>:
 800b3c0:	4801      	ldr	r0, [pc, #4]	; (800b3c8 <__malloc_unlock+0x8>)
 800b3c2:	f7ff bb50 	b.w	800aa66 <__retarget_lock_release_recursive>
 800b3c6:	bf00      	nop
 800b3c8:	20001530 	.word	0x20001530

0800b3cc <_read_r>:
 800b3cc:	b538      	push	{r3, r4, r5, lr}
 800b3ce:	4d07      	ldr	r5, [pc, #28]	; (800b3ec <_read_r+0x20>)
 800b3d0:	4604      	mov	r4, r0
 800b3d2:	4608      	mov	r0, r1
 800b3d4:	4611      	mov	r1, r2
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	602a      	str	r2, [r5, #0]
 800b3da:	461a      	mov	r2, r3
 800b3dc:	f7f6 ffc4 	bl	8002368 <_read>
 800b3e0:	1c43      	adds	r3, r0, #1
 800b3e2:	d102      	bne.n	800b3ea <_read_r+0x1e>
 800b3e4:	682b      	ldr	r3, [r5, #0]
 800b3e6:	b103      	cbz	r3, 800b3ea <_read_r+0x1e>
 800b3e8:	6023      	str	r3, [r4, #0]
 800b3ea:	bd38      	pop	{r3, r4, r5, pc}
 800b3ec:	20001538 	.word	0x20001538

0800b3f0 <_init>:
 800b3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3f2:	bf00      	nop
 800b3f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3f6:	bc08      	pop	{r3}
 800b3f8:	469e      	mov	lr, r3
 800b3fa:	4770      	bx	lr

0800b3fc <_fini>:
 800b3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3fe:	bf00      	nop
 800b400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b402:	bc08      	pop	{r3}
 800b404:	469e      	mov	lr, r3
 800b406:	4770      	bx	lr
